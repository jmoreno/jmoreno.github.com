{"meta":{"exported_on":1441611032000,"version":"000"},"data":{"posts":[{"id":0,"title":"DISPLAY ‘HOLA MUNDO’","slug":"display-hola-mundo","markdown":"Espero que este no sea otro intento más de escribir un blog y pueda darle continuidad.\n\nLlevo muchos años pensando en lo que podría escribir en un blog... tantos que hasta ahora no había escrito ninguno. Como últimamente estoy muy centrado en el tema de la programación para iOS y leo muchos blogs donde la gente cuenta cosas que ha aprendido o sabe hacer para ayudar al resto de la comunidad de desarrolladores (entre ellos a mi), he pensado que una buena idea para empezar sería devolver los favores escribiendo mis \"avances\". De eso es de lo que trata este blog... de como un triste programador de COBOL intenta hacer app´s para su iPhone.\n\nY para darle más cache a esta primera entrada, me voy a permitir el lujo de citar a Marcus Zarra que en su post \"Why so serious?\" hace una afirmación que ningún desarrollador debe olvidar jamás... o al menos eso pienso yo.\n\n\n> \n\n> \n> \"We as developer must remember that we are not the target for 99% of the software that is written. We are not the final judge on what will or will not work. If anything, we are the last people that should have an opinion on what is good or bad. We should be the ones that step back and watch what the “normals” do with it. They determine the success or failure, not us\"\n","html":"<p>Espero que este no sea otro intento más de escribir un blog y pueda darle continuidad.</p>\n\n<p>Llevo muchos años pensando en lo que podría escribir en un blog... tantos que hasta ahora no había escrito ninguno. Como últimamente estoy muy centrado en el tema de la programación para iOS y leo muchos blogs donde la gente cuenta cosas que ha aprendido o sabe hacer para ayudar al resto de la comunidad de desarrolladores (entre ellos a mi), he pensado que una buena idea para empezar sería devolver los favores escribiendo mis &quot;avances&quot;. De eso es de lo que trata este blog... de como un triste programador de COBOL intenta hacer app´s para su iPhone.</p>\n\n<p>Y para darle más cache a esta primera entrada, me voy a permitir el lujo de citar a Marcus Zarra que en su post &quot;Why so serious?&quot; hace una afirmación que ningún desarrollador debe olvidar jamás... o al menos eso pienso yo.</p>\n\n<blockquote>\n<p>&quot;We as developer must remember that we are not the target for 99% of the software that is written. We are not the final judge on what will or will not work. If anything, we are the last people that should have an opinion on what is good or bad. We should be the ones that step back and watch what the “normals” do with it. They determine the success or failure, not us&quot;</p>\n</blockquote>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1314799200000,"created_by":1,"updated_at":1314799200000,"updated_by":1,"published_at":1314799200000,"published_by":1},{"id":1,"title":"No Empezamos Muy Bien... Es Difícil Sacar Tiempo Para Escribir Un Blog.","slug":"5","markdown":"De momento me conformo con dejar aquí un par de sitios web bastante interesantes que he encontrado últimamente:\n\n* [MaaSive](http://www.maasive.co/): Es un sitio web que ofrece persistencia en la nube. Lo encontré gracias a un tweet de [Brandon Trebitowski](http://twitter.com/brandontreb) y el video demostrativo deja claro lo que es: un framework que podríamos utilizar para sustituir (o complementar según se quiera) a Core Data y almacenar todos los datos en la nube. Soluciones como esta hay unas cuantas: amazon cloud services, google app engine, etc. La ventaja de este framework es la clara orientación a iOS. Está todavía en fase alfa.\n\t\n* [Parse:](http://www.parse.com/) Este es el que más impresionado me ha dejado. En algún momento pensarás en hacer una app que requiera notificaciones \"push\". Al margen de lo engorroso que pueda resultar montar todo el servicio de notificaciones, lo más probable es que la solución que encontremos tenga un coste económico ya que requiere de un servidor.\n\nParse encapsula todo el proceso de notificación en un framework para que sea sencillo de implementar en una app y además es gratuito para pocos usos (relativamente, que ya me gustaría a mí tener una app que hiciera más de un millón de push al mes).\n\nHasta aquí por hoy. Estoy trabajando en algunas cosillas que me gustaría compartir pero todavía no están terminadas. Espero no tardar tanto en escribir el siguiente.\n\n\n\n","html":"<p>De momento me conformo con dejar aquí un par de sitios web bastante interesantes que he encontrado últimamente:</p>\n\n<ul>\n<li><p><a href=\"http://www.maasive.co/\">MaaSive</a>: Es un sitio web que ofrece persistencia en la nube. Lo encontré gracias a un tweet de <a href=\"http://twitter.com/brandontreb\">Brandon Trebitowski</a> y el video demostrativo deja claro lo que es: un framework que podríamos utilizar para sustituir (o complementar según se quiera) a Core Data y almacenar todos los datos en la nube. Soluciones como esta hay unas cuantas: amazon cloud services, google app engine, etc. La ventaja de este framework es la clara orientación a iOS. Está todavía en fase alfa.</p></li>\n<li><p><a href=\"http://www.parse.com/\">Parse:</a> Este es el que más impresionado me ha dejado. En algún momento pensarás en hacer una app que requiera notificaciones &quot;push&quot;. Al margen de lo engorroso que pueda resultar montar todo el servicio de notificaciones, lo más probable es que la solución que encontremos tenga un coste económico ya que requiere de un servidor.</p></li>\n</ul>\n\n<p>Parse encapsula todo el proceso de notificación en un framework para que sea sencillo de implementar en una app y además es gratuito para pocos usos (relativamente, que ya me gustaría a mí tener una app que hiciera más de un millón de push al mes).</p>\n\n<p>Hasta aquí por hoy. Estoy trabajando en algunas cosillas que me gustaría compartir pero todavía no están terminadas. Espero no tardar tanto en escribir el siguiente.</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1319642880000,"created_by":1,"updated_at":1319642880000,"updated_by":1,"published_at":1319642880000,"published_by":1},{"id":2,"title":"Planificando La Descarga De Informes De iTunes Connect","slug":"planificando-la-descarga-de-informes-de-itunes-connect","markdown":"Hace poco me puse con una tarea que tenía pendiente desde el verano: automatizar la descarga de informes del iTunes Connect.\n\nEl 30 de Agosto, en el Apple Developer Connection (en el iOS Developer News también) publicaron esto: [Automatically Download iTunes Connect Reports](http://developer.apple.com/news/index.php?id=08302011a). \nLo que nos contaban ahí es que habían desarrollado una nueva herramienta para poder descargar los informes de ventas del iTunes Connect sin tener que acceder a dicho portal. \nEsto está muy bien, primero porque la descarga de varios informes es bastante tediosa, segundo porque es normal que no te acuerdes de entrar a descargarlos y puedes automatizar la descarga y tercero porque las herramientas para el seguimiento de las ventas brillan por su ausencia así que si empiezan a hacer alguna es una buena señal.\n\n<!--more-->\n\nA los cuatro días ya podía encontrarse en la web este enlace: [A Bash script to download all available reports using Apple's ‘Auto-Ingest’ Tool for iTunes Connect Sales & Trends Reports](http://ipaddevzone.com/cs/bash-script-download-all-available-reports-using-apples-auto-ingest-tool-itunes-connect-sales-tren)\n\nVoy a insistir un poco más en la importancia de la planificación de estas descargas: tanto con esta herramienta como desde el portal solo puedes descargarte los últimos 14 informes diarios y los últimos 13 informes semanales (de ventas, no los que echan en la primera de TVE los sábados por la noche). Si planificas una tarea de descarga diaria, mal se tiene que dar para que al menos una vez en 14 días tu Mac no esté encendido a la/s hora/s planificada/s.\nEn el enlace de iPad DevZone nos mostraban un Bash script para ejecutar la descarga, con comprobación de existencia de fichero descargado para no repetir además de los pasos a seguir para planificar este script correctamente.\n\nLo que escribo a continuación es, básicamente, la traducción del contenido de ese post con alguna aclaración más para los que no tengan ni idea de lo que es un script bash ni de como se planifica (yo era uno de esos hasta hace quince días).\n\n1.- Creamos un directorio para nuestros scripts, por ejemplo: ~/bin/itc (para los no familiarizados con esta notación esto es crear una carpeta que se llame \"bin\" dentro de nuestra carpeta de usuario que, a su vez, contenga otra carpeta llamada \"itc\")\n\n2.- Con nuestro editor de texto favorito (yo lo hice con TextWrangler) creamos un archivo llamado \"download_itc_reports_sh\" y lo guardamos en la carpeta \"itc\" que hemos creado antes. A continuación copiamos uno de los scripts que están al final de este post, lo pegamos y modificamos los parámetros de la sección de \"Configuration\" con nuestros propios datos.\nUSER_NAME es nuestro usuario de acceso al iTC, USER_PASSWD la contraseña, VENDOR_ID el código de compañía y DIR_DEST el directorio donde vamos a descargar los informes. En mi caso particular, el directorio de descarga está dentro de la carpeta de DropBox que tengo en el Mac y así tengo el backup de los informes automatizado... ;-)\n\n3.- En la misma carpeta donde dejamos este fichero, tenemos que tener la herramienta de descarga automática que no es otra cosa que una clase Java. Si no la has descargado todavía puedes hacerlo desde este [enlace](http://www.apple.com/itunesnews/docs/Autoingestion.class.zip). Tendrás que tener Java instalado para poder utilizar esta herramienta.\nLos siguientes pasos ya hay que darlos en el Terminal.\n\n4.- Si queremos ejecutar manualmente el script, escribimos en el terminal lo siguiente:\n\n    $ ~/bin/itc/download_itc_reports.sh\n\n5.- Para planificarlo tendremos que usar otra herramienta escondida dentro del Terminal: Crontab\n\n6.- Para editar las entradas de Crontab escribimos lo siguiente en el terminal:\n    \n    $ crontab -e\n\n7.- En una nueva linea en blanco (o en la primera si no tenemos nada) escribimos lo siguiente\n  \n    0 13,14,16 * * * ~/bin/itc/download_itc_reports.sh\n\n8.- Breve explicación sobre crontab. Cada registro consta de seis argumentos: minutos, horas, día del mes, mes, día de la semana y comando a ejecutar. Varios valores para el mismo argumento se separan por comas. El ejemplo se entiende como: \"en el minuto cero de las 13, 14 y 16 horas de cualquier día, de cualquier mes y cualquier día de la semana ejecutar el comando ~/bin/itc/download_itc_reports.sh. Puedes encontrar más información de crontab en este [enlace](http://benr75.com/pages/using_crontab_mac_os_x_unix_linux).\n\n9.- Si ya hemos creado otro script (por ejemplo: uno para informes diarios y otro para los semanales) habría que incluir otra linea con la planificación deseada y el nombre del script.\n\n10.- Una vez que hemos terminado de editar, guardamos y comprobamos nuestro trabajo escribiendo en el terminal:\n    \n    $ crontab -l\n\n11.- Y ya está, si el Mac está encendido a las horas planificadas se ejecutarán los scripts.\n\nLos informes son ficheros planos que pueden ser importados a cualquier hoja de cálculo o base de datos que nos hayamos creado. Yo uso una aplicación que se llama AppStar Lite que permite importar estos informes y visualizarlos de una forma agradable.\n\nActualmente podemos descargarnos dos tipos de informe: Diarios y Semanales. A continuación hay un script para cada uno.\nAdemás, cada tipo de informe tiene dos subtipos: Summary y Opt-In. No tengo muy clara la diferencia entre los primeros y los segundos. Los scripts están escritos para descargar los Summary, para descargar los Opt-In simplemente habría que cambiar una palabra por la otra.\n\nScript para descarga de informes diarios:\n\n{% codeblock lang:bash %}\n#!/usr/bin/env bash\n#\n# Copyright 2011, Shark Intelligence, s.r.o.\n# Released under the MIT license\n#\n#-------------------------------------------------------------------------------\n# Configuration\n#-------------------------------------------------------------------------------\n# ITC user name\nUSER_NAME=\"user name\"\n# ITC user password\nUSER_PASSWD=\"user password\"\n# vendorid: find it at: https://reportingitc.apple.com/subdashboard.faces\nVENDOR_ID=\"vendor Id\"\n# directory where the reports are downloaded; Current dir is used if empty;\nDIR_DEST=~/projects/XXX/reports-sales\n# number of days beginning with yesterday which the reports are downloaded for\nNUM_OF_DAYS_TO_DOWNLOAD=14\n# Currently only Sales reports are supported\nREPORT_TYPE=\"S\"\n# Currently only Daily report frequency is supported\nREPORT_FREQ=\"D\"\n#-------------------------------------------------------------------------------\n# Program start\n#-------------------------------------------------------------------------------\n# Adjust input vars\n#\nif [ -z \"$DIR_DEST\" ]; then DIR_DEST=`pwd -P`; fi\n# Print info\n#\necho Downloading ITC sales reports for $NUM_OF_DAYS_TO_DOWNLOAD days into destination: $DIR_DEST\n# set CLASSPATH which should point the this script location\n#\nTHIS_SCRIPT=$0\ncd `dirname $THIS_SCRIPT`\nCLASSPATH=`pwd -P`\n# set dir where the reports are downloaded to\n#\ncd $DIR_DEST\n# loop for requested NUM_OF_DAYS_TO_DOWNLOAD\n#\nfor (( DAY=NUM_OF_DAYS_TO_DOWNLOAD; DAY>0; DAY-- ))\ndo\nDT_CUR_STR=\"date -v-${DAY}d +%Y%m%d\"\nDT_CUR=`$DT_CUR_STR`\nFILE_CUR=\"${REPORT_TYPE}_${REPORT_FREQ}_${VENDOR_ID}_${DT_CUR}.txt.gz\"\nif [ $(find . -name $FILE_CUR -maxdepth 1 -type f | wc -l) == \"0\" ]\nthen\n# Report is missing so download one\n#\necho $DT_CUR: MISSING! Download initiated...\njava -cp $CLASSPATH Autoingestion $USER_NAME $USER_PASSWD $VENDOR_ID Sales Daily Summary $DT_CUR\nelse\n# Report is found\n#\necho \"$DT_CUR: already here\"\nfi\ndone\n{% endcodeblock %}\n\nScript para descarga de informes semanales:\n\n{% codeblock lang:bash %}\n#!/usr/bin/env bash\n#\n# Copyright 2011, Shark Intelligence, s.r.o.\n# Released under the MIT license\n#\n#-------------------------------------------------------------------------------\n# Configuration\n#-------------------------------------------------------------------------------\n# ITC user name\nUSER_NAME=\"user name\"\n# ITC user password\nUSER_PASSWD=\"user password\"\n# vendorid: find it at: https://reportingitc.apple.com/subdashboard.faces\nVENDOR_ID=\"vendor Id\"\n# directory where the reports are downloaded; Current dir is used if empty;\nDIR_DEST=~/projects/XXX/reports-sales\n# number of days beginning with yesterday which the reports are downloaded for\nNUM_OF_WEEKS_TO_DOWNLOAD=13\n# Currently only Sales reports are supported\nREPORT_TYPE=\"S\"\n# Currently only Daily report frequency is supported\nREPORT_FREQ=\"W\"\n#-------------------------------------------------------------------------------\n# Program start\n#-------------------------------------------------------------------------------\n# Adjust input vars\n#\nif [ -z \"$DIR_DEST\" ]; then DIR_DEST=`pwd -P`; fi\n# Print info\n#\necho Downloading ITC sales reports for $NUM_OF_WEEKS_TO_DOWNLOAD days into destination: $DIR_DEST\n# set CLASSPATH which should point the this script location\n#\nTHIS_SCRIPT=$0\ncd `dirname $THIS_SCRIPT`\nCLASSPATH=`pwd -P`\n# set dir where the reports are downloaded to\n#\ncd $DIR_DEST\n# loop for requested NUM_OF_WEEKS_TO_DOWNLOAD\n#\nfor (( WEEK=NUM_OF_WEEKS_TO_DOWNLOAD; WEEK>0; WEEK-- ))\ndo\n# set value for last sunday\n#\nDT_DAY_OF_WEEK=`date +%w`\nlet DAYS=(WEEK-1)*7+DT_DAY_OF_WEEK\nDT_CUR_STR=\"date -v-${DAY}d +%Y%m%d\"\nDT_CUR=`$DT_CUR_STR`\nFILE_CUR=\"${REPORT_TYPE}_${REPORT_FREQ}_${VENDOR_ID}_${DT_CUR}.txt.gz\"\nif [ $(find . -name $FILE_CUR -maxdepth 1 -type f | wc -l) == \"0\" ]\nthen\n# Report is missing so download one\n#\necho $DT_CUR: MISSING! Download initiated...\njava -cp $CLASSPATH Autoingestion $USER_NAME $USER_PASSWD $VENDOR_ID Sales Daily Summary $DT_CUR\nelse\n# Report is found\n#\necho \"$DT_CUR: already here\"\nfi\ndone\n{% endcodeblock %}\n","html":"<p>Hace poco me puse con una tarea que tenía pendiente desde el verano: automatizar la descarga de informes del iTunes Connect.</p>\n\n<p>El 30 de Agosto, en el Apple Developer Connection (en el iOS Developer News también) publicaron esto: <a href=\"http://developer.apple.com/news/index.php?id=08302011a\">Automatically Download iTunes Connect Reports</a>. \nLo que nos contaban ahí es que habían desarrollado una nueva herramienta para poder descargar los informes de ventas del iTunes Connect sin tener que acceder a dicho portal. \nEsto está muy bien, primero porque la descarga de varios informes es bastante tediosa, segundo porque es normal que no te acuerdes de entrar a descargarlos y puedes automatizar la descarga y tercero porque las herramientas para el seguimiento de las ventas brillan por su ausencia así que si empiezan a hacer alguna es una buena señal.</p>\n\n<!--more-->\n\n<p>A los cuatro días ya podía encontrarse en la web este enlace: <a href=\"http://ipaddevzone.com/cs/bash-script-download-all-available-reports-using-apples-auto-ingest-tool-itunes-connect-sales-tren\">A Bash script to download all available reports using Apple&#39;s ‘Auto-Ingest’ Tool for iTunes Connect Sales &amp; Trends Reports</a></p>\n\n<p>Voy a insistir un poco más en la importancia de la planificación de estas descargas: tanto con esta herramienta como desde el portal solo puedes descargarte los últimos 14 informes diarios y los últimos 13 informes semanales (de ventas, no los que echan en la primera de TVE los sábados por la noche). Si planificas una tarea de descarga diaria, mal se tiene que dar para que al menos una vez en 14 días tu Mac no esté encendido a la/s hora/s planificada/s.\nEn el enlace de iPad DevZone nos mostraban un Bash script para ejecutar la descarga, con comprobación de existencia de fichero descargado para no repetir además de los pasos a seguir para planificar este script correctamente.</p>\n\n<p>Lo que escribo a continuación es, básicamente, la traducción del contenido de ese post con alguna aclaración más para los que no tengan ni idea de lo que es un script bash ni de como se planifica (yo era uno de esos hasta hace quince días).</p>\n\n<p>1.- Creamos un directorio para nuestros scripts, por ejemplo: ~/bin/itc (para los no familiarizados con esta notación esto es crear una carpeta que se llame &quot;bin&quot; dentro de nuestra carpeta de usuario que, a su vez, contenga otra carpeta llamada &quot;itc&quot;)</p>\n\n<p>2.- Con nuestro editor de texto favorito (yo lo hice con TextWrangler) creamos un archivo llamado &quot;download<em>itc</em>reports<em>sh&quot; y lo guardamos en la carpeta &quot;itc&quot; que hemos creado antes. A continuación copiamos uno de los scripts que están al final de este post, lo pegamos y modificamos los parámetros de la sección de &quot;Configuration&quot; con nuestros propios datos.\nUSER</em>NAME es nuestro usuario de acceso al iTC, USER<em>PASSWD la contraseña, VENDOR</em>ID el código de compañía y DIR_DEST el directorio donde vamos a descargar los informes. En mi caso particular, el directorio de descarga está dentro de la carpeta de DropBox que tengo en el Mac y así tengo el backup de los informes automatizado... ;-)</p>\n\n<p>3.- En la misma carpeta donde dejamos este fichero, tenemos que tener la herramienta de descarga automática que no es otra cosa que una clase Java. Si no la has descargado todavía puedes hacerlo desde este <a href=\"http://www.apple.com/itunesnews/docs/Autoingestion.class.zip\">enlace</a>. Tendrás que tener Java instalado para poder utilizar esta herramienta.\nLos siguientes pasos ya hay que darlos en el Terminal.</p>\n\n<p>4.- Si queremos ejecutar manualmente el script, escribimos en el terminal lo siguiente:</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ ~/bin/itc/download_itc_reports.sh\n</code></pre></div>\n<p>5.- Para planificarlo tendremos que usar otra herramienta escondida dentro del Terminal: Crontab</p>\n\n<p>6.- Para editar las entradas de Crontab escribimos lo siguiente en el terminal:</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ crontab -e\n</code></pre></div>\n<p>7.- En una nueva linea en blanco (o en la primera si no tenemos nada) escribimos lo siguiente</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">0 13,14,16 * * * ~/bin/itc/download_itc_reports.sh\n</code></pre></div>\n<p>8.- Breve explicación sobre crontab. Cada registro consta de seis argumentos: minutos, horas, día del mes, mes, día de la semana y comando a ejecutar. Varios valores para el mismo argumento se separan por comas. El ejemplo se entiende como: &quot;en el minuto cero de las 13, 14 y 16 horas de cualquier día, de cualquier mes y cualquier día de la semana ejecutar el comando ~/bin/itc/download<em>itc</em>reports.sh. Puedes encontrar más información de crontab en este <a href=\"http://benr75.com/pages/using_crontab_mac_os_x_unix_linux\">enlace</a>.</p>\n\n<p>9.- Si ya hemos creado otro script (por ejemplo: uno para informes diarios y otro para los semanales) habría que incluir otra linea con la planificación deseada y el nombre del script.</p>\n\n<p>10.- Una vez que hemos terminado de editar, guardamos y comprobamos nuestro trabajo escribiendo en el terminal:</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ crontab -l\n</code></pre></div>\n<p>11.- Y ya está, si el Mac está encendido a las horas planificadas se ejecutarán los scripts.</p>\n\n<p>Los informes son ficheros planos que pueden ser importados a cualquier hoja de cálculo o base de datos que nos hayamos creado. Yo uso una aplicación que se llama AppStar Lite que permite importar estos informes y visualizarlos de una forma agradable.</p>\n\n<p>Actualmente podemos descargarnos dos tipos de informe: Diarios y Semanales. A continuación hay un script para cada uno.\nAdemás, cada tipo de informe tiene dos subtipos: Summary y Opt-In. No tengo muy clara la diferencia entre los primeros y los segundos. Los scripts están escritos para descargar los Summary, para descargar los Opt-In simplemente habría que cambiar una palabra por la otra.</p>\n\n<p>Script para descarga de informes diarios:</p>\n\n<p>{% codeblock lang:bash %}</p>\n\n<h1>!/usr/bin/env bash</h1>\n\n<h1>Copyright 2011, Shark Intelligence, s.r.o.</h1>\n\n<h1>Released under the MIT license</h1>\n\n<h1>-------------------------------------------------------------------------------</h1>\n\n<h1>Configuration</h1>\n\n<h1>-------------------------------------------------------------------------------</h1>\n\n<h1>ITC user name</h1>\n\n<p>USER_NAME=&quot;user name&quot;</p>\n\n<h1>ITC user password</h1>\n\n<p>USER_PASSWD=&quot;user password&quot;</p>\n\n<h1>vendorid: find it at: https://reportingitc.apple.com/subdashboard.faces</h1>\n\n<p>VENDOR_ID=&quot;vendor Id&quot;</p>\n\n<h1>directory where the reports are downloaded; Current dir is used if empty;</h1>\n\n<p>DIR_DEST=~/projects/XXX/reports-sales</p>\n\n<h1>number of days beginning with yesterday which the reports are downloaded for</h1>\n\n<p>NUM<em>OF</em>DAYS<em>TO</em>DOWNLOAD=14</p>\n\n<h1>Currently only Sales reports are supported</h1>\n\n<p>REPORT_TYPE=&quot;S&quot;</p>\n\n<h1>Currently only Daily report frequency is supported</h1>\n\n<p>REPORT_FREQ=&quot;D&quot;</p>\n\n<h1>-------------------------------------------------------------------------------</h1>\n\n<h1>Program start</h1>\n\n<h1>-------------------------------------------------------------------------------</h1>\n\n<h1>Adjust input vars</h1>\n\n<p>if [ -z &quot;$DIR<em>DEST&quot; ]; then DIR</em>DEST=<code>pwd -P</code>; fi</p>\n\n<h1>Print info</h1>\n\n<p>echo Downloading ITC sales reports for $NUM<em>OF</em>DAYS<em>TO</em>DOWNLOAD days into destination: $DIR_DEST</p>\n\n<h1>set CLASSPATH which should point the this script location</h1>\n\n<p>THIS<em>SCRIPT=$0\ncd `dirname $THIS</em>SCRIPT<code>\nCLASSPATH=</code>pwd -P`</p>\n\n<h1>set dir where the reports are downloaded to</h1>\n\n<p>cd $DIR_DEST</p>\n\n<h1>loop for requested NUM<em>OF</em>DAYS<em>TO</em>DOWNLOAD</h1>\n\n<p>for (( DAY=NUM<em>OF</em>DAYS<em>TO</em>DOWNLOAD; DAY&gt;0; DAY-- ))\ndo\nDT<em>CUR</em>STR=&quot;date -v-${DAY}d +%Y%m%d&quot;\nDT<em>CUR=`$DT</em>CUR<em>STR`\nFILE</em>CUR=&quot;${REPORT<em>TYPE}</em>${REPORT<em>FREQ}</em>${VENDOR<em>ID}</em>${DT<em>CUR}.txt.gz&quot;\nif [ $(find . -name $FILE</em>CUR -maxdepth 1 -type f | wc -l) == &quot;0&quot; ]\nthen</p>\n\n<h1>Report is missing so download one</h1>\n\n<p>echo $DT<em>CUR: MISSING! Download initiated...\njava -cp $CLASSPATH Autoingestion $USER</em>NAME $USER<em>PASSWD $VENDOR</em>ID Sales Daily Summary $DT_CUR\nelse</p>\n\n<h1>Report is found</h1>\n\n<p>echo &quot;$DT_CUR: already here&quot;\nfi\ndone\n{% endcodeblock %}</p>\n\n<p>Script para descarga de informes semanales:</p>\n\n<p>{% codeblock lang:bash %}</p>\n\n<h1>!/usr/bin/env bash</h1>\n\n<h1>Copyright 2011, Shark Intelligence, s.r.o.</h1>\n\n<h1>Released under the MIT license</h1>\n\n<h1>-------------------------------------------------------------------------------</h1>\n\n<h1>Configuration</h1>\n\n<h1>-------------------------------------------------------------------------------</h1>\n\n<h1>ITC user name</h1>\n\n<p>USER_NAME=&quot;user name&quot;</p>\n\n<h1>ITC user password</h1>\n\n<p>USER_PASSWD=&quot;user password&quot;</p>\n\n<h1>vendorid: find it at: https://reportingitc.apple.com/subdashboard.faces</h1>\n\n<p>VENDOR_ID=&quot;vendor Id&quot;</p>\n\n<h1>directory where the reports are downloaded; Current dir is used if empty;</h1>\n\n<p>DIR_DEST=~/projects/XXX/reports-sales</p>\n\n<h1>number of days beginning with yesterday which the reports are downloaded for</h1>\n\n<p>NUM<em>OF</em>WEEKS<em>TO</em>DOWNLOAD=13</p>\n\n<h1>Currently only Sales reports are supported</h1>\n\n<p>REPORT_TYPE=&quot;S&quot;</p>\n\n<h1>Currently only Daily report frequency is supported</h1>\n\n<p>REPORT_FREQ=&quot;W&quot;</p>\n\n<h1>-------------------------------------------------------------------------------</h1>\n\n<h1>Program start</h1>\n\n<h1>-------------------------------------------------------------------------------</h1>\n\n<h1>Adjust input vars</h1>\n\n<p>if [ -z &quot;$DIR<em>DEST&quot; ]; then DIR</em>DEST=<code>pwd -P</code>; fi</p>\n\n<h1>Print info</h1>\n\n<p>echo Downloading ITC sales reports for $NUM<em>OF</em>WEEKS<em>TO</em>DOWNLOAD days into destination: $DIR_DEST</p>\n\n<h1>set CLASSPATH which should point the this script location</h1>\n\n<p>THIS<em>SCRIPT=$0\ncd `dirname $THIS</em>SCRIPT<code>\nCLASSPATH=</code>pwd -P`</p>\n\n<h1>set dir where the reports are downloaded to</h1>\n\n<p>cd $DIR_DEST</p>\n\n<h1>loop for requested NUM<em>OF</em>WEEKS<em>TO</em>DOWNLOAD</h1>\n\n<p>for (( WEEK=NUM<em>OF</em>WEEKS<em>TO</em>DOWNLOAD; WEEK&gt;0; WEEK-- ))\ndo</p>\n\n<h1>set value for last sunday</h1>\n\n<p>DT<em>DAY</em>OF<em>WEEK=<code>date +%w</code>\nlet DAYS=(WEEK-1)*7+DT</em>DAY<em>OF</em>WEEK\nDT<em>CUR</em>STR=&quot;date -v-${DAY}d +%Y%m%d&quot;\nDT<em>CUR=`$DT</em>CUR<em>STR`\nFILE</em>CUR=&quot;${REPORT<em>TYPE}</em>${REPORT<em>FREQ}</em>${VENDOR<em>ID}</em>${DT<em>CUR}.txt.gz&quot;\nif [ $(find . -name $FILE</em>CUR -maxdepth 1 -type f | wc -l) == &quot;0&quot; ]\nthen</p>\n\n<h1>Report is missing so download one</h1>\n\n<p>echo $DT<em>CUR: MISSING! Download initiated...\njava -cp $CLASSPATH Autoingestion $USER</em>NAME $USER<em>PASSWD $VENDOR</em>ID Sales Daily Summary $DT_CUR\nelse</p>\n\n<h1>Report is found</h1>\n\n<p>echo &quot;$DT_CUR: already here&quot;\nfi\ndone\n{% endcodeblock %}</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1322927160000,"created_by":1,"updated_at":1322927160000,"updated_by":1,"published_at":1322927160000,"published_by":1},{"id":3,"title":"Cursores Dinámicos Y NSCompoundPredicate","slug":"cursores-dinamicos-y-nscompoundpredicate","markdown":"Hace unos años, en un proyecto lleno de anécdotas y experiencias, el grupo de desarrolladores me contaba que habían creado servicios para cada una de las tablas del modelo de datos con el objetivo de centralizar los accesos a la tablas. La idea me pareció interesante: estaba harto de tocar programas que tenían la misma query y había cambiado algún criterio por lo que unificar las consultas en un único servicio era genial.\n\nLes sugerí que, a la hora de montar los cursores, preparasen toda salida de datos de forma que fuera reutilizable. De esta forma, a medida que se fueran creando nuevas consultas, solo habría que incluir la nueva query. \"No habrá que dar de alta nuevas consultas, hacemos cursores dinámicos...\" dijo uno de ellos con gran orgullo.\n\n<!--more-->\n\n_CURSORES DINÁMICOS... Dios mío... se han atrevido a utilizar SQL dinámico, el mayor sacrilegio en cualquier instalación con un mainframe_, pensé yo. Cuando les dije que no se autorizaría la subida a producción de ningún programa con SQL dinámico me dijeron: \"No, no. Si los hacemos con el SQL de toda la vida\".\n\nLo que hacían era montar el _where_ de tal forma que incluían todos los campos por los que se podría preguntar y comprobaban si el campo de la tabla era igual a la variable o si la variable estaba vacía. Esto tenía dos resultados: con un único cursor se obtenían los mismo resultados que con cursores ad-hoc (menos código que picar) y al abrir el cursor, el DB2 hacía un TABLESPACE SCAN y el programa aparecía en todas las estadísticas de pésimo rendimiento (gran bronca del DBA).\n\n{% codeblock lang:sql %}\nSELECT * FROM PERSONAS\n WHERE (EDAD = :EDAD OR :EDAD = 0)\n   AND (SEXO = :SEXO OR :SEXO = ' ')\n   AND (ALTURA = :ALTURA OR :ALTURA = 0)\n   AND (PESO = :PESO OR :PESO = 0)\n   AND (COLOROJOS = :COLOROJOS OR :COLOROJOS = ' ')\n   AND (COLORPELO = :COLORPELO OR :COLORPELO = ' ');\n{% endcodeblock %}\n\nPor eso, cuando la semana pasada me empeñe en montar un predicado variable para un proyecto de iOS y termine encontrando NSCompoundPredicate, pensé: \"Esto si que es un cursor dinámico\"\n\n**NSPredicate** es una clase que se utiliza para definir condiciones lógicas que acoten una búsqueda. Esta clase se puede utilizar para obtener un array de objetos más pequeño a partir de otro más grande utilizando un método de la clase NSArray que es _filteredArrayUsingPredicate:_\n\nPor ejemplo: tenemos un array llamado _personas_ que contiene objetos de tipo _Individuo. _El objeto individuo tiene diferentes propiedades: edad, sexo, altura, peso, colorOjos, colorPelo, etc. Si queremos tener un array más pequeño con las personas que son mujeres y tiene los ojos azules haríamos lo siguiente:\n\n{% codeblock lang:objc %}\nNSPredicate *predicate = [NSPredicate predicateWithFormat:@\"(sexo == %@ AND colorOjos == %@)\", individuo.sexo, individuo.colorOjos];\nNSArray *mujeresDeOjosAzules = [personas filteredArrayUsingPredicate:predicate];\n{% endcodeblock %}\n\nEn el ejemplo anterior, _individuo.sexo_ contendría el valor \"Mujer\" e _individuo.colorOjos_ contendría el valor \"Azul\". Bastante fácil, no?.\n\nBueno, supongamos ahora que estamos montando una especie de \"Quien es quien\" en el que dejamos que pregunten de forma aleatoria por un campo, por dos, por todos, etc... pero sin ningún control. En este caso deberíamos evaluar todas las posibilidades y definir un NSPredicate para cada una de ellas, evaluando previamente cada situación.\nCon pocas propiedades es asumible montar los diferentes NSPredicate, con seis propiedades las combinaciones van a ser unas cuantas (si mis recuerdos de combinatoria no fallan serían 63 combinaciones diferentes)... ¿tenemos que codificarlas todas? No, existe **NSCompoundPredicate**, la panacea de los cursores dinámicos.\n\nEl ejemplo quedaría así:\n\n{% codeblock lang:objc %}\nNSMutableArray *predicateArray = [NSMutableArray array];\nif (individuo.edad) {\n   [predicateArray addObject:[NSPredicate predicateWithFormat:@\"(edad == %@)\", individuo.edad]];\n}\nif (individuo.sexo) {\n   [predicateArray addObject:[NSPredicate predicateWithFormat:@\"(sexo == %@)\", individuo.sexo]];\n}\nif (individuo.altura) {\n   [predicateArray addObject:[NSPredicate predicateWithFormat:@\"(altura == %@)\", individuo.altura]];\n}\nif (individuo.peso) {\n   [predicateArray addObject:[NSPredicate predicateWithFormat:@\"(peso == %@)\", individuo.peso]];\n}\nif (individuo.colorOjos) {\n   [predicateArray addObject:[NSPredicate predicateWithFormat:@\"(colorOjos == %@)\", individuo.colorOjos]];\n}\nif (individuo.colorPelo) {\n   [predicateArray addObject:[NSPredicate predicateWithFormat:@\"(colorPelo == %@)\", individuo.colorPelo]];\n}\nNSCompoundPredicate *compoundPredicate = [NSCompoundPredicate andPredicateWithSubpredicates:predicateArray];\n{% endcodeblock %}\n\nLo que hemos hecho es un NSPredicate por cada propiedad que tenemos que evaluar. Comprobando previamente que esa propiedad esté informada. Cada NSPredicate lo incluimos en un array que posteriormente le pasaremos a la clase NSCompoundPredicate a través del método correspondiente.\nEsta clase solo posee tres métodos: andPredicateWithSubpredicates para recuperar los objetos que cumplan todas las condiciones, orPredicateWithSubpredicates para recuperar los objetos que cumplen alguna condición y notPredicateWithSubpredicates que, creo, sirve para recuperar los objetos que no cumplen ninguna condición.\n\nSi queréis saber más sobre NSPredicate y NSCompoundPredicate, lo mejor es consultar la documentación de Apple:\n\n[NSPredicate](http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSPredicate_Class/Reference/NSPredicate.html)\n[NSCompoundPredicate](http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSCompoundPredicate_Class/Reference/Reference.html#//apple_ref/occ/cl/NSCompoundPredicate)\n","html":"<p>Hace unos años, en un proyecto lleno de anécdotas y experiencias, el grupo de desarrolladores me contaba que habían creado servicios para cada una de las tablas del modelo de datos con el objetivo de centralizar los accesos a la tablas. La idea me pareció interesante: estaba harto de tocar programas que tenían la misma query y había cambiado algún criterio por lo que unificar las consultas en un único servicio era genial.</p>\n\n<p>Les sugerí que, a la hora de montar los cursores, preparasen toda salida de datos de forma que fuera reutilizable. De esta forma, a medida que se fueran creando nuevas consultas, solo habría que incluir la nueva query. &quot;No habrá que dar de alta nuevas consultas, hacemos cursores dinámicos...&quot; dijo uno de ellos con gran orgullo.</p>\n\n<!--more-->\n\n<p><em>CURSORES DINÁMICOS... Dios mío... se han atrevido a utilizar SQL dinámico, el mayor sacrilegio en cualquier instalación con un mainframe</em>, pensé yo. Cuando les dije que no se autorizaría la subida a producción de ningún programa con SQL dinámico me dijeron: &quot;No, no. Si los hacemos con el SQL de toda la vida&quot;.</p>\n\n<p>Lo que hacían era montar el <em>where</em> de tal forma que incluían todos los campos por los que se podría preguntar y comprobaban si el campo de la tabla era igual a la variable o si la variable estaba vacía. Esto tenía dos resultados: con un único cursor se obtenían los mismo resultados que con cursores ad-hoc (menos código que picar) y al abrir el cursor, el DB2 hacía un TABLESPACE SCAN y el programa aparecía en todas las estadísticas de pésimo rendimiento (gran bronca del DBA).</p>\n\n<p>{% codeblock lang:sql %}\nSELECT * FROM PERSONAS\n WHERE (EDAD = :EDAD OR :EDAD = 0)\n   AND (SEXO = :SEXO OR :SEXO = &#39; &#39;)\n   AND (ALTURA = :ALTURA OR :ALTURA = 0)\n   AND (PESO = :PESO OR :PESO = 0)\n   AND (COLOROJOS = :COLOROJOS OR :COLOROJOS = &#39; &#39;)\n   AND (COLORPELO = :COLORPELO OR :COLORPELO = &#39; &#39;);\n{% endcodeblock %}</p>\n\n<p>Por eso, cuando la semana pasada me empeñe en montar un predicado variable para un proyecto de iOS y termine encontrando NSCompoundPredicate, pensé: &quot;Esto si que es un cursor dinámico&quot;</p>\n\n<p><strong>NSPredicate</strong> es una clase que se utiliza para definir condiciones lógicas que acoten una búsqueda. Esta clase se puede utilizar para obtener un array de objetos más pequeño a partir de otro más grande utilizando un método de la clase NSArray que es <em>filteredArrayUsingPredicate:</em></p>\n\n<p>Por ejemplo: tenemos un array llamado <em>personas</em> que contiene objetos de tipo _Individuo. _El objeto individuo tiene diferentes propiedades: edad, sexo, altura, peso, colorOjos, colorPelo, etc. Si queremos tener un array más pequeño con las personas que son mujeres y tiene los ojos azules haríamos lo siguiente:</p>\n\n<p>{% codeblock lang:objc %}\nNSPredicate *predicate = [NSPredicate predicateWithFormat:@&quot;(sexo == %@ AND colorOjos == %@)&quot;, individuo.sexo, individuo.colorOjos];\nNSArray *mujeresDeOjosAzules = [personas filteredArrayUsingPredicate:predicate];\n{% endcodeblock %}</p>\n\n<p>En el ejemplo anterior, <em>individuo.sexo</em> contendría el valor &quot;Mujer&quot; e <em>individuo.colorOjos</em> contendría el valor &quot;Azul&quot;. Bastante fácil, no?.</p>\n\n<p>Bueno, supongamos ahora que estamos montando una especie de &quot;Quien es quien&quot; en el que dejamos que pregunten de forma aleatoria por un campo, por dos, por todos, etc... pero sin ningún control. En este caso deberíamos evaluar todas las posibilidades y definir un NSPredicate para cada una de ellas, evaluando previamente cada situación.\nCon pocas propiedades es asumible montar los diferentes NSPredicate, con seis propiedades las combinaciones van a ser unas cuantas (si mis recuerdos de combinatoria no fallan serían 63 combinaciones diferentes)... ¿tenemos que codificarlas todas? No, existe <strong>NSCompoundPredicate</strong>, la panacea de los cursores dinámicos.</p>\n\n<p>El ejemplo quedaría así:</p>\n\n<p>{% codeblock lang:objc %}\nNSMutableArray *predicateArray = [NSMutableArray array];\nif (individuo.edad) {\n   [predicateArray addObject:[NSPredicate predicateWithFormat:@&quot;(edad == %@)&quot;, individuo.edad]];\n}\nif (individuo.sexo) {\n   [predicateArray addObject:[NSPredicate predicateWithFormat:@&quot;(sexo == %@)&quot;, individuo.sexo]];\n}\nif (individuo.altura) {\n   [predicateArray addObject:[NSPredicate predicateWithFormat:@&quot;(altura == %@)&quot;, individuo.altura]];\n}\nif (individuo.peso) {\n   [predicateArray addObject:[NSPredicate predicateWithFormat:@&quot;(peso == %@)&quot;, individuo.peso]];\n}\nif (individuo.colorOjos) {\n   [predicateArray addObject:[NSPredicate predicateWithFormat:@&quot;(colorOjos == %@)&quot;, individuo.colorOjos]];\n}\nif (individuo.colorPelo) {\n   [predicateArray addObject:[NSPredicate predicateWithFormat:@&quot;(colorPelo == %@)&quot;, individuo.colorPelo]];\n}\nNSCompoundPredicate *compoundPredicate = [NSCompoundPredicate andPredicateWithSubpredicates:predicateArray];\n{% endcodeblock %}</p>\n\n<p>Lo que hemos hecho es un NSPredicate por cada propiedad que tenemos que evaluar. Comprobando previamente que esa propiedad esté informada. Cada NSPredicate lo incluimos en un array que posteriormente le pasaremos a la clase NSCompoundPredicate a través del método correspondiente.\nEsta clase solo posee tres métodos: andPredicateWithSubpredicates para recuperar los objetos que cumplan todas las condiciones, orPredicateWithSubpredicates para recuperar los objetos que cumplen alguna condición y notPredicateWithSubpredicates que, creo, sirve para recuperar los objetos que no cumplen ninguna condición.</p>\n\n<p>Si queréis saber más sobre NSPredicate y NSCompoundPredicate, lo mejor es consultar la documentación de Apple:</p>\n\n<p><a href=\"http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSPredicate_Class/Reference/NSPredicate.html\">NSPredicate</a>\n<a href=\"http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSCompoundPredicate_Class/Reference/Reference.html#//apple_ref/occ/cl/NSCompoundPredicate\">NSCompoundPredicate</a></p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1326333720000,"created_by":1,"updated_at":1326333720000,"updated_by":1,"published_at":1326333720000,"published_by":1},{"id":4,"title":"Un \"Group by\" Con Core Data","slug":"un-group-by-con-core-data","markdown":"Cuando se trabaja con bases de datos siempre llega un momento en el que hay que hacer algo más complejo que recuperar datos de forma directa y manipularlos. Saber cual es el registro que tiene el valor más alto o más bajo en una propiedad en concreto; identificar los valores diferentes que tienen una propiedad; etc, son situaciones que, aunque no sean cotidianas, vamos a tener que enfrentarnos con ellas.\n\n<!--more-->\n\nSi nos basamos en el ejemplo que utilizamos en la entrada anterior, podría ser de utilidad conocer que colores de pelo diferentes o que colores de ojos tenemos en nuestra base de datos. Con SQL esto se suele hacer con la clausulas \"distinct\" o \"group by\". La clausula _distinct _ahora mismo está en desuso y si bien no es 100 % equivalente a la clausula _group by_ si que es cierto que los resultados obtenidos son análogos.\n\nEn Cocoa, si tienes una base de datos sqlite puedes hacer perfectamente un group by y gestionar los resultados. Sin embargo, hay una forma más sencilla de hacerlo: con _Key-value coding_ (en adelante KVC) que no solo sirve para los objetos de Core Data si no también para arrays de diccionarios y objetos que estén preparados para KVC. Para ello usaremos los _operadores de colección_.\n\nUn array con el color de pelo de los individuos de nuestra base de datos se obtendría así:\n\n{% codeblock lang:objc %}\nNSArray *coloresDePelo = [arrayDeIndividuos valueForKeyPath:'@distinctUnionOfArrays.colorPelo'];\n{% endcodeblock %}\n\nEl arrayDeIndividuos está formado por objetos de tipo Individuo que es un NSManagedObject y que por lo tanto admite KVC. Si el objeto Individuo fuese un diccionario (NSDictionary o NSMutableDictionary) también funcionaría. El operador que hemos usado es `@distinctUnionOfArrays`.\n\nUna cosa más para que nos den la Matricula de Honor. Es muy posible que el array esté desordenado, para obtener un array con los colores de pelo ordenados alfabéticamente añadiríamos la siguiente instrucción:\n\n{% codeblock lang:objc %}\nNSArray *coloresDePeloOrdenados = [coloresDePelo sortedArrayUsingSelector:@selector(localizedCaseInsensitiveCompare:)];    \n{% endcodeblock %}\n\nLa documentación de Apple sobre KVC la puedes encontrar [aquí](http://developer.apple.com/library/ios/#documentation/cocoa/conceptual/KeyValueCoding/Articles/KeyValueCoding.html#//apple_ref/doc/uid/10000107-SW1). Ahí podrás ver otros operadores de colección.\nSi en vez de leer sobre KVC te apetece escuchar, el [episodio 21 de 85 % Cocoa](http://ochentaycincoporcientococoa.tumblr.com/post/4290497170/85-cocoa-episodio-21-kvc) hace una excelente introducción.\n","html":"<p>Cuando se trabaja con bases de datos siempre llega un momento en el que hay que hacer algo más complejo que recuperar datos de forma directa y manipularlos. Saber cual es el registro que tiene el valor más alto o más bajo en una propiedad en concreto; identificar los valores diferentes que tienen una propiedad; etc, son situaciones que, aunque no sean cotidianas, vamos a tener que enfrentarnos con ellas.</p>\n\n<!--more-->\n\n<p>Si nos basamos en el ejemplo que utilizamos en la entrada anterior, podría ser de utilidad conocer que colores de pelo diferentes o que colores de ojos tenemos en nuestra base de datos. Con SQL esto se suele hacer con la clausulas &quot;distinct&quot; o &quot;group by&quot;. La clausula <em>distinct _ahora mismo está en desuso y si bien no es 100 % equivalente a la clausula _group by</em> si que es cierto que los resultados obtenidos son análogos.</p>\n\n<p>En Cocoa, si tienes una base de datos sqlite puedes hacer perfectamente un group by y gestionar los resultados. Sin embargo, hay una forma más sencilla de hacerlo: con <em>Key-value coding</em> (en adelante KVC) que no solo sirve para los objetos de Core Data si no también para arrays de diccionarios y objetos que estén preparados para KVC. Para ello usaremos los <em>operadores de colección</em>.</p>\n\n<p>Un array con el color de pelo de los individuos de nuestra base de datos se obtendría así:</p>\n\n<p>{% codeblock lang:objc %}\nNSArray *coloresDePelo = [arrayDeIndividuos valueForKeyPath:&#39;@distinctUnionOfArrays.colorPelo&#39;];\n{% endcodeblock %}</p>\n\n<p>El arrayDeIndividuos está formado por objetos de tipo Individuo que es un NSManagedObject y que por lo tanto admite KVC. Si el objeto Individuo fuese un diccionario (NSDictionary o NSMutableDictionary) también funcionaría. El operador que hemos usado es <code>@distinctUnionOfArrays</code>.</p>\n\n<p>Una cosa más para que nos den la Matricula de Honor. Es muy posible que el array esté desordenado, para obtener un array con los colores de pelo ordenados alfabéticamente añadiríamos la siguiente instrucción:</p>\n\n<p>{% codeblock lang:objc %}\nNSArray *coloresDePeloOrdenados = [coloresDePelo sortedArrayUsingSelector:@selector(localizedCaseInsensitiveCompare:)];<br>\n{% endcodeblock %}</p>\n\n<p>La documentación de Apple sobre KVC la puedes encontrar <a href=\"http://developer.apple.com/library/ios/#documentation/cocoa/conceptual/KeyValueCoding/Articles/KeyValueCoding.html#//apple_ref/doc/uid/10000107-SW1\">aquí</a>. Ahí podrás ver otros operadores de colección.\nSi en vez de leer sobre KVC te apetece escuchar, el <a href=\"http://ochentaycincoporcientococoa.tumblr.com/post/4290497170/85-cocoa-episodio-21-kvc\">episodio 21 de 85 % Cocoa</a> hace una excelente introducción.</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1326763980000,"created_by":1,"updated_at":1326763980000,"updated_by":1,"published_at":1326763980000,"published_by":1},{"id":5,"title":"Web Y Cliente iOS en 45min","slug":"web-y-cliente-ios-en-45min","markdown":"El pasado 14 de Mayo tuve la suerte de poder dar una charla en el CIBALL sobre como hacer un sitio web con Ruby on Rails y una aplicación iOS que accediera a los datos almacenados en dicho sitio.\n\nEl contenido de esta charla lo preparamos entre Jorge Ortiz (aka [@jdortiz](https://twitter.com/#!/jdortiz)) y yo. El resultado está grabado en formato screencast pero es lo suficientemente largo como para resultar tremendamente pesado. Aun así lo hemos colgado en Vimeo por si algún imprudente se anima a verlo.\n\n<!--more-->\n\n{% vimeo 42366092 %}\n\nLa presentación que utilizamos fue esta.\n\n{% slideshare 12871774 %}\n\nLas dos siguientes entradas de este blog consistirán en la [preparación del sitio web](http://www.zinkinapps.com/blog/?p=78) y en el [desarrollo de la aplicación para iOS](http://www.zinkinapps.com/blog/?p=130). Estamos trabajando en unos screencast para cada una de las entradas pero todavía no están listos.\n","html":"<p>El pasado 14 de Mayo tuve la suerte de poder dar una charla en el CIBALL sobre como hacer un sitio web con Ruby on Rails y una aplicación iOS que accediera a los datos almacenados en dicho sitio.</p>\n\n<p>El contenido de esta charla lo preparamos entre Jorge Ortiz (aka <a href=\"https://twitter.com/#!/jdortiz\">@jdortiz</a>) y yo. El resultado está grabado en formato screencast pero es lo suficientemente largo como para resultar tremendamente pesado. Aun así lo hemos colgado en Vimeo por si algún imprudente se anima a verlo.</p>\n\n<!--more-->\n\n<p>{% vimeo 42366092 %}</p>\n\n<p>La presentación que utilizamos fue esta.</p>\n\n<p>{% slideshare 12871774 %}</p>\n\n<p>Las dos siguientes entradas de este blog consistirán en la <a href=\"http://www.zinkinapps.com/blog/?p=78\">preparación del sitio web</a> y en el <a href=\"http://www.zinkinapps.com/blog/?p=130\">desarrollo de la aplicación para iOS</a>. Estamos trabajando en unos screencast para cada una de las entradas pero todavía no están listos.</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1337006640000,"created_by":1,"updated_at":1337006640000,"updated_by":1,"published_at":1337006640000,"published_by":1},{"id":6,"title":"Una Web Con Ruby on Rails","slug":"una-web-con-ruby-on-rails","markdown":"Seguro que en algún momento nos hemos planteado la necesidad de disponer de un servicio web propio para alimentar alguna de nuestras aplicaciones (actualización de datos, gestión de InApp Purchases, notificaciones, etc).\nActualmente hay muchos servicios on-line que nos permiten gestionar estas necesidades con facilidad (Amazon Web Services, iCloud, Azure, Parse, MaaSive). Es conveniente, al menos, echar un vistazo a cada uno de ellos para saber que utilidad podemos sacar de ellos pero creo que también es conveniente hacer un acto de valentía y plantearnos el hacer nuestro propio servicio web.<!--more-->\nEl objetivo que nos hemos marcado para esta sesión de 45 minutos es grande: no nos basta con un servicio que alimente nuestra aplicación, queremos una web que de soporte a esos datos y entre el maremagnun de opciones que hay disponibles para hacer esto nos hemos decantado por Ruby on Rails.\n\n## ¿Que es Ruby un Rails?\n\nRuby on Rails es la forma de designar a un framework llamado Rails que dota al lenguaje de programación Ruby de toda la funcionalidad para hacer aplicaciones web. En realidad es como si los que hacemos aplicaciones para iOS dijeramos que las hacemos en Objective-C on Cocoa Touch... no suena tan guay.\n\nRuby y rails arrastran esa maldición de ser “cools” lo que provoca también rechazo/celos entre los fanaticos de otras plataformas. Ruby tiene fama de ser un lenguaje bonito, con el que da gusto programar. Algún “fanático” decidió que, ya que el nombre del lenguaje era una gema, porque no llamar a las diferentes librerias gemas también... y por esa razón mientras que los abigarrados programadores de php utilizan librerias los finos y elegantes programadores de ruby utilizan gemas. Rails es una gema, quizá la más famosa, que se apoya en otras gemas muy famosas y envidiadas para hacer aplicaciones web de una forma muy sencilla.\n\nRuby on Rails respeta al 100 % el patrón de arquitectura Modelo-Vista-Controlador, seguramente sea uno de los frameworks para el desarrollo de aplicaciones web más puristas en este sentido.\n\nTambién es muy escrupuloso con el cumplimiento del principio Don´t Repeat Yourself. Esto es muy agradable sobre todo a la hora de hacer cambios en el modelo... algo que hacemos continuamente mientras desarrollamos y que se puede convertir en un dolor de cabeza al pasar a producción. Gracias a esto, las migraciones en ruby son muy sencillas... mucho más que con Core Data.\n\nEl paradigma llamado Convention over configuration también está en las raices de este framework y de la comunidad ruby en general. Ya veremos en nuestro ejemplo como es muy sencillo navegar por el código de nuestra aplicación ya que si la clase que conecta una entidad del modelo con la base de datos se llama List, la tabla se llamará lists, el controlador se llamará lists_controller, etc...\n\n## ¿Y si no se Ruby?\n\nDale una oportunidad... seguro que tampoco sabías Objective-C y estás aquí. Como vamos a ver a continuación, hacer algo básico es muy muy sencillo. Ya habrá tiempo de ir profundizando en el lenguaje más adelante.\n\nDesde luego, lo que vamos a hacer nosotros se puede hacer con otros frameworks y otros lenguajes de programación... busca el que sea más agradable para ti.\n\n## ¿Que necesitamos para hacer nuestra aplicación?\n\nNuestro mac, que ya vendrá con ruby instalado. Lo mejor sería actualizar a la última versión ya que como es la primera aplicación que vamos a hacer no tenemos problemas de versiones. En este [enlace](http://pragmaticstudio.com/blog/2010/9/23/install-rails-ruby-mac) nos cuentan una forma de actualizar ruby, instalar rails y hacer una aplicación sencilla en Lion. Son los pasos que he seguido yo para hacer la instalación de rails en mi mac y el el ejemplo que vamos a ver es tan sencillo como el que viene en esa página.\n\n## ¿Que es lo que vamos a hacer?\n\nUna aplicación web que llamaremos MegaLists y que tendrá vistas para dar de alta elementos en una lista (algo de lo más original).\nAl introducir por terminal:\n    \n    $ rails new MegaLists\n\nrails nos crea todo proyecto de la aplicación, ahora necesitamos las vistas y la tabla donde almacenaremos nuestra lista. Si hemos decidido llamar a la tabla List  y solo necesitamos un campo para el nombre de la nota y otro para el detalle, las palabras mágicas son estas:\n\n    $ rails generate scaffold List name:string description:string\n    $ rake db:migrate\n\nAl pedirle a rails que nos genere un andamio (scaffold) este nos crea todo lo que necesitamos para disfrutar de nuestra nueva web y de los servicios que nuestra app va a consumir. La segunda instrucción se encarga de realizar una migración en la base de datos para incluir los cambios que hemos solicitado, en este caso, crear una nueva tabla con dos campos.\n\nPodemos tener un fichero con datos de prueba para cargar nuestra base de datos con una única instrucción en caso de que queramos volver a generarlos.  La primera instrucción nos abriría el fichero en nuestro editor de texto, la segunda instrucción es la que cargaría la base de datos.\n    \n    $ edit db/seeds.rb\n    \n    $ rake db:seed\n\nAunque parezca mentira, con lo poco que hemos hecho hasta ahora ya tenemos una web creada con toda la funcionalidad necesaria para alimentar la entidad lists. Lo único que nos falta para verla en funcionamiento es arrancar el servidor.\n\n    $ rails server\n\nEl servidor... ¿cuando lo has instalado? ¿como sabe donde está alojado el proyecto? magia... las gemas tienen poderes y se encargan de estas cosas. Igual que no tenemos que preocuparnos por la base de datos, ya que rails gestiona las conexiones por nosotros, también incluye un pequeño servidor que nos permitirá hacer nuestras pruebas. Cuando se despliegue la aplicación en producción si que será necesario configurar un servidor Apache, instalar y configurar una base de datos, etc pero para desarrollo no necesitamos nada más.\n\nSi habéis seguido los mismos pasos que yo,  este [enlace](http://localhost:3000/lists) os abrirá una pagina web con la lista de los elementos que contiene la tabla. Podemos editarlos, borrarlos, añadir alguno más...\n\nQuizá, los más llamativo es lo que vemos si abrimos este otro [enlace](http://localhost:3000/lists.json). ¡Tremendo! el mísmo contenido del enlace anterior pero en formato json.\n\n## API REST\n\nLa [wikipedia](http://es.wikipedia.org/wiki/Representational_State_Transfer) lo explica muy bien. Se basa en el excelente diseño del protocolo http que permite contener en la llamada toda la información necesaria para comprender la petición. Cada recurso es definido univocamente por su URI y a través de las operaciones http GET, POST, PUT y DELETE podemos crear (Create), leer (Read), actualizar (Update) y borrar (Delete). Todo esto nos lo incluye rails al hacer el scaffold.... gratis.\n\nEn el post que sigue a este veremos como hacer la aplicación iOS que accede a esta API para leer y modificar registros.\n","html":"<p>Seguro que en algún momento nos hemos planteado la necesidad de disponer de un servicio web propio para alimentar alguna de nuestras aplicaciones (actualización de datos, gestión de InApp Purchases, notificaciones, etc).\nActualmente hay muchos servicios on-line que nos permiten gestionar estas necesidades con facilidad (Amazon Web Services, iCloud, Azure, Parse, MaaSive). Es conveniente, al menos, echar un vistazo a cada uno de ellos para saber que utilidad podemos sacar de ellos pero creo que también es conveniente hacer un acto de valentía y plantearnos el hacer nuestro propio servicio web.&lt;!--more--&gt;\nEl objetivo que nos hemos marcado para esta sesión de 45 minutos es grande: no nos basta con un servicio que alimente nuestra aplicación, queremos una web que de soporte a esos datos y entre el maremagnun de opciones que hay disponibles para hacer esto nos hemos decantado por Ruby on Rails.</p>\n\n<h2>¿Que es Ruby un Rails?</h2>\n\n<p>Ruby on Rails es la forma de designar a un framework llamado Rails que dota al lenguaje de programación Ruby de toda la funcionalidad para hacer aplicaciones web. En realidad es como si los que hacemos aplicaciones para iOS dijeramos que las hacemos en Objective-C on Cocoa Touch... no suena tan guay.</p>\n\n<p>Ruby y rails arrastran esa maldición de ser “cools” lo que provoca también rechazo/celos entre los fanaticos de otras plataformas. Ruby tiene fama de ser un lenguaje bonito, con el que da gusto programar. Algún “fanático” decidió que, ya que el nombre del lenguaje era una gema, porque no llamar a las diferentes librerias gemas también... y por esa razón mientras que los abigarrados programadores de php utilizan librerias los finos y elegantes programadores de ruby utilizan gemas. Rails es una gema, quizá la más famosa, que se apoya en otras gemas muy famosas y envidiadas para hacer aplicaciones web de una forma muy sencilla.</p>\n\n<p>Ruby on Rails respeta al 100 % el patrón de arquitectura Modelo-Vista-Controlador, seguramente sea uno de los frameworks para el desarrollo de aplicaciones web más puristas en este sentido.</p>\n\n<p>También es muy escrupuloso con el cumplimiento del principio Don´t Repeat Yourself. Esto es muy agradable sobre todo a la hora de hacer cambios en el modelo... algo que hacemos continuamente mientras desarrollamos y que se puede convertir en un dolor de cabeza al pasar a producción. Gracias a esto, las migraciones en ruby son muy sencillas... mucho más que con Core Data.</p>\n\n<p>El paradigma llamado Convention over configuration también está en las raices de este framework y de la comunidad ruby en general. Ya veremos en nuestro ejemplo como es muy sencillo navegar por el código de nuestra aplicación ya que si la clase que conecta una entidad del modelo con la base de datos se llama List, la tabla se llamará lists, el controlador se llamará lists_controller, etc...</p>\n\n<h2>¿Y si no se Ruby?</h2>\n\n<p>Dale una oportunidad... seguro que tampoco sabías Objective-C y estás aquí. Como vamos a ver a continuación, hacer algo básico es muy muy sencillo. Ya habrá tiempo de ir profundizando en el lenguaje más adelante.</p>\n\n<p>Desde luego, lo que vamos a hacer nosotros se puede hacer con otros frameworks y otros lenguajes de programación... busca el que sea más agradable para ti.</p>\n\n<h2>¿Que necesitamos para hacer nuestra aplicación?</h2>\n\n<p>Nuestro mac, que ya vendrá con ruby instalado. Lo mejor sería actualizar a la última versión ya que como es la primera aplicación que vamos a hacer no tenemos problemas de versiones. En este <a href=\"http://pragmaticstudio.com/blog/2010/9/23/install-rails-ruby-mac\">enlace</a> nos cuentan una forma de actualizar ruby, instalar rails y hacer una aplicación sencilla en Lion. Son los pasos que he seguido yo para hacer la instalación de rails en mi mac y el el ejemplo que vamos a ver es tan sencillo como el que viene en esa página.</p>\n\n<h2>¿Que es lo que vamos a hacer?</h2>\n\n<p>Una aplicación web que llamaremos MegaLists y que tendrá vistas para dar de alta elementos en una lista (algo de lo más original).\nAl introducir por terminal:</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ rails new MegaLists\n</code></pre></div>\n<p>rails nos crea todo proyecto de la aplicación, ahora necesitamos las vistas y la tabla donde almacenaremos nuestra lista. Si hemos decidido llamar a la tabla List  y solo necesitamos un campo para el nombre de la nota y otro para el detalle, las palabras mágicas son estas:</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ rails generate scaffold List name:string description:string\n$ rake db:migrate\n</code></pre></div>\n<p>Al pedirle a rails que nos genere un andamio (scaffold) este nos crea todo lo que necesitamos para disfrutar de nuestra nueva web y de los servicios que nuestra app va a consumir. La segunda instrucción se encarga de realizar una migración en la base de datos para incluir los cambios que hemos solicitado, en este caso, crear una nueva tabla con dos campos.</p>\n\n<p>Podemos tener un fichero con datos de prueba para cargar nuestra base de datos con una única instrucción en caso de que queramos volver a generarlos.  La primera instrucción nos abriría el fichero en nuestro editor de texto, la segunda instrucción es la que cargaría la base de datos.</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ edit db/seeds.rb\n\n$ rake db:seed\n</code></pre></div>\n<p>Aunque parezca mentira, con lo poco que hemos hecho hasta ahora ya tenemos una web creada con toda la funcionalidad necesaria para alimentar la entidad lists. Lo único que nos falta para verla en funcionamiento es arrancar el servidor.</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ rails server\n</code></pre></div>\n<p>El servidor... ¿cuando lo has instalado? ¿como sabe donde está alojado el proyecto? magia... las gemas tienen poderes y se encargan de estas cosas. Igual que no tenemos que preocuparnos por la base de datos, ya que rails gestiona las conexiones por nosotros, también incluye un pequeño servidor que nos permitirá hacer nuestras pruebas. Cuando se despliegue la aplicación en producción si que será necesario configurar un servidor Apache, instalar y configurar una base de datos, etc pero para desarrollo no necesitamos nada más.</p>\n\n<p>Si habéis seguido los mismos pasos que yo,  este <a href=\"http://localhost:3000/lists\">enlace</a> os abrirá una pagina web con la lista de los elementos que contiene la tabla. Podemos editarlos, borrarlos, añadir alguno más...</p>\n\n<p>Quizá, los más llamativo es lo que vemos si abrimos este otro <a href=\"http://localhost:3000/lists.json\">enlace</a>. ¡Tremendo! el mísmo contenido del enlace anterior pero en formato json.</p>\n\n<h2>API REST</h2>\n\n<p>La <a href=\"http://es.wikipedia.org/wiki/Representational_State_Transfer\">wikipedia</a> lo explica muy bien. Se basa en el excelente diseño del protocolo http que permite contener en la llamada toda la información necesaria para comprender la petición. Cada recurso es definido univocamente por su URI y a través de las operaciones http GET, POST, PUT y DELETE podemos crear (Create), leer (Read), actualizar (Update) y borrar (Delete). Todo esto nos lo incluye rails al hacer el scaffold.... gratis.</p>\n\n<p>En el post que sigue a este veremos como hacer la aplicación iOS que accede a esta API para leer y modificar registros.</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1337009580000,"created_by":1,"updated_at":1337009580000,"updated_by":1,"published_at":1337009580000,"published_by":1},{"id":7,"title":"Cliente iOS… Explotando a NSURLConnection Y NSJSONSerialization","slug":"cliente-iose280a6-explotando-a-nsurlconnection-y-nsjsonserialization","markdown":"En la entrada anterior vimos como hacer una web con su API Rest con muy poco esfuerzo. En esta vamos a ver como conectar con ese API Rest con muy poco esfuerzo también. Eso si, vamos a centrarnos solamente en la clase NSURLConnection; la creación de la aplicación, modificación del modelo y del storyboard lo damos por supuesto.\n\n<!--more-->\n\n> Por si sirve de referencia: para crear la aplicación de ha utilizado la plantilla de Master-Detail, con opción de Core Data y Storyboards, que llamaremos MegaLists. En el detailviewcontroller se ha cambiado la UILabel por un UITextView para que de más juego y en el modelo Core Data, tanto la entidad como los atributos se llaman igual que en la aplicación Rails.\n\n## NSURLConnection\n\nVamos a empezar las cosas bien. En un fichero de cabecera que llamaremos MegaLists.h vamos a crear un par de macros que podremos llegar a utilizar en muchas partes de nuestra aplicación. Este fichero de cabecera luego lo incluiremos en el fichero MegaLists-Prefix.pch para que se incluya en la compilación de cada clase del proyecto. Las macros son estas:\n\n{% codeblock lang:objc %}\n#define SERVER_URL @\"http://localhost:3000/\"\n#define HTTP_TIMEOUT 5.0\n{% endcodeblock %}\n\nDe esta forma, cuando vayamos a subir la aplicación a la App Store solo tendremos que cambiar la url local por la del dominio al que nos vayamos a conectar. Igualmente, si queremos aumentar el tiempo de espera de la conexión, de esta forma lo cambiaremos para todas las conexiones. La llamada al servicio web se hará desde la clase MasterViewController. Necesitaremos un par de propiedades más: un NSURL y un NSData. El primero será la url a la que llamaremos y el segundo donde almacenaremos los datos que nos devuelva el servicio. El objeto NSURL lo alocaremos nada más cargar el viewcontroller:\n\n{% codeblock lang:objc %}\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n        // Do any additional setup after loading the view, typically from a nib.\n    self.navigationItem.leftBarButtonItem = self.editButtonItem;\n    \n    self.serverURL = [NSURL URLWithString:SERVER_URL];\n    \n}\n{% endcodeblock %}\n\nEl método encargado de hacer la conexión se llamará `loadDataFromOurWebService`, muy descriptivo para que sepamos donde tocar si algo falla y será invocado cada vez que se vea la vista del MasterViewController:\n\n{% codeblock lang:objc %}\n#pragma mark - Conexión al servidor:\n\n- (void)viewWillAppear:(BOOL)animated\n{\n    [self loadDataFromOurWebService];\n}\n\n- (void)loadDataFromOurWebService\n{\n    NSURL *queryURL =  [self.serverURL URLByAppendingPathComponent:@\"lists.json\" isDirectory:YES];\n\n    NSURLRequest *request = [NSURLRequest requestWithURL:queryURL\n                                             cachePolicy:NSURLRequestReloadIgnoringLocalCacheData\n                                         timeoutInterval:HTTP_TIMEOUT];\n\n    //ASINCRONOOOOOOOO\n    NSURLConnection *connection = [NSURLConnection connectionWithRequest:request delegate:self];\n    if (connection) {\n        NSLog(@\"Connecting...\");\n        // Create the NSMutableData to hold the received data.\n        self.receivedData = [[NSMutableData alloc] init];\n    } else {\n        // Inform the user that the connection failed.\n        NSLog(@\"ERROR: Unable to create connection.\");\n    }\n}\n{% endcodeblock %}\n\nEl metodo `connectionWithRequest` es asíncrono lo que va a permitir que nuestra aplicación siga siendo usable mientras hacemos la descarga del servidor. Para conocer el éxito o fracaso de nuestra conexión necesitaremos los siguientes métodos delegados que posee la clase NSURLConnection... si no sabemos cuales son, la documentación de Apple nos lo deja bien claro: [Using NSURLConnection](https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/URLLoadingSystem/Tasks/UsingNSURLConnection.html#//apple_ref/doc/uid/20001836-BAJEAIEE)\n\n{% codeblock lang:objc %}\n#pragma mark - URL Connection delegate\n\n- (void) connection:(NSURLConnection *)connection didFailWithError:(NSError *)error\n{\n    NSLog(@\"Error: %@\", [error localizedDescription]);\n}\n{% endcodeblock %}\n\nLa verdad es que no es necesario contar que hace el método `didFailWithError` pero por si acaso, diremos que es el que nos informará, en caso de que haya algún problema, del error que se ha producido en la conexión.\n\n{% codeblock lang:objc %}\n- (void) connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response {\n    NSLog(@\"Received response: %@\", response);\n    // It can be called multiple times, for example in the case of a redirect, so each time we reset the data.\n    [self.receivedData setLength:0];\n}\n{% endcodeblock %}\n\nEn situaciones normales, solo deberíamos ver una sola vez el método `didReceiveResponse`, eso quiere decir que el servidor ha aceptado nuestra conexión y va a enviar datos. Si se envía más de un mensaje a este método querrá decir que algo ha ido mal en la conexión y los datos recibidos hasta el momento ya no son válidos. Es por ello que en este método se vuelve a inicializar el NSData.\n\n{% codeblock lang:objc %}\n- (void) connection:(NSURLConnection *)connection didReceiveData:(NSData *)data {\n    [self.receivedData appendData:data];\n}\n{% endcodeblock %}\n\nEl método `didReceiveData` se encargará de ir \"pegando\" los paquetes de datos que vaya recibiendo. Una vez que se hayan recibido todos los datos, se enviará un mensaje al método `connectionDidFinishLoading`. En este método, mediante la clase de reciente aparición en iOS 5 NSJSONSerialization, parsearemos los datos recibidos y los enviaremos al método que se encarga de la grabación en la base de datos.\n\n{% codeblock lang:objc %}\n- (void) connectionDidFinishLoading:(NSURLConnection *) connection {\n\n    // Do the JSON parsing.\n\n    NSError *error;\n    NSArray *data = [NSJSONSerialization JSONObjectWithData:self.receivedData\n                                                    options:kNilOptions\n                                                      error:&error];\n    if (error) {\n        NSString *receivedString = [[NSString alloc] initWithData:self.receivedData\n                                                         encoding:NSUTF8StringEncoding];\n        NSLog(@\"ERROR: Failed to parse JSON response.\");\n        NSLog(@\"Received data: %@\", receivedString);\n        NSLog(@\"Failed to parse JSON: %@\", [error localizedDescription]);\n    } else {\n        NSLog(@\"Finished loading: %@\", data);\n        [self reloadManagedObjectContextWithData:data];\n    }\n\n    self.receivedData = nil;\n    //    self.inProgress = NO;\n}\n\n- (void) reloadManagedObjectContextWithData:(NSArray *)data {\n    NSManagedObject *managedObject = nil;\n    for (NSDictionary *dictionary in data) {\n        managedObject = [NSEntityDescription insertNewObjectForEntityForName:@\"Lists\" inManagedObjectContext:__managedObjectContext];\n        if (!([dictionary objectForKey:@\"id\"] == [NSNull null])) {\n            [managedObject setValue:[dictionary objectForKey:@\"id\"] forKey:@\"id\"];\n        }\n        if (!([dictionary objectForKey:@\"name\"] == [NSNull null])) {\n            [managedObject setValue:[dictionary objectForKey:@\"name\"] forKey:@\"name\"];\n        }\n        if (!([dictionary objectForKey:@\"notes\"] == [NSNull null])) {\n            [managedObject setValue:[dictionary objectForKey:@\"notes\"] forKey:@\"notes\"];\n        }\n    }\n    NSError *error = nil;\n    if (![__managedObjectContext save:&error]) {\n        NSLog(@\"Se ha producido error al grabar: %@\", [error localizedDescription]);\n    }\n} \n{% endcodeblock %}\n\nLa clase NSFetchedResultsController (una de esas cosas que debemos agradecer al obsoleto iOS 3.0) es la que se va a encargar de mostrar los datos en la pantalla del iPhone. Nosotros, lo único que hemos hecho a la plantilla que ha creado XCode es cambiar los nombres de la entidad y los atributos para adaptarlos a los de nuestra base de datos en servidor. El código fuente de este proyecto lo podréis encontrar en GitHub. Es ligeramente diferente a lo que se ha visto aquí porque incluye el borrado de elementos desde la propia aplicación y código para gestionar la descarga de registros ya grabados.\n\n\n\n","html":"<p>En la entrada anterior vimos como hacer una web con su API Rest con muy poco esfuerzo. En esta vamos a ver como conectar con ese API Rest con muy poco esfuerzo también. Eso si, vamos a centrarnos solamente en la clase NSURLConnection; la creación de la aplicación, modificación del modelo y del storyboard lo damos por supuesto.</p>\n\n<!--more-->\n\n<blockquote>\n<p>Por si sirve de referencia: para crear la aplicación de ha utilizado la plantilla de Master-Detail, con opción de Core Data y Storyboards, que llamaremos MegaLists. En el detailviewcontroller se ha cambiado la UILabel por un UITextView para que de más juego y en el modelo Core Data, tanto la entidad como los atributos se llaman igual que en la aplicación Rails.</p>\n</blockquote>\n\n<h2>NSURLConnection</h2>\n\n<p>Vamos a empezar las cosas bien. En un fichero de cabecera que llamaremos MegaLists.h vamos a crear un par de macros que podremos llegar a utilizar en muchas partes de nuestra aplicación. Este fichero de cabecera luego lo incluiremos en el fichero MegaLists-Prefix.pch para que se incluya en la compilación de cada clase del proyecto. Las macros son estas:</p>\n\n<p>{% codeblock lang:objc %}</p>\n\n<h1>define SERVER_URL @&quot;http://localhost:3000/&quot;</h1>\n\n<h1>define HTTP_TIMEOUT 5.0</h1>\n\n<p>{% endcodeblock %}</p>\n\n<p>De esta forma, cuando vayamos a subir la aplicación a la App Store solo tendremos que cambiar la url local por la del dominio al que nos vayamos a conectar. Igualmente, si queremos aumentar el tiempo de espera de la conexión, de esta forma lo cambiaremos para todas las conexiones. La llamada al servicio web se hará desde la clase MasterViewController. Necesitaremos un par de propiedades más: un NSURL y un NSData. El primero será la url a la que llamaremos y el segundo donde almacenaremos los datos que nos devuelva el servicio. El objeto NSURL lo alocaremos nada más cargar el viewcontroller:</p>\n\n<p>{% codeblock lang:objc %}\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n        // Do any additional setup after loading the view, typically from a nib.\n    self.navigationItem.leftBarButtonItem = self.editButtonItem;</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">self.serverURL = [NSURL URLWithString:SERVER_URL];\n</code></pre></div>\n<p>}\n{% endcodeblock %}</p>\n\n<p>El método encargado de hacer la conexión se llamará <code>loadDataFromOurWebService</code>, muy descriptivo para que sepamos donde tocar si algo falla y será invocado cada vez que se vea la vista del MasterViewController:</p>\n\n<p>{% codeblock lang:objc %}</p>\n\n<h1>pragma mark - Conexión al servidor:</h1>\n\n<ul>\n<li><p>(void)viewWillAppear:(BOOL)animated\n{\n[self loadDataFromOurWebService];\n}</p></li>\n<li><p>(void)loadDataFromOurWebService\n{\nNSURL *queryURL =  [self.serverURL URLByAppendingPathComponent:@&quot;lists.json&quot; isDirectory:YES];</p>\n\n<p>NSURLRequest *request = [NSURLRequest requestWithURL:queryURL\n                                         cachePolicy:NSURLRequestReloadIgnoringLocalCacheData\n                                     timeoutInterval:HTTP_TIMEOUT];</p>\n\n<p>//ASINCRONOOOOOOOO\nNSURLConnection *connection = [NSURLConnection connectionWithRequest:request delegate:self];\nif (connection) {\n    NSLog(@&quot;Connecting...&quot;);\n    // Create the NSMutableData to hold the received data.\n    self.receivedData = [[NSMutableData alloc] init];\n} else {\n    // Inform the user that the connection failed.\n    NSLog(@&quot;ERROR: Unable to create connection.&quot;);\n}\n}\n{% endcodeblock %}</p></li>\n</ul>\n\n<p>El metodo <code>connectionWithRequest</code> es asíncrono lo que va a permitir que nuestra aplicación siga siendo usable mientras hacemos la descarga del servidor. Para conocer el éxito o fracaso de nuestra conexión necesitaremos los siguientes métodos delegados que posee la clase NSURLConnection... si no sabemos cuales son, la documentación de Apple nos lo deja bien claro: <a href=\"https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/URLLoadingSystem/Tasks/UsingNSURLConnection.html#//apple_ref/doc/uid/20001836-BAJEAIEE\">Using NSURLConnection</a></p>\n\n<p>{% codeblock lang:objc %}</p>\n\n<h1>pragma mark - URL Connection delegate</h1>\n\n<ul>\n<li>(void) connection:(NSURLConnection *)connection didFailWithError:(NSError *)error\n{\nNSLog(@&quot;Error: %@&quot;, [error localizedDescription]);\n}\n{% endcodeblock %}</li>\n</ul>\n\n<p>La verdad es que no es necesario contar que hace el método <code>didFailWithError</code> pero por si acaso, diremos que es el que nos informará, en caso de que haya algún problema, del error que se ha producido en la conexión.</p>\n\n<p>{% codeblock lang:objc %}\n- (void) connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response {\n    NSLog(@&quot;Received response: %@&quot;, response);\n    // It can be called multiple times, for example in the case of a redirect, so each time we reset the data.\n    [self.receivedData setLength:0];\n}\n{% endcodeblock %}</p>\n\n<p>En situaciones normales, solo deberíamos ver una sola vez el método <code>didReceiveResponse</code>, eso quiere decir que el servidor ha aceptado nuestra conexión y va a enviar datos. Si se envía más de un mensaje a este método querrá decir que algo ha ido mal en la conexión y los datos recibidos hasta el momento ya no son válidos. Es por ello que en este método se vuelve a inicializar el NSData.</p>\n\n<p>{% codeblock lang:objc %}\n- (void) connection:(NSURLConnection *)connection didReceiveData:(NSData *)data {\n    [self.receivedData appendData:data];\n}\n{% endcodeblock %}</p>\n\n<p>El método <code>didReceiveData</code> se encargará de ir &quot;pegando&quot; los paquetes de datos que vaya recibiendo. Una vez que se hayan recibido todos los datos, se enviará un mensaje al método <code>connectionDidFinishLoading</code>. En este método, mediante la clase de reciente aparición en iOS 5 NSJSONSerialization, parsearemos los datos recibidos y los enviaremos al método que se encarga de la grabación en la base de datos.</p>\n\n<p>{% codeblock lang:objc %}\n- (void) connectionDidFinishLoading:(NSURLConnection *) connection {</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">// Do the JSON parsing.\n\nNSError *error;\nNSArray *data = [NSJSONSerialization JSONObjectWithData:self.receivedData\n                                                options:kNilOptions\n                                                  error:&amp;error];\nif (error) {\n    NSString *receivedString = [[NSString alloc] initWithData:self.receivedData\n                                                     encoding:NSUTF8StringEncoding];\n    NSLog(@&quot;ERROR: Failed to parse JSON response.&quot;);\n    NSLog(@&quot;Received data: %@&quot;, receivedString);\n    NSLog(@&quot;Failed to parse JSON: %@&quot;, [error localizedDescription]);\n} else {\n    NSLog(@&quot;Finished loading: %@&quot;, data);\n    [self reloadManagedObjectContextWithData:data];\n}\n\nself.receivedData = nil;\n//    self.inProgress = NO;\n</code></pre></div>\n<p>}</p>\n\n<ul>\n<li>(void) reloadManagedObjectContextWithData:(NSArray *)data {\nNSManagedObject *managedObject = nil;\nfor (NSDictionary *dictionary in data) {\n    managedObject = [NSEntityDescription insertNewObjectForEntityForName:@&quot;Lists&quot; inManagedObjectContext:<strong>managedObjectContext];\n    if (!([dictionary objectForKey:@&quot;id&quot;] == [NSNull null])) {\n        [managedObject setValue:[dictionary objectForKey:@&quot;id&quot;] forKey:@&quot;id&quot;];\n    }\n    if (!([dictionary objectForKey:@&quot;name&quot;] == [NSNull null])) {\n        [managedObject setValue:[dictionary objectForKey:@&quot;name&quot;] forKey:@&quot;name&quot;];\n    }\n    if (!([dictionary objectForKey:@&quot;notes&quot;] == [NSNull null])) {\n        [managedObject setValue:[dictionary objectForKey:@&quot;notes&quot;] forKey:@&quot;notes&quot;];\n    }\n}\nNSError *error = nil;\nif (![</strong>managedObjectContext save:&amp;error]) {\n    NSLog(@&quot;Se ha producido error al grabar: %@&quot;, [error localizedDescription]);\n}\n} \n{% endcodeblock %}</li>\n</ul>\n\n<p>La clase NSFetchedResultsController (una de esas cosas que debemos agradecer al obsoleto iOS 3.0) es la que se va a encargar de mostrar los datos en la pantalla del iPhone. Nosotros, lo único que hemos hecho a la plantilla que ha creado XCode es cambiar los nombres de la entidad y los atributos para adaptarlos a los de nuestra base de datos en servidor. El código fuente de este proyecto lo podréis encontrar en GitHub. Es ligeramente diferente a lo que se ha visto aquí porque incluye el borrado de elementos desde la propia aplicación y código para gestionar la descarga de registros ya grabados.</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1338164820000,"created_by":1,"updated_at":1338164820000,"updated_by":1,"published_at":1338164820000,"published_by":1},{"id":8,"title":"Pintando Rutas Con MapKit","slug":"pintando-rutas-con-mapkit","markdown":"Le tenía muchas ganas a MapKit. Es de esas cosas que sabes que en algún momento tendrás que toquetear pero por algún motivo ese momento no llega. Al final ha sido para hacer una aplicación que tiene la funcionalidad de \"como llegar\". Había oído a unos decir que esto era muy complicado y a otros que no era para tanto... Por lo que he podido comprobar, a partir de iOS 4 es bastante fácil de implementar. No he intentado bajar el código más allá de esta versión así que no puedo confirmar si es muy complicado en versiones anteriores.\n\n<!--more-->\n\nAunque MapKit está muy bien, los acuerdos de licencia entre Apple, Google y TomTom (si, aunque parezca mentira, TomTom está metida en el ajo) provocan perversiones como que la geocodificación inversa esté soportada (obtener una dirección a partir de unas coordenadas) pero la directa no (obtener unas coordenadas a partir de una dirección). Con el cálculo de rutas pasa lo mismo: la aplicación Mapas permite encontrar direcciones en un mapa y calcular rutas entre dos puntos pero a Apple (aparentemente) no le trae a cuenta incluir esa funcionalidad en las API´s así que no queda más remedio que incluirla nosotros... ¿cómo? pues con [Google Directions](https://developers.google.com/maps/documentation/directions/)\n\nLa gran ventaja de este API es que podríamos calificarlo dentro del tipo \"Semilla de Oro\" porque lo aguanta todo. El esquema de la URL para obtener la ruta más sencilla es el siguiente:\n\n[http://maps.googleapis.com/maps/api/directions/json?origin=Madrid&destination=Barcelona&sensor=false](http://maps.googleapis.com/maps/api/directions/json?origin=Madrid&destination=Barcelona&sensor=false)\n\nEn un alarde de originalidad, \"origin\" es el origen de la ruta y \"destination\" es el final de la ruta. \"sensor\" es un parametro con el que informamos de si el dispositivo tiene GPS. Pues bien, digo que es \"Semilla de Oro\" porque tanto en _origin_ como en _destination_ se pueden pasar coordenadas como literales. La única precaución será cambiar las caracteres no permitidos por los correspondientes con %.\n\nEl resultado es un conjunto de datos en formato json y de toda la información que nos facilita, la que más nos va a interesar para este post es la que se denomina _overview_polyline.\nEse \"chorro de datos\", claramente codificado es un conjunto de coordenadas que, si se unen, dan lugar a la linea que representa la ruta. Como la codificación es pública, alguien ya se ha tomado la molestia de escribir el código que la decodifica, en mi aplicación yo he usado [esta forma](http://sapessi.com/2010/06/decode-a-gpolyline-in-objective-c/) pero una búsqueda en Google te devuelve muchas más opciones, todas ellas semejantes. La única modificación que he incluido es una transformación de las coordenadas en un objeto CLLocation para devolverlo como elemento de un NSArray.\n\nPara proyectar la ruta sobre el mapa, vamos a utilizar las clases MKPolyline y MKOverlayView. La forma de hacerlo la he obtenido de este [blog](http://spitzkoff.com/craig/?p=136), que es donde cuentan que desde iOS 4 es fácil pero que antes era complicado e infructuoso.\n\nEl resultado ha sido el de estas imágenes\n\n![]({{ site.url }}/assets/photos/2012/05/Foto%2028-05-12%2003%2031%2030.png)\n\n![]({{ site.url }}/assets/photos/2012/05/Foto%2028-05-12%2003%2031%2035.png)\n\n\nY ya está, el código fuente de la demo lo podéis encontrar en [GitHub](https://github.com/jmoreno/PruebaMapa).\n","html":"<p>Le tenía muchas ganas a MapKit. Es de esas cosas que sabes que en algún momento tendrás que toquetear pero por algún motivo ese momento no llega. Al final ha sido para hacer una aplicación que tiene la funcionalidad de &quot;como llegar&quot;. Había oído a unos decir que esto era muy complicado y a otros que no era para tanto... Por lo que he podido comprobar, a partir de iOS 4 es bastante fácil de implementar. No he intentado bajar el código más allá de esta versión así que no puedo confirmar si es muy complicado en versiones anteriores.</p>\n\n<!--more-->\n\n<p>Aunque MapKit está muy bien, los acuerdos de licencia entre Apple, Google y TomTom (si, aunque parezca mentira, TomTom está metida en el ajo) provocan perversiones como que la geocodificación inversa esté soportada (obtener una dirección a partir de unas coordenadas) pero la directa no (obtener unas coordenadas a partir de una dirección). Con el cálculo de rutas pasa lo mismo: la aplicación Mapas permite encontrar direcciones en un mapa y calcular rutas entre dos puntos pero a Apple (aparentemente) no le trae a cuenta incluir esa funcionalidad en las API´s así que no queda más remedio que incluirla nosotros... ¿cómo? pues con <a href=\"https://developers.google.com/maps/documentation/directions/\">Google Directions</a></p>\n\n<p>La gran ventaja de este API es que podríamos calificarlo dentro del tipo &quot;Semilla de Oro&quot; porque lo aguanta todo. El esquema de la URL para obtener la ruta más sencilla es el siguiente:</p>\n\n<p><a href=\"http://maps.googleapis.com/maps/api/directions/json?origin=Madrid&amp;destination=Barcelona&amp;sensor=false\">http://maps.googleapis.com/maps/api/directions/json?origin=Madrid&amp;destination=Barcelona&amp;sensor=false</a></p>\n\n<p>En un alarde de originalidad, &quot;origin&quot; es el origen de la ruta y &quot;destination&quot; es el final de la ruta. &quot;sensor&quot; es un parametro con el que informamos de si el dispositivo tiene GPS. Pues bien, digo que es &quot;Semilla de Oro&quot; porque tanto en <em>origin</em> como en <em>destination</em> se pueden pasar coordenadas como literales. La única precaución será cambiar las caracteres no permitidos por los correspondientes con %.</p>\n\n<p>El resultado es un conjunto de datos en formato json y de toda la información que nos facilita, la que más nos va a interesar para este post es la que se denomina <em>overview</em>polyline.\nEse &quot;chorro de datos&quot;, claramente codificado es un conjunto de coordenadas que, si se unen, dan lugar a la linea que representa la ruta. Como la codificación es pública, alguien ya se ha tomado la molestia de escribir el código que la decodifica, en mi aplicación yo he usado <a href=\"http://sapessi.com/2010/06/decode-a-gpolyline-in-objective-c/\">esta forma</a> pero una búsqueda en Google te devuelve muchas más opciones, todas ellas semejantes. La única modificación que he incluido es una transformación de las coordenadas en un objeto CLLocation para devolverlo como elemento de un NSArray.</p>\n\n<p>Para proyectar la ruta sobre el mapa, vamos a utilizar las clases MKPolyline y MKOverlayView. La forma de hacerlo la he obtenido de este <a href=\"http://spitzkoff.com/craig/?p=136\">blog</a>, que es donde cuentan que desde iOS 4 es fácil pero que antes era complicado e infructuoso.</p>\n\n<p>El resultado ha sido el de estas imágenes</p>\n\n<p><img src=\"%7B%7B%20site.url%20%7D%7D/assets/photos/2012/05/Foto%2028-05-12%2003%2031%2030.png\" alt=\"\"></p>\n\n<p><img src=\"%7B%7B%20site.url%20%7D%7D/assets/photos/2012/05/Foto%2028-05-12%2003%2031%2035.png\" alt=\"\"></p>\n\n<p>Y ya está, el código fuente de la demo lo podéis encontrar en <a href=\"https://github.com/jmoreno/PruebaMapa\">GitHub</a>.</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1338170160000,"created_by":1,"updated_at":1338170160000,"updated_by":1,"published_at":1338170160000,"published_by":1},{"id":9,"title":"¿Morirá Microsoft Por Daños Colaterales?","slug":"morira-microsoft-por-danos-colaterales","markdown":"Este fin de semana he estado leyendo un articulo  bastante interesante sobre el desarrollo del sistema operativo WebOS contado de forma cronológica. El articulo es de The Verge y se llama [Pre to postmortem: the inside story of the death of Palm and webOS](http://www.theverge.com/2012/6/5/3062611/palm-webos-hp-inside-story-pre-postmortem). Lo tenía para leer en Pocket desde hacía unas semanas pero, quizá por el quinto cumpleaños del iPhone, ha estado circulando por twitter durante toda la semana.\n\nDespués de leerlo, de escuchar el [último podcast de Puromac](http://www.puromac.com/general/puromac-223-se-anuncia-microsoft-surface/) (uno de los mejores que he escuchado aunque a Fede no se le oía a penas), de[ ver un tweet](https://twitter.com/greggretsch/statuses/218052452820336641) y la [replica de John Gruber](http://daringfireball.net/linked/2012/06/29/iphone-industry), de ver las [últimas noticias de Microsoft](http://www.xataka.com/tablets/microsoft-surface-contra-todos) y [las de Google](http://www.xataka.com/tablets/nexus-7-el-tablet-de-google), de compartir impresiones con amigos y juntar todo esto en mi cabeza, he estado reflexionando un poco sobre todo esto y me he animado a hacer un \"articulo de opinión\"...\n\n<!--more-->\n\nEs innegable que el iPhone rompió todos los esquemas establecidos en telefonía móvil de una forma que nadie podía preveer, ni siquiera en Apple. Cuando desarrollas un producto es normal que te emociones y pienses que va a ser un exito, más que nada porque si no... ¿para qué lo desarrollas?. Y es normal que la competencia te mire y piense: \"te vas a estrellar\", porque al fin y al cabo son la competencia y no asumen que tu vayas a sacar un producto mejor que el que ellos tienen; pero, a veces, ocurren cosas inesperadas y el caso es que el iPhone fue algo más que una moda pasajera o un capricho de fanboys y pasó a convertirse en la referencia para los dispositivos de la categoría \"smartphone\" (aunque la diferencia entre lo que había entonces y lo que hay ahora es similar a la del Austrolapithecus y el Homo Sapiens). No hay más que ver como están ahora Nokia (la cotización ha bajado un 89% desde hace cinco años) y RIM (la cotización ha bajado un 85% en el mismo periodo) para darse cuenta de que los que parten el bacalao ahora son otros, como por ejemplo Samsung (su cotización ha subido un 36% desde entonces).\n\nEn el articulo de The Verge se comenta, de pasada, un hecho que para mi es fundamental en todo esto: Andy Rubin (Responsable del desarrollo de Android) fue de los primeros en darse cuenta de que el iPhone y su sistema operativo (conocido por aquel entonces como iPhone OS) suponían un cambio de paradigma que les obligaba a dejar de hacer un SO semejante al de Blackberry o Symbian para hacer basado en pantallas táctiles.\n\nPalm tardó un poco más en darse cuenta pero al final se puso las pilas pero terminó siendo devorada por HP. Nokia se resistió como pudo pero al final ha decidido incluir en sus dispositivos de gama alta Windows Phone (100 % tactil) y ha dejado Symbian para los de gama baja. RIM ha anunciado que el nuevo sistema operativo se retrasará hasta 2013... posiblemente después del verano anunciarán que disuelven la compañia y que si alguien está interesado en sus patentes que les compren.\n\nEl caso es que después de todo esto, el escenario es el siguiente: Apple vende un teléfono con un sistema operativo instalado que se actualiza gratuitamente y el resto de las empresas de telefonía (Samsung, HTC, Motorola, Sony...) venden dispositivos con un sistema operativo que les \"regala\" Google.\n\nEn el año 2010 a Apple le dio por sacar el iPad. Una especie de iPod Touch con 3G pero con pantalla gigantesca que podría haber sido un gran fracaso si no lo hubieran comprado 15 millones de personas en todo el mundo. Se vuelve a repetir el esquema del lanzamiento del iPhone: los chicos que lo presentan convencidos de que van a vender un montón y los que ya fabricaban algo parecido convencidos de que no. Desde Google se anuncia que la próxima versión de Android se adapatará al tamaño de las tablets y Microsoft dice que no teme que el iPad se coma el negocio de los pc´s. Al fin y al cabo, Microsoft acababa de presentar Windows Phone, la alternativa a iOS y a Android. No estaban para pensar en tabletas.\n\nY ahora, en Junio de 2012, cuando se cumplen 5 años de la venta del primer iPhone, se presentan casi simultaneamente Microsoft Surface y Google Nexus 7: los \"iPads\" de Microsoft y Google. Microsoft ya tiene claro que esto de los sistemas operativos táctiles tiene futuro así que se anima a sacar un hibrido entre pantalla táctil y teclado asociado para los que echen de menos un portátil. Por otro lado, Google quiere demostrar que tener la última versión de su sistema operativo en una tableta está muy bien... ¿quién de los dos convencerá a los fabricantes asiáticos? porque es de lo que se trata esta apuesta.\n\nVayamos al grano de lo que quería expresar en este articulo: Microsoft lo tiene jodido por culpa de Google. Apple lleva unos años de exitos encadenados en los que está haciendo mucho dinero y subiendo su cotización en bolsa (un 376% en cinco años) vendiendo sus propios productos con su propio sistema operativo. Google lleva cinco años regalando un sistema operativo a los fabricantes de dispositivos móviles lo que le ha permitido consolidar sus servicios y seguir aumentado su cotización (un 9% más que hace cinco años). ¿Y que ha hecho Microsoft?\n\nDurante estos últimos años, siempre que se hablaba de Microsoft, de como Apple le iba comiendo terreno y de como Android cada vez tenía más popularidad se decía que no había que preocuparse: Microsoft tenía un edificio como el del Tío Gilito lleno de monedas de oro y podría aguantar el tirón mucho tiempo. Después de grandes novedades, como Windows Phone o la enorme apuesta por Windows 8 se han animado a presentar un producto fabricado por ellos mismos con su sistema operativo (si, lo que Steve Jobs llevaba defendiendo desde el Apple I: la integración completa entre software y hardware) pero alegando que lo que pretenden ser es punta de lanza para que los fabricantes enfoquen de esta forma Windows 8, haciendo algo parecido a lo que han hecho ellos con Surface.\n\nEn los medios se hablaba de lo de siempre: han copiado a Apple, es un portatil dado la vuelta, etc... Yo debo ser muy fan de Asus (que lo soy) pero para mi el Surface es una copia del [Asus Eee Pad Transformer Prime](http://www.asus.es/Eee/Eee_Pad/Eee_Pad_Transformer_Prime_TF201/) que, dicho sea de paso, monta Android 3.2 Honeycomb de forma totalmente gratuita. Si Asus (y todos los demás) se animan a incluir Windows 8 en sus dispostivos (que ya se que no tiene nada que ver con Android... pero si yo fuera Andy Rubin miraría con ojos golosos ese pastel) tendrán que subir el precio para hacer frente al precio de la licencia de Windows a no ser que Microsoft se anime a regalarla. Y llegados a este punto ¿qué futuro le espera a Microsoft?\n\nApple juega en una linea aparte: fabrica sus propios dispositivos y desarrolla su propio sistema operativo desde hace más de 30 años. La alternativa a esto fue el licenciamiento del sistema operativo que tan bien le ha ido a Microsoft durante más de treinta años pero en el nuevo escenario, la alternativa es una compañía que regala el sistema operativo para ganar dinero con los servicios que tiene por detrás lo que destruye por completo el modelo de negocio de Microsoft.\n\nSon curiosos los caprichos del destino: Microsoft y Apple llevan enfrentados desde los albores de la informática de consumo. En el nuevo escenario de la movilidad los rivales son Apple y Google pero, en la lucha que mantienen, a quien están disparando es a Microsoft...\n\n¿cómo acabará todo esto?\n","html":"<p>Este fin de semana he estado leyendo un articulo  bastante interesante sobre el desarrollo del sistema operativo WebOS contado de forma cronológica. El articulo es de The Verge y se llama <a href=\"http://www.theverge.com/2012/6/5/3062611/palm-webos-hp-inside-story-pre-postmortem\">Pre to postmortem: the inside story of the death of Palm and webOS</a>. Lo tenía para leer en Pocket desde hacía unas semanas pero, quizá por el quinto cumpleaños del iPhone, ha estado circulando por twitter durante toda la semana.</p>\n\n<p>Después de leerlo, de escuchar el <a href=\"http://www.puromac.com/general/puromac-223-se-anuncia-microsoft-surface/\">último podcast de Puromac</a> (uno de los mejores que he escuchado aunque a Fede no se le oía a penas), de<a href=\"https://twitter.com/greggretsch/statuses/218052452820336641\"> ver un tweet</a> y la <a href=\"http://daringfireball.net/linked/2012/06/29/iphone-industry\">replica de John Gruber</a>, de ver las <a href=\"http://www.xataka.com/tablets/microsoft-surface-contra-todos\">últimas noticias de Microsoft</a> y <a href=\"http://www.xataka.com/tablets/nexus-7-el-tablet-de-google\">las de Google</a>, de compartir impresiones con amigos y juntar todo esto en mi cabeza, he estado reflexionando un poco sobre todo esto y me he animado a hacer un &quot;articulo de opinión&quot;...</p>\n\n<!--more-->\n\n<p>Es innegable que el iPhone rompió todos los esquemas establecidos en telefonía móvil de una forma que nadie podía preveer, ni siquiera en Apple. Cuando desarrollas un producto es normal que te emociones y pienses que va a ser un exito, más que nada porque si no... ¿para qué lo desarrollas?. Y es normal que la competencia te mire y piense: &quot;te vas a estrellar&quot;, porque al fin y al cabo son la competencia y no asumen que tu vayas a sacar un producto mejor que el que ellos tienen; pero, a veces, ocurren cosas inesperadas y el caso es que el iPhone fue algo más que una moda pasajera o un capricho de fanboys y pasó a convertirse en la referencia para los dispositivos de la categoría &quot;smartphone&quot; (aunque la diferencia entre lo que había entonces y lo que hay ahora es similar a la del Austrolapithecus y el Homo Sapiens). No hay más que ver como están ahora Nokia (la cotización ha bajado un 89% desde hace cinco años) y RIM (la cotización ha bajado un 85% en el mismo periodo) para darse cuenta de que los que parten el bacalao ahora son otros, como por ejemplo Samsung (su cotización ha subido un 36% desde entonces).</p>\n\n<p>En el articulo de The Verge se comenta, de pasada, un hecho que para mi es fundamental en todo esto: Andy Rubin (Responsable del desarrollo de Android) fue de los primeros en darse cuenta de que el iPhone y su sistema operativo (conocido por aquel entonces como iPhone OS) suponían un cambio de paradigma que les obligaba a dejar de hacer un SO semejante al de Blackberry o Symbian para hacer basado en pantallas táctiles.</p>\n\n<p>Palm tardó un poco más en darse cuenta pero al final se puso las pilas pero terminó siendo devorada por HP. Nokia se resistió como pudo pero al final ha decidido incluir en sus dispositivos de gama alta Windows Phone (100 % tactil) y ha dejado Symbian para los de gama baja. RIM ha anunciado que el nuevo sistema operativo se retrasará hasta 2013... posiblemente después del verano anunciarán que disuelven la compañia y que si alguien está interesado en sus patentes que les compren.</p>\n\n<p>El caso es que después de todo esto, el escenario es el siguiente: Apple vende un teléfono con un sistema operativo instalado que se actualiza gratuitamente y el resto de las empresas de telefonía (Samsung, HTC, Motorola, Sony...) venden dispositivos con un sistema operativo que les &quot;regala&quot; Google.</p>\n\n<p>En el año 2010 a Apple le dio por sacar el iPad. Una especie de iPod Touch con 3G pero con pantalla gigantesca que podría haber sido un gran fracaso si no lo hubieran comprado 15 millones de personas en todo el mundo. Se vuelve a repetir el esquema del lanzamiento del iPhone: los chicos que lo presentan convencidos de que van a vender un montón y los que ya fabricaban algo parecido convencidos de que no. Desde Google se anuncia que la próxima versión de Android se adapatará al tamaño de las tablets y Microsoft dice que no teme que el iPad se coma el negocio de los pc´s. Al fin y al cabo, Microsoft acababa de presentar Windows Phone, la alternativa a iOS y a Android. No estaban para pensar en tabletas.</p>\n\n<p>Y ahora, en Junio de 2012, cuando se cumplen 5 años de la venta del primer iPhone, se presentan casi simultaneamente Microsoft Surface y Google Nexus 7: los &quot;iPads&quot; de Microsoft y Google. Microsoft ya tiene claro que esto de los sistemas operativos táctiles tiene futuro así que se anima a sacar un hibrido entre pantalla táctil y teclado asociado para los que echen de menos un portátil. Por otro lado, Google quiere demostrar que tener la última versión de su sistema operativo en una tableta está muy bien... ¿quién de los dos convencerá a los fabricantes asiáticos? porque es de lo que se trata esta apuesta.</p>\n\n<p>Vayamos al grano de lo que quería expresar en este articulo: Microsoft lo tiene jodido por culpa de Google. Apple lleva unos años de exitos encadenados en los que está haciendo mucho dinero y subiendo su cotización en bolsa (un 376% en cinco años) vendiendo sus propios productos con su propio sistema operativo. Google lleva cinco años regalando un sistema operativo a los fabricantes de dispositivos móviles lo que le ha permitido consolidar sus servicios y seguir aumentado su cotización (un 9% más que hace cinco años). ¿Y que ha hecho Microsoft?</p>\n\n<p>Durante estos últimos años, siempre que se hablaba de Microsoft, de como Apple le iba comiendo terreno y de como Android cada vez tenía más popularidad se decía que no había que preocuparse: Microsoft tenía un edificio como el del Tío Gilito lleno de monedas de oro y podría aguantar el tirón mucho tiempo. Después de grandes novedades, como Windows Phone o la enorme apuesta por Windows 8 se han animado a presentar un producto fabricado por ellos mismos con su sistema operativo (si, lo que Steve Jobs llevaba defendiendo desde el Apple I: la integración completa entre software y hardware) pero alegando que lo que pretenden ser es punta de lanza para que los fabricantes enfoquen de esta forma Windows 8, haciendo algo parecido a lo que han hecho ellos con Surface.</p>\n\n<p>En los medios se hablaba de lo de siempre: han copiado a Apple, es un portatil dado la vuelta, etc... Yo debo ser muy fan de Asus (que lo soy) pero para mi el Surface es una copia del <a href=\"http://www.asus.es/Eee/Eee_Pad/Eee_Pad_Transformer_Prime_TF201/\">Asus Eee Pad Transformer Prime</a> que, dicho sea de paso, monta Android 3.2 Honeycomb de forma totalmente gratuita. Si Asus (y todos los demás) se animan a incluir Windows 8 en sus dispostivos (que ya se que no tiene nada que ver con Android... pero si yo fuera Andy Rubin miraría con ojos golosos ese pastel) tendrán que subir el precio para hacer frente al precio de la licencia de Windows a no ser que Microsoft se anime a regalarla. Y llegados a este punto ¿qué futuro le espera a Microsoft?</p>\n\n<p>Apple juega en una linea aparte: fabrica sus propios dispositivos y desarrolla su propio sistema operativo desde hace más de 30 años. La alternativa a esto fue el licenciamiento del sistema operativo que tan bien le ha ido a Microsoft durante más de treinta años pero en el nuevo escenario, la alternativa es una compañía que regala el sistema operativo para ganar dinero con los servicios que tiene por detrás lo que destruye por completo el modelo de negocio de Microsoft.</p>\n\n<p>Son curiosos los caprichos del destino: Microsoft y Apple llevan enfrentados desde los albores de la informática de consumo. En el nuevo escenario de la movilidad los rivales son Apple y Google pero, en la lucha que mantienen, a quien están disparando es a Microsoft...</p>\n\n<p>¿cómo acabará todo esto?</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1341440280000,"created_by":1,"updated_at":1341440280000,"updated_by":1,"published_at":1341440280000,"published_by":1},{"id":10,"title":"Jugando Con La App Store","slug":"jugando-con-la-app-store","markdown":"El miércoles 26 de septiembre tuve la oportunidad de dar otra charla en la NSCoderMAD. Volvió a ser en el CIBALL un sitio que parece que visitaremos mucho en los próximos meses si todo va bien. En esta ocasión mi charla giró sobre la experiencia de usar los servicios de AppGratis, una aplicación que envía newsletter y hace notificaciones push cada día hablando de una aplicación que baja de precio o pasa a ser gratis. Creo que la charla es bastante interesante por la experiencia en si y porque aporta datos no muy habituales: las ganancias de una aplicación del Top 25 de pago.\n\n<!--more--> \n\nHe subido la presentacion a slideshare en dos versiones, con las \"notas del presentador\" y sin ellas. También se van a enlazar desde el tumblr de [NSCoderMAD](http://nscoder-mad.tumblr.com/) junto con la presentación que hizo [Alejandro](https://twitter.com/j4n0) sobre el runtime de Objective-C; una presentación profunda de contenido, como no podía ser de otra forma, muy interesante e ilustrativa. Os recomiendo que la veáis. Espero que guste:\n\n{% slideshare 14474794 %}\n\nEsta es la presentación pero con mis notas:  \n\n{% slideshare 14474831 %}","html":"<p>El miércoles 26 de septiembre tuve la oportunidad de dar otra charla en la NSCoderMAD. Volvió a ser en el CIBALL un sitio que parece que visitaremos mucho en los próximos meses si todo va bien. En esta ocasión mi charla giró sobre la experiencia de usar los servicios de AppGratis, una aplicación que envía newsletter y hace notificaciones push cada día hablando de una aplicación que baja de precio o pasa a ser gratis. Creo que la charla es bastante interesante por la experiencia en si y porque aporta datos no muy habituales: las ganancias de una aplicación del Top 25 de pago.</p>\n\n<!--more--> \n\n<p>He subido la presentacion a slideshare en dos versiones, con las &quot;notas del presentador&quot; y sin ellas. También se van a enlazar desde el tumblr de <a href=\"http://nscoder-mad.tumblr.com/\">NSCoderMAD</a> junto con la presentación que hizo <a href=\"https://twitter.com/j4n0\">Alejandro</a> sobre el runtime de Objective-C; una presentación profunda de contenido, como no podía ser de otra forma, muy interesante e ilustrativa. Os recomiendo que la veáis. Espero que guste:</p>\n\n<p>{% slideshare 14474794 %}</p>\n\n<p>Esta es la presentación pero con mis notas:  </p>\n\n<p>{% slideshare 14474831 %}</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1348725600000,"created_by":1,"updated_at":1348725600000,"updated_by":1,"published_at":1348725600000,"published_by":1},{"id":11,"title":"Soporte Nysnö Para MacBook Pro","slug":"soporte-nysno-para-macbook-pro","markdown":"No tenía pensado hablar de bricolaje en este blog pero una mención de [@rubdottocom](http://twitter.com/rubdottocom) haciendo referencia a una entrada suya haciendo lo mismo pero [con otro modelo](http://putofreak.com/crea-un-dock-para-tu-macbook-con-un-servilletero-de-ikea) me hizo plantearme una sección de \"Macnitas\" para este blog.\n\nLe he pedido a los Reyes Magos una pantalla de 24 pulgadas para conectar al MacBook Pro y poder hacer storyboards de aplicaciones para el iPad sin volverme loco. El caso es que, cuando lo tenga, el portátil pasará a ser un \"sobremesa\" y para que no me quite mucho espacio he estado mirando soportes verticales. Obviamente son todos muy buenos y caros pero como la economía española no está para tirar cohetes y hay que hacer mucha contención del gasto decidí explorar otras opciones: atriles, sujetalibros, etc, hasta que mi mujer me dijo: \"¿por qué no usas ese servilletero que compramos en Ikea y que nunca usamos?\"\n\n<!--more-->\n![]({{ site.url }}/assets/photos/2012/12/nysno-servilletero__0137987_PE296893_S4-300x300.jpg)\n\nGenial!!! Pero había un problema, tenía que conseguir que el MBP encajase pero que sin que se arañase. El caso es que me acorde que en algún armario había una espuma de esas que vienen en las fundas de neopreno para los portátiles. Perfecto, una vez recortada con forma de estrella y cortada por la mitad para pegar en los dos laterales del servilletero ya teníamos el \"Soporte Nysnö para MacBook Pro\".\n\n![]({{ site.url }}/assets/photos/2012/12/Foto-23-12-12-18-43-59-e1356285841523-224x300.jpg)\n\nEl problema del \"Soporte Nysnö\" es que es poco estable y como en casa hay un terremoto y otro viene en camino hay que evitar las inestabilidades. Nuevamente Ikea al rescate, esta vez con las sujeciones de un organizador de cables que también estaba en desuso.\n\n![]({{ site.url }}/assets/photos/2012/12/ikea-300x300.jpg)\n\nListo, el resultado final no tendrá la misma belleza del aluminio del BookArc pero lo importante es que es efectivo y barato.\n\nOs dejo un par de imágenes más para que veáis el resultado.\n\n![]({{ site.url }}/assets/photos/2012/12/Foto-23-12-12-18-43-48-e1356285786354-224x300.jpg)\n\n![]({{ site.url }}/assets/photos/2012/12/Foto-23-12-12-18-42-58-e1356286140661-224x300.jpg)\n\nEspero que os haya gustado. :-)","html":"<p>No tenía pensado hablar de bricolaje en este blog pero una mención de <a href=\"http://twitter.com/rubdottocom\">@rubdottocom</a> haciendo referencia a una entrada suya haciendo lo mismo pero <a href=\"http://putofreak.com/crea-un-dock-para-tu-macbook-con-un-servilletero-de-ikea\">con otro modelo</a> me hizo plantearme una sección de &quot;Macnitas&quot; para este blog.</p>\n\n<p>Le he pedido a los Reyes Magos una pantalla de 24 pulgadas para conectar al MacBook Pro y poder hacer storyboards de aplicaciones para el iPad sin volverme loco. El caso es que, cuando lo tenga, el portátil pasará a ser un &quot;sobremesa&quot; y para que no me quite mucho espacio he estado mirando soportes verticales. Obviamente son todos muy buenos y caros pero como la economía española no está para tirar cohetes y hay que hacer mucha contención del gasto decidí explorar otras opciones: atriles, sujetalibros, etc, hasta que mi mujer me dijo: &quot;¿por qué no usas ese servilletero que compramos en Ikea y que nunca usamos?&quot;</p>\n\n<!--more-->\n\n<p><img src=\"%7B%7B%20site.url%20%7D%7D/assets/photos/2012/12/nysno-servilletero__0137987_PE296893_S4-300x300.jpg\" alt=\"\"></p>\n\n<p>Genial!!! Pero había un problema, tenía que conseguir que el MBP encajase pero que sin que se arañase. El caso es que me acorde que en algún armario había una espuma de esas que vienen en las fundas de neopreno para los portátiles. Perfecto, una vez recortada con forma de estrella y cortada por la mitad para pegar en los dos laterales del servilletero ya teníamos el &quot;Soporte Nysnö para MacBook Pro&quot;.</p>\n\n<p><img src=\"%7B%7B%20site.url%20%7D%7D/assets/photos/2012/12/Foto-23-12-12-18-43-59-e1356285841523-224x300.jpg\" alt=\"\"></p>\n\n<p>El problema del &quot;Soporte Nysnö&quot; es que es poco estable y como en casa hay un terremoto y otro viene en camino hay que evitar las inestabilidades. Nuevamente Ikea al rescate, esta vez con las sujeciones de un organizador de cables que también estaba en desuso.</p>\n\n<p><img src=\"%7B%7B%20site.url%20%7D%7D/assets/photos/2012/12/ikea-300x300.jpg\" alt=\"\"></p>\n\n<p>Listo, el resultado final no tendrá la misma belleza del aluminio del BookArc pero lo importante es que es efectivo y barato.</p>\n\n<p>Os dejo un par de imágenes más para que veáis el resultado.</p>\n\n<p><img src=\"%7B%7B%20site.url%20%7D%7D/assets/photos/2012/12/Foto-23-12-12-18-43-48-e1356285786354-224x300.jpg\" alt=\"\"></p>\n\n<p><img src=\"%7B%7B%20site.url%20%7D%7D/assets/photos/2012/12/Foto-23-12-12-18-42-58-e1356286140661-224x300.jpg\" alt=\"\"></p>\n\n<p>Espero que os haya gustado. :-)</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1356288660000,"created_by":1,"updated_at":1356288660000,"updated_by":1,"published_at":1356288660000,"published_by":1},{"id":12,"title":"Y Otro","slug":"y-otro","markdown":">Lo reconozco, soy un culo inquieto. \nCreo que he probado más sistemas de blogging que entradas he escrito.\n\nSiendo usuario de Gmail, cuando te animas a escribir en un blog lo más fácil es hacerlo en Blogger... y así empece yo: [AZCT Abend](http://azctabend.blogspot.com.es \"AZCT Abend\") era la incursión de un Cobolero en el mundo del blogging y como de COBOL no había mucho que contar, la idea era ir contando mis avances en el aprendizaje de Objective-C y Cocoa Touch. \n\n<!--more-->\n\nAl mismo tiempo, como buen \"early adopter\" que soy, me hice mi cuenta en Tumblr con un par de blogs: uno que me servía como galería de fotos de [Instagram](http://mismamente.tumblr.com \"mismamente\") y otro para colgar citas que parecían llamativas: <http://indistintamente.tumblr.com>... claramente al de Instagram le dediqué más tiempo. \n\nPoco más tarde, por diversas circunstancias que no vienen al caso compre un dominio: <http://zinkinapps.com>. Era el momento de tener un sitio web y un [blog de desarrollo](http://zinkinapps.com/blog) vinculado al mismo. No tenía ni idea de como hacer la página pero con el blog si que sabía que tenía que subir un peldaño más: WordPress. \nNo es que Blogger estuviera mal, de hecho sigue siendo un buen punto de partida, pero como muchas cosas que hace/compra Google está un poco a medias. Si quieres tener un blog personalizado, con unos temas que den la impresión de que el tipo que está detras es un \"fiera\" internet te dice que tienes que probar WordPress.\nAsí me meti en el maravilloso mundo de los hosting gratuitos, descubrí php, los plugins y otras mandangas. Casi al mismo tiempo descubrí Twitter Bootstrap que para alguien como yo, con el talento del diseñador del blog de [Richard Stallman](http://stallman.org), era la forma de hacer una web con un estilo cuidado.\n\nUna cosa llevo a la otra y finalmente decidí que ni php, ni hosting gratuitos, ni leches. El hosting en Heroku, la web a hacerla con Ruby on Rails y el blog... ¿en WordPress? Bueno, si no hay otra opción.\nEl caso es que mientras estaba haciendo la web con Rails (todavía está en desarrollo) pensé en que el blog lo podía hacer también en Rails. Al fin y al cabo, la mayoría de los tutoriales de Rails son de como hacer un blog y con markdown podría escribir las entradas en cualquier editor, subir el contenido a la base de datos y usar alguna gema que lo pase a HTML. \n\nY buscando, buscando encontré Octopress: un framework de blogging que puedo desplegar en Heroku (o en GitHub que es donde está este), con el que practico MarkDown y Git, dos de mis propósitos de 2013. Lo que no entiendo es como tardé tanto tiempo en encontrarlo, si estuvo siempré ahí, desde el [principio.](http://mattgemmell.com)\n\n","html":"<blockquote>\n<p>Lo reconozco, soy un culo inquieto. \nCreo que he probado más sistemas de blogging que entradas he escrito.</p>\n</blockquote>\n\n<p>Siendo usuario de Gmail, cuando te animas a escribir en un blog lo más fácil es hacerlo en Blogger... y así empece yo: <a href=\"http://azctabend.blogspot.com.es\" title=\"AZCT Abend\">AZCT Abend</a> era la incursión de un Cobolero en el mundo del blogging y como de COBOL no había mucho que contar, la idea era ir contando mis avances en el aprendizaje de Objective-C y Cocoa Touch. </p>\n\n<!--more-->\n\n<p>Al mismo tiempo, como buen &quot;early adopter&quot; que soy, me hice mi cuenta en Tumblr con un par de blogs: uno que me servía como galería de fotos de <a href=\"http://mismamente.tumblr.com\" title=\"mismamente\">Instagram</a> y otro para colgar citas que parecían llamativas: <a href=\"http://indistintamente.tumblr.com\">http://indistintamente.tumblr.com</a>... claramente al de Instagram le dediqué más tiempo. </p>\n\n<p>Poco más tarde, por diversas circunstancias que no vienen al caso compre un dominio: <a href=\"http://zinkinapps.com\">http://zinkinapps.com</a>. Era el momento de tener un sitio web y un <a href=\"http://zinkinapps.com/blog\">blog de desarrollo</a> vinculado al mismo. No tenía ni idea de como hacer la página pero con el blog si que sabía que tenía que subir un peldaño más: WordPress. \nNo es que Blogger estuviera mal, de hecho sigue siendo un buen punto de partida, pero como muchas cosas que hace/compra Google está un poco a medias. Si quieres tener un blog personalizado, con unos temas que den la impresión de que el tipo que está detras es un &quot;fiera&quot; internet te dice que tienes que probar WordPress.\nAsí me meti en el maravilloso mundo de los hosting gratuitos, descubrí php, los plugins y otras mandangas. Casi al mismo tiempo descubrí Twitter Bootstrap que para alguien como yo, con el talento del diseñador del blog de <a href=\"http://stallman.org\">Richard Stallman</a>, era la forma de hacer una web con un estilo cuidado.</p>\n\n<p>Una cosa llevo a la otra y finalmente decidí que ni php, ni hosting gratuitos, ni leches. El hosting en Heroku, la web a hacerla con Ruby on Rails y el blog... ¿en WordPress? Bueno, si no hay otra opción.\nEl caso es que mientras estaba haciendo la web con Rails (todavía está en desarrollo) pensé en que el blog lo podía hacer también en Rails. Al fin y al cabo, la mayoría de los tutoriales de Rails son de como hacer un blog y con markdown podría escribir las entradas en cualquier editor, subir el contenido a la base de datos y usar alguna gema que lo pase a HTML. </p>\n\n<p>Y buscando, buscando encontré Octopress: un framework de blogging que puedo desplegar en Heroku (o en GitHub que es donde está este), con el que practico MarkDown y Git, dos de mis propósitos de 2013. Lo que no entiendo es como tardé tanto tiempo en encontrarlo, si estuvo siempré ahí, desde el <a href=\"http://mattgemmell.com\">principio.</a></p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1360625520000,"created_by":1,"updated_at":1360625520000,"updated_by":1,"published_at":1360625520000,"published_by":1},{"id":13,"title":"Como Mola Octopress","slug":"como-mola-octopress","markdown":"Estoy disfrutando como un enano con [Octopress](http://octopress.org). Como ya conté en el anterior post, he probado unos cuantos servicios para publicar blogs y a grandes rasgos todos me han parecido iguales: un menú de configuración en el que puedes tocar cuatro cosas, la promesa de que a través de CSS te lo puedes configurar a tu gusto y en ocasiones una oferta de plugins que nunca terminan de hacer lo que crees que deben hacer.\n\nSi analizamos lo que ofrece Octopress, posiblemente Wordpress sea el que más se le parezca (no creo que el nombre sea casualidad). Se puede descargar toda el proyecto del blog desde la página de [wordpress.org](http://wordpress.org), se configura un MySQL, se tocan un par de ficheros, se sube a un hosting de php y a disfrutar del blog... todo un mundo de maravillosos plugins y temas está a tu disposición.   \nEl problema es que php y yo no terminamos de llevarnos bien. \n\n<!--more-->\n\nNo tengo nada en contra de PHP, es un lenguaje muy extendido, con muchisima documentación a lo largo y ancho de internet, con el que se pueden hacer muchisimas cosas, fácil de aprender y con una gran oferta de hosting. Durante casi un año he tenido un blog wordpress instalado en un hosting gratuito. En todo este año podría haber creado páginas, modificado los plugins que no hacían lo que yo quería, cambiado los estilos,... pero el caso es que no lo he hecho.\n\nSin embargo, en los poco menos de un mes que llevo con octopress he creado páginas, cambiado estilos, modificado plugins e incluso creando alguno nuevo pero lo más importante es que... __TENGO GANAS DE ESCRIBIR__\n\n## ¿Qué es Octopress?\n\nOctopress está basado en Jekyll, un generador de blogs estáticos. Jekyll propone una estructura de carpetas para el sitio web, las páginas se escriben en formato Textile, Markdown o Liquid y Jekyll se encarga de generar el contenido web estático en HTML. Octopress añade a Jekyll unas plantillas para entradas de blog y páginas, un tema por defecto que se adapta a cualquier pantalla y es HTML5, la automatización con Rake de determinadas tareas como la creación de entradas, el generado del blog, la previsualización del blog, el despliegue en Github (y también en Heroku y en Rsync), la limpieza de la cache... En muchos aspectos me recuerda a Rails. \n\nAdemás, a mi me esta viniendo muy bien para practicar Git. Mi flujo de trabajo sería el siguiente:\n- Creo una nueva rama cuando voy a escribir o probar alguna cosa. \n- Hago lo que tenga que hacer en la nueva rama\n- Si todo esta bien o he terminado de escribir la entrada hago el merge a la rama _source_\n- Género el blog, lo despliego y hago push al repositorio de GitHub. \n\nA muchos les parecerá una vuelta al pasado, a mi es lo que más me gusta: la sensación de que mi blog es una aplicación desarrollada por mi y de la que yo controlo hasta el último detalle. El hecho de que el contenido ya no sea dinámico (aunque esto no es del todo cierto ya que hay determinadas partes del blog que están hechas en javascript, precisamente para darle dinamismo) resulta chocante al principio pero buscando un poco por internet encuentras grandes defensores de este tipo de sitios sobre todo en casos en los que el blog está alojado en un servidor personal y una alta demanda podía provocar discontinuidades en el servicio. Dudo mucho de que este vaya a ser mi caso, pero no está de más tomar alguna medida. :-)\n\n## Editando el blog\n\nEn mi caso, la edición del blog la hago con Sublime Text. Una de las cosas que más echarán en falta los que tengan Wordpress es que no hay una aplicación nativa con la que puedas gestionar tu blog en cualquier momento y situación pero es lo que tiene _compilar_ un blog, que necesitas tu equipo del día a día para hacer alguna correción o para publicar una nueva entrada. Creo que la aparación en el App Store de programas como [Pythonista](https://itunes.apple.com/es/app/pythonista/id528579881) acabarán trayendo la posibilidad de generar y desplegar el blog desde un iPad o un iPhone pero de momento, lo único que se puede hacer desde un dispositivo móvil es ir escribiendo alguna entrada que otra. En mi caso utilizo [iA Writer](https://itunes.apple.com/us/app/ia-writer/id392502056?l=es&mt=8) y la sincronización con Dropbox.     \nPara que os hagáis una idea, está entrada se empezo a escribir en el mac, la parte central la escribi en el metro mientras iba a trabajar y estoy terminando de escribirla ahora otra vez en el mac. El paso de creación de entrada hay que hacerlo con _rake_ pero puedes ir empezando a escribir lo que tengas pensado en cualquier sitio, para eso se invento el corta-pega.\n\nOtro día hablaré un poco más de los plugins, de las plantillas Liquid y cosas así. No hace falta ser un experto para tocar un par de scripts o buscar alguna cosa en internet y hacerte la vida un poco más fácil.\n\n","html":"<p>Estoy disfrutando como un enano con <a href=\"http://octopress.org\">Octopress</a>. Como ya conté en el anterior post, he probado unos cuantos servicios para publicar blogs y a grandes rasgos todos me han parecido iguales: un menú de configuración en el que puedes tocar cuatro cosas, la promesa de que a través de CSS te lo puedes configurar a tu gusto y en ocasiones una oferta de plugins que nunca terminan de hacer lo que crees que deben hacer.</p>\n\n<p>Si analizamos lo que ofrece Octopress, posiblemente Wordpress sea el que más se le parezca (no creo que el nombre sea casualidad). Se puede descargar toda el proyecto del blog desde la página de <a href=\"http://wordpress.org\">wordpress.org</a>, se configura un MySQL, se tocan un par de ficheros, se sube a un hosting de php y a disfrutar del blog... todo un mundo de maravillosos plugins y temas está a tu disposición.<br>\nEl problema es que php y yo no terminamos de llevarnos bien. </p>\n\n<!--more-->\n\n<p>No tengo nada en contra de PHP, es un lenguaje muy extendido, con muchisima documentación a lo largo y ancho de internet, con el que se pueden hacer muchisimas cosas, fácil de aprender y con una gran oferta de hosting. Durante casi un año he tenido un blog wordpress instalado en un hosting gratuito. En todo este año podría haber creado páginas, modificado los plugins que no hacían lo que yo quería, cambiado los estilos,... pero el caso es que no lo he hecho.</p>\n\n<p>Sin embargo, en los poco menos de un mes que llevo con octopress he creado páginas, cambiado estilos, modificado plugins e incluso creando alguno nuevo pero lo más importante es que... <strong>TENGO GANAS DE ESCRIBIR</strong></p>\n\n<h2>¿Qué es Octopress?</h2>\n\n<p>Octopress está basado en Jekyll, un generador de blogs estáticos. Jekyll propone una estructura de carpetas para el sitio web, las páginas se escriben en formato Textile, Markdown o Liquid y Jekyll se encarga de generar el contenido web estático en HTML. Octopress añade a Jekyll unas plantillas para entradas de blog y páginas, un tema por defecto que se adapta a cualquier pantalla y es HTML5, la automatización con Rake de determinadas tareas como la creación de entradas, el generado del blog, la previsualización del blog, el despliegue en Github (y también en Heroku y en Rsync), la limpieza de la cache... En muchos aspectos me recuerda a Rails. </p>\n\n<p>Además, a mi me esta viniendo muy bien para practicar Git. Mi flujo de trabajo sería el siguiente:\n- Creo una nueva rama cuando voy a escribir o probar alguna cosa. \n- Hago lo que tenga que hacer en la nueva rama\n- Si todo esta bien o he terminado de escribir la entrada hago el merge a la rama <em>source</em>\n- Género el blog, lo despliego y hago push al repositorio de GitHub. </p>\n\n<p>A muchos les parecerá una vuelta al pasado, a mi es lo que más me gusta: la sensación de que mi blog es una aplicación desarrollada por mi y de la que yo controlo hasta el último detalle. El hecho de que el contenido ya no sea dinámico (aunque esto no es del todo cierto ya que hay determinadas partes del blog que están hechas en javascript, precisamente para darle dinamismo) resulta chocante al principio pero buscando un poco por internet encuentras grandes defensores de este tipo de sitios sobre todo en casos en los que el blog está alojado en un servidor personal y una alta demanda podía provocar discontinuidades en el servicio. Dudo mucho de que este vaya a ser mi caso, pero no está de más tomar alguna medida. :-)</p>\n\n<h2>Editando el blog</h2>\n\n<p>En mi caso, la edición del blog la hago con Sublime Text. Una de las cosas que más echarán en falta los que tengan Wordpress es que no hay una aplicación nativa con la que puedas gestionar tu blog en cualquier momento y situación pero es lo que tiene <em>compilar</em> un blog, que necesitas tu equipo del día a día para hacer alguna correción o para publicar una nueva entrada. Creo que la aparación en el App Store de programas como <a href=\"https://itunes.apple.com/es/app/pythonista/id528579881\">Pythonista</a> acabarán trayendo la posibilidad de generar y desplegar el blog desde un iPad o un iPhone pero de momento, lo único que se puede hacer desde un dispositivo móvil es ir escribiendo alguna entrada que otra. En mi caso utilizo <a href=\"https://itunes.apple.com/us/app/ia-writer/id392502056?l=es&amp;mt=8\">iA Writer</a> y la sincronización con Dropbox.<br>\nPara que os hagáis una idea, está entrada se empezo a escribir en el mac, la parte central la escribi en el metro mientras iba a trabajar y estoy terminando de escribirla ahora otra vez en el mac. El paso de creación de entrada hay que hacerlo con <em>rake</em> pero puedes ir empezando a escribir lo que tengas pensado en cualquier sitio, para eso se invento el corta-pega.</p>\n\n<p>Otro día hablaré un poco más de los plugins, de las plantillas Liquid y cosas así. No hace falta ser un experto para tocar un par de scripts o buscar alguna cosa en internet y hacerte la vida un poco más fácil.</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1362705000000,"created_by":1,"updated_at":1362705000000,"updated_by":1,"published_at":1362705000000,"published_by":1},{"id":14,"title":"Como Se Hizo URLHunter","slug":"como-se-hizo-urlhunter","markdown":"Vamos a demostrar que no hace falta ser un figura para hacer algo muy util y aparente. Vaya por delante que, si somos capaces de hacer esto es porque existen páginas como las de [Railscasts][1].  \nLo primero que hacemos después de crear nuestro nuevo proyecto Rails es instalar las gemas necesarias para trabajar con Twitter Bootstrap, del que somos fans.\n\n{% codeblock lang:ruby %}\ngem 'therubyracer'\ngem 'less-rails'\ngem 'twitter-bootstrap-rails'\n{% endcodeblock %}\n\n<!--more-->\n      \t\nDespués de cargar las gemas en nuestro proyecto con Bundle Install, terminamos de instalar Bootstrap en nuestro proyecto con la siguiente instrucción:\n\n{% codeblock lang:ruby %}\nrake g bootstrap:install\n{% endcodeblock %}\n\nEl propósito de nuestra aplicación es mostrar un listado de los tweets de [@objectivec_es][2] que contienen una url. De esta forma tendremos agrupados en una web toda esa información tan interesante que van soltando a nuestro timeline y que muchas veces perdemos por no hacer un favorito a tiempo. Dicho esto, de primeras lo que vamos a necesitar es una página en la que mostraremos información procedente del API de Twitter.\n\nCreamos un controlador para las páginas de contenido estático:\n\n{% codeblock lang:ruby %}\nrake g controller StaticPages home help\n{% endcodeblock %}\n\nY hacemos algunos ajuste en el _layout_ general para empezar a beneficiarnos de Twitter Bootstrap\n\n{% codeblock lang:html %}\n<!DOCTYPE html>\n<html>\n<head>\n  <title>URLHunter</title>\n  <!--[if lt IE 9]>\n  <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\" type=\"text/javascript\"></script>\n  <![endif]-->\n  <%= stylesheet_link_tag    \"application\", :media => \"all\" %>\n  <%= javascript_include_tag \"application\" %>\n  <%= csrf_meta_tags %>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n</head>\n<body>\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"span9\"><%= yield %></div>\n    <div class=\"span3\">\n      <h2>¿Por qué?</h2>\n      <p>Porque alguien tenía que hacerlo. Si no, Twitter volvería a cambiar su API para eliminar la funcionalidad de favoritos.</p>\n    </div>\n  </div></div>\n</body>\n</html>\n{% endcodeblock %}\n\n## Accediendo al API de Twitter\n\nPara recuperar el timelime de nuestra \"presa\" podemos desarrollar las llamadas que necesitemos o utilizar la gema \"Twitter\". Siguiendo la filosfía DRY y como hay otras cosas mucho mejores que hacer, nosotros nos decantamos por la gema.\n\n{% codeblock lang:ruby %}\ngem 'twitter'\n{% endcodeblock %}\n\nAntiguamente ya podríamos hacer algunas pruebas con la consola pero en los tiempos que corren hay que autenticarse. Para ello, siguiendo la documentación de la gema, hay que crear un fichero de inicialización en /config/initializers llamado twitter.rb:\n\n{% codeblock lang:ruby %}\nTwitter.configure do |config|\n  config.consumer_key = YOUR_CONSUMER_KEY\n  config.consumer_secret = YOUR_CONSUMER_SECRET\n  config.oauth_token = YOUR_OAUTH_TOKEN\n  config.oauth_token_secret = YOUR_OAUTH_TOKEN_SECRET\nend\n{% endcodeblock %}\n\nUna vez hayamos reemplazado los valores aplantillados con los que podemos encontrar en la sección de \"Mis applicaciones\" de la web de desarrolladores de Twitter ya estaremos en condiciones de empezar a consumir datos de Twitter.\n\nInicialmente, vamos a probar que tal funciona todo incluyendo lo siguiente en el home.html.erb:\n\n{% codeblock lang:html %}\n<h1>Todos los links de @objectivec_es</h1>\n<div id=\"tweets-with-links\">\n  <% Twitter.user_timeline(\"objectivec_es\", :count => 10, :exclude_replies => true).each do |tweet| %>\n    <blockquote> <%= tweet.text %> </blockquote>\n  <% end %>\n</div>\n{% endcodeblock %}\n\n¿Igualito que en iOS, eh? Bueno, cada uno tiene sus virtudes. En cualquier caso, aunque hemos obtenido rapidos resultados no podemos decir que sean _bonitos_. Lo suyo sería que los hashtags, las menciones y los links tuvieran los vinculos correspondientes. Para eso vamos a utilizar otra gema.\n\n{% codeblock lang:bash %}\ngem 'twitter-text'\n{% endcodeblock %}\n\nSegún la documentación de la gema, para _autolinkar_ las entidades lo único que tenemos que hacer es lo siguiente:\n\nA *app/helpers/application_helper.rb* lo dejaremos de esta forma\n\n{% codeblock lang:ruby %}\nmodule ApplicationHelper\n  include Twitter::Autolink\nend\n{% endcodeblock %}\n\nY en *home.html.erb* cambiaremos el contenido de la cita por lo siguiente:\n\n{% codeblock lang:html %}\n<blockquote> <p><%= auto_link(tweetlink.content).html_safe %></p> </blockquote>\n{% endcodeblock %}\n\n>Es necesario poner html_safe al final para que Rails interprete que le estamos pasando un texto que contiene etiquetas HTML, si no lo hicieramos las etiquetas se pintarían como si fuera texto plano.\n\nSi recargamos ahora la página veremos todos los tweets con enlaces a los usuarios mencionados, a los hasgtags... Como diría Duke Nukem: \"Ah!, much better!!!\"\n\nLo siguiente que vamos a hacer es almacenar los tweets en base de datos. ¿Por qué?, pues por varios motivos:\n\n- No queremos perder ni una sola de estas píldoras de información\n- Ahora no son muchos pero cuando los chicos de [@ObjectiveC_es][2] vayan por los 3000 tweets esta web tardará bastante más en cargar\n- En esta vida, no eres nadie si no haces un poco de persistencia.\n\nAsí que crearemos un modelo para almacenar algunos datos. Inicialmente será muy sencillo, ya lo complicaremos más adelante:\n\n{% codeblock lang:bash %}\nrails g model tweetlink tweet_id screen_name content:text profile_image tweet_created_at\n{% endcodeblock %}\n\ne incluiremos algunos métodos de conveniencia en la nueva clase:\n\n{% codeblock lang:ruby %}\nclass Tweetlink < ActiveRecord::Base\n  attr_accessible :content, :screen_name, :tweet_id, :profile_image, :tweet_created_at\n\n  def self.first_time\n    Twitter.user_timeline(\"objectivec_es\", :count => 3200, :exclude_replies => true).each do |tweet|\n      insert_tweet(tweet)\n    end\n  end\n\n  def self.pull_tweets\n    Twitter.user_timeline(\"objectivec_es\", :count => 200, :exclude_replies => true, :since_id => maximum(:tweet_id)).each do |tweet|\n      insert_tweet(tweet)\n    end\n  end\n\n  def self.insert_tweet(tweet)\n   unless exists?(tweet_id: tweet.id)\n     if tweet.retweet?\n       tweet = tweet.retweeted_status\n     end\n     if tweet.urls.any?\n       create!(\n           tweet_id: tweet.id,\n           content: tweet.text,\n           screen_name: tweet.user.screen_name,\n           profile_image: tweet.user.profile_image_url,\n           tweet_created_at: tweet.created_at,\n       )\n     end\n   end\n  end\nend\n{% endcodeblock %}\n\nA continuación, tendremos que cambiar el controlador y la vista ya que ahora mismo todavía están recuperando la información directamente desde el API.\n\nEl metodo _home_ quedará de la siguiente manera:\n\n{% codeblock lang:ruby %}\ndef home\n\n  @tweetlinks = Tweetlink.all\n\n  @tweetlinks.empty? ? Tweetlink.first_time : Tweetlink.pull_tweets\n\n  respond_to do |format|\n    format.html # index.html.erb\n    format.json { render json: @tweetlinks }\n  end\n\nend\n{% endcodeblock %}\n\nY la vista de esta otra forma:\n\n{% codeblock lang:html %}\n<h1>Todos los links de @objectivec_es</h1>\n<div id=\"tweets-with-links\">\n  <% @tweetlinks.each do |tweetlink| %>\n    <blockquote>\n      <%= image_tag tweetlink.profile_image %>\n      <%= tweetlink.screen_name %> wrote at\n      <%= l DateTime.parse(tweetlink.tweet_created_at), :format => :long %>\n      <p><%= auto_link(tweetlink.content).html_safe %></p>\n    </blockquote>\n  <% end %>\n</div>\n{% endcodeblock %}\n\nPara terminar vamos a incluir paginación, esto reducirá el tiempo de carga de la página y mejorará la usabilidad. Otra vez más, podriamos escribir todo el código necesario para montar una paginación pero con un par de gemas lo podemos dejar solucionado:\n\n{% codeblock lang:ruby %}\ngem 'will_paginate'\ngem 'bootstrap-will_paginate'\n{% endcodeblock %}\n\nLa gema *will_paginate* es la que se encarga de la gestión de la paginación. Lo único que tendremos que hacer es cambiar el número de registros que recuperamos de la clase Tweetlink en el controlador. En lugar de _all_ usaremos _paginate_:\n\n{% codeblock lang:ruby %}\ndef home\n\n  @tweetlinks = Tweetlink.paginate(page: params[:page])\n\n  @tweetlinks.empty? ? Tweetlink.first_time : Tweetlink.pull_tweets\n\n  respond_to do |format|\n    format.html # index.html.erb\n    format.json { render json: @tweetlinks }\n  end\n\nend\n{% endcodeblock %}\n\nEn el layout, indicaremos donde queremos que aparezca el componente de paginación. La gema *bootstrap-will_paginate* aplica los estilos de Twitter Bootstrap a paginación.\n\n{% codeblock lang:html %}\n<h1>Todos los links de @objectivec_es</h1>\n<%= will_paginate @tweetlinks %>\n<div id=\"container\">\n  <% @tweetlinks.each do |tweetlink| %>\n    <blockquote>\n      <%= image_tag tweetlink.profile_image %>\n      <%= tweetlink.screen_name %> wrote at\n      <%= l DateTime.parse(tweetlink.tweet_created_at), :format => :long %>\n      <p><%= auto_link(tweetlink.content).html_safe %></p>\n    </blockquote>\n  <% end %>\n</div>\n<%= will_paginate @tweetlinks %>\n{% endcodeblock %}\n\nY listo, podríamos seguir incluyendo muchas mejoras y posiblemente es lo que haga en los próximos días pero por el momento... esto es todo.\n\nEl código fuente lo puedes encontrar en [Github](https://github.com/jmoreno/URLHunter/tree/GitHub)\n\n## ACTUALIZACIÓN 12/03/2013\n\nHe corregido los fragmentos de código que erán erróneos. En la siguiente entrada tenéis una explicación de los errores. Disculpad las molestias.\n\n\n\n[1]: http://railscasts.com \"Railscasts\"\n[2]: http://twitter.com/objectivec_es \"@ObjectiveC_es\"","html":"<p>Vamos a demostrar que no hace falta ser un figura para hacer algo muy util y aparente. Vaya por delante que, si somos capaces de hacer esto es porque existen páginas como las de <a href=\"http://railscasts.com\" title=\"Railscasts\">Railscasts</a>.<br>\nLo primero que hacemos después de crear nuestro nuevo proyecto Rails es instalar las gemas necesarias para trabajar con Twitter Bootstrap, del que somos fans.</p>\n\n<p>{% codeblock lang:ruby %}\ngem &#39;therubyracer&#39;\ngem &#39;less-rails&#39;\ngem &#39;twitter-bootstrap-rails&#39;\n{% endcodeblock %}</p>\n\n<!--more-->\n\n<p>Después de cargar las gemas en nuestro proyecto con Bundle Install, terminamos de instalar Bootstrap en nuestro proyecto con la siguiente instrucción:</p>\n\n<p>{% codeblock lang:ruby %}\nrake g bootstrap:install\n{% endcodeblock %}</p>\n\n<p>El propósito de nuestra aplicación es mostrar un listado de los tweets de <a href=\"http://twitter.com/objectivec_es\" title=\"@ObjectiveC_es\">@objectivec_es</a> que contienen una url. De esta forma tendremos agrupados en una web toda esa información tan interesante que van soltando a nuestro timeline y que muchas veces perdemos por no hacer un favorito a tiempo. Dicho esto, de primeras lo que vamos a necesitar es una página en la que mostraremos información procedente del API de Twitter.</p>\n\n<p>Creamos un controlador para las páginas de contenido estático:</p>\n\n<p>{% codeblock lang:ruby %}\nrake g controller StaticPages home help\n{% endcodeblock %}</p>\n\n<p>Y hacemos algunos ajuste en el <em>layout</em> general para empezar a beneficiarnos de Twitter Bootstrap</p>\n\n<p>{% codeblock lang:html %}\n&lt;!DOCTYPE html&gt;\n<html>\n<head>\n  <title>URLHunter</title>\n  &lt;!--[if lt IE 9]&gt;\n  <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\" type=\"text/javascript\"></script>\n  &lt;![endif]--&gt;\n  &lt;%= stylesheet<em>link</em>tag    &quot;application&quot;, :media =&gt; &quot;all&quot; %&gt;\n  &lt;%= javascript<em>include</em>tag &quot;application&quot; %&gt;\n  &lt;%= csrf<em>meta</em>tags %&gt;\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n</head>\n<body>\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"span9\">&lt;%= yield %&gt;</div>\n    <div class=\"span3\">\n      <h2>¿Por qué?</h2>\n      <p>Porque alguien tenía que hacerlo. Si no, Twitter volvería a cambiar su API para eliminar la funcionalidad de favoritos.</p>\n    </div>\n  </div></div>\n</body>\n</html>\n{% endcodeblock %}</p>\n\n<h2>Accediendo al API de Twitter</h2>\n\n<p>Para recuperar el timelime de nuestra &quot;presa&quot; podemos desarrollar las llamadas que necesitemos o utilizar la gema &quot;Twitter&quot;. Siguiendo la filosfía DRY y como hay otras cosas mucho mejores que hacer, nosotros nos decantamos por la gema.</p>\n\n<p>{% codeblock lang:ruby %}\ngem &#39;twitter&#39;\n{% endcodeblock %}</p>\n\n<p>Antiguamente ya podríamos hacer algunas pruebas con la consola pero en los tiempos que corren hay que autenticarse. Para ello, siguiendo la documentación de la gema, hay que crear un fichero de inicialización en /config/initializers llamado twitter.rb:</p>\n\n<p>{% codeblock lang:ruby %}\nTwitter.configure do |config|\n  config.consumer<em>key = YOUR</em>CONSUMER<em>KEY\n  config.consumer</em>secret = YOUR<em>CONSUMER</em>SECRET\n  config.oauth<em>token = YOUR</em>OAUTH<em>TOKEN\n  config.oauth</em>token<em>secret = YOUR</em>OAUTH<em>TOKEN</em>SECRET\nend\n{% endcodeblock %}</p>\n\n<p>Una vez hayamos reemplazado los valores aplantillados con los que podemos encontrar en la sección de &quot;Mis applicaciones&quot; de la web de desarrolladores de Twitter ya estaremos en condiciones de empezar a consumir datos de Twitter.</p>\n\n<p>Inicialmente, vamos a probar que tal funciona todo incluyendo lo siguiente en el home.html.erb:</p>\n\n<p>{% codeblock lang:html %}\n<h1>Todos los links de @objectivec<em>es</h1>\n<div id=\"tweets-with-links\">\n  &lt;% Twitter.user</em>timeline(&quot;objectivec<em>es&quot;, :count =&gt; 10, :exclude</em>replies =&gt; true).each do |tweet| %&gt;\n    <blockquote> &lt;%= tweet.text %&gt; </blockquote>\n  &lt;% end %&gt;\n</div>\n{% endcodeblock %}</p>\n\n<p>¿Igualito que en iOS, eh? Bueno, cada uno tiene sus virtudes. En cualquier caso, aunque hemos obtenido rapidos resultados no podemos decir que sean <em>bonitos</em>. Lo suyo sería que los hashtags, las menciones y los links tuvieran los vinculos correspondientes. Para eso vamos a utilizar otra gema.</p>\n\n<p>{% codeblock lang:bash %}\ngem &#39;twitter-text&#39;\n{% endcodeblock %}</p>\n\n<p>Según la documentación de la gema, para <em>autolinkar</em> las entidades lo único que tenemos que hacer es lo siguiente:</p>\n\n<p>A <em>app/helpers/application_helper.rb</em> lo dejaremos de esta forma</p>\n\n<p>{% codeblock lang:ruby %}\nmodule ApplicationHelper\n  include Twitter::Autolink\nend\n{% endcodeblock %}</p>\n\n<p>Y en <em>home.html.erb</em> cambiaremos el contenido de la cita por lo siguiente:</p>\n\n<p>{% codeblock lang:html %}\n<blockquote> <p>&lt;%= auto<em>link(tweetlink.content).html</em>safe %&gt;</p> </blockquote>\n{% endcodeblock %}</p>\n\n<blockquote>\n<p>Es necesario poner html_safe al final para que Rails interprete que le estamos pasando un texto que contiene etiquetas HTML, si no lo hicieramos las etiquetas se pintarían como si fuera texto plano.</p>\n</blockquote>\n\n<p>Si recargamos ahora la página veremos todos los tweets con enlaces a los usuarios mencionados, a los hasgtags... Como diría Duke Nukem: &quot;Ah!, much better!!!&quot;</p>\n\n<p>Lo siguiente que vamos a hacer es almacenar los tweets en base de datos. ¿Por qué?, pues por varios motivos:</p>\n\n<ul>\n<li>No queremos perder ni una sola de estas píldoras de información</li>\n<li>Ahora no son muchos pero cuando los chicos de <a href=\"http://twitter.com/objectivec_es\" title=\"@ObjectiveC_es\">@ObjectiveC_es</a> vayan por los 3000 tweets esta web tardará bastante más en cargar</li>\n<li>En esta vida, no eres nadie si no haces un poco de persistencia.</li>\n</ul>\n\n<p>Así que crearemos un modelo para almacenar algunos datos. Inicialmente será muy sencillo, ya lo complicaremos más adelante:</p>\n\n<p>{% codeblock lang:bash %}\nrails g model tweetlink tweet<em>id screen</em>name content:text profile<em>image tweet</em>created_at\n{% endcodeblock %}</p>\n\n<p>e incluiremos algunos métodos de conveniencia en la nueva clase:</p>\n\n<p>{% codeblock lang:ruby %}\nclass Tweetlink &lt; ActiveRecord::Base\n  attr<em>accessible :content, :screen</em>name, :tweet<em>id, :profile</em>image, :tweet<em>created</em>at</p>\n\n<p>def self.first<em>time\n    Twitter.user</em>timeline(&quot;objectivec<em>es&quot;, :count =&gt; 3200, :exclude</em>replies =&gt; true).each do |tweet|\n      insert_tweet(tweet)\n    end\n  end</p>\n\n<p>def self.pull<em>tweets\n    Twitter.user</em>timeline(&quot;objectivec<em>es&quot;, :count =&gt; 200, :exclude</em>replies =&gt; true, :since<em>id =&gt; maximum(:tweet</em>id)).each do |tweet|\n      insert_tweet(tweet)\n    end\n  end</p>\n\n<p>def self.insert<em>tweet(tweet)\n   unless exists?(tweet</em>id: tweet.id)\n     if tweet.retweet?\n       tweet = tweet.retweeted<em>status\n     end\n     if tweet.urls.any?\n       create!(\n           tweet</em>id: tweet.id,\n           content: tweet.text,\n           screen<em>name: tweet.user.screen</em>name,\n           profile<em>image: tweet.user.profile</em>image<em>url,\n           tweet</em>created<em>at: tweet.created</em>at,\n       )\n     end\n   end\n  end\nend\n{% endcodeblock %}</p>\n\n<p>A continuación, tendremos que cambiar el controlador y la vista ya que ahora mismo todavía están recuperando la información directamente desde el API.</p>\n\n<p>El metodo <em>home</em> quedará de la siguiente manera:</p>\n\n<p>{% codeblock lang:ruby %}\ndef home</p>\n\n<p>@tweetlinks = Tweetlink.all</p>\n\n<p>@tweetlinks.empty? ? Tweetlink.first<em>time : Tweetlink.pull</em>tweets</p>\n\n<p>respond_to do |format|\n    format.html # index.html.erb\n    format.json { render json: @tweetlinks }\n  end</p>\n\n<p>end\n{% endcodeblock %}</p>\n\n<p>Y la vista de esta otra forma:</p>\n\n<p>{% codeblock lang:html %}\n<h1>Todos los links de @objectivec<em>es</h1>\n<div id=\"tweets-with-links\">\n  &lt;% @tweetlinks.each do |tweetlink| %&gt;\n    <blockquote>\n      &lt;%= image</em>tag tweetlink.profile<em>image %&gt;\n      &lt;%= tweetlink.screen</em>name %&gt; wrote at\n      &lt;%= l DateTime.parse(tweetlink.tweet<em>created</em>at), :format =&gt; :long %&gt;\n      <p>&lt;%= auto<em>link(tweetlink.content).html</em>safe %&gt;</p>\n    </blockquote>\n  &lt;% end %&gt;\n</div>\n{% endcodeblock %}</p>\n\n<p>Para terminar vamos a incluir paginación, esto reducirá el tiempo de carga de la página y mejorará la usabilidad. Otra vez más, podriamos escribir todo el código necesario para montar una paginación pero con un par de gemas lo podemos dejar solucionado:</p>\n\n<p>{% codeblock lang:ruby %}\ngem &#39;will<em>paginate&#39;\ngem &#39;bootstrap-will</em>paginate&#39;\n{% endcodeblock %}</p>\n\n<p>La gema <em>will_paginate</em> es la que se encarga de la gestión de la paginación. Lo único que tendremos que hacer es cambiar el número de registros que recuperamos de la clase Tweetlink en el controlador. En lugar de <em>all</em> usaremos <em>paginate</em>:</p>\n\n<p>{% codeblock lang:ruby %}\ndef home</p>\n\n<p>@tweetlinks = Tweetlink.paginate(page: params[:page])</p>\n\n<p>@tweetlinks.empty? ? Tweetlink.first<em>time : Tweetlink.pull</em>tweets</p>\n\n<p>respond_to do |format|\n    format.html # index.html.erb\n    format.json { render json: @tweetlinks }\n  end</p>\n\n<p>end\n{% endcodeblock %}</p>\n\n<p>En el layout, indicaremos donde queremos que aparezca el componente de paginación. La gema <em>bootstrap-will_paginate</em> aplica los estilos de Twitter Bootstrap a paginación.</p>\n\n<p>{% codeblock lang:html %}\n<h1>Todos los links de @objectivec<em>es</h1>\n&lt;%= will</em>paginate @tweetlinks %&gt;\n<div id=\"container\">\n  &lt;% @tweetlinks.each do |tweetlink| %&gt;\n    <blockquote>\n      &lt;%= image<em>tag tweetlink.profile</em>image %&gt;\n      &lt;%= tweetlink.screen<em>name %&gt; wrote at\n      &lt;%= l DateTime.parse(tweetlink.tweet</em>created<em>at), :format =&gt; :long %&gt;\n      <p>&lt;%= auto</em>link(tweetlink.content).html<em>safe %&gt;</p>\n    </blockquote>\n  &lt;% end %&gt;\n</div>\n&lt;%= will</em>paginate @tweetlinks %&gt;\n{% endcodeblock %}</p>\n\n<p>Y listo, podríamos seguir incluyendo muchas mejoras y posiblemente es lo que haga en los próximos días pero por el momento... esto es todo.</p>\n\n<p>El código fuente lo puedes encontrar en <a href=\"https://github.com/jmoreno/URLHunter/tree/GitHub\">Github</a></p>\n\n<h2>ACTUALIZACIÓN 12/03/2013</h2>\n\n<p>He corregido los fragmentos de código que erán erróneos. En la siguiente entrada tenéis una explicación de los errores. Disculpad las molestias.</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1362966180000,"created_by":1,"updated_at":1362966180000,"updated_by":1,"published_at":1362966180000,"published_by":1},{"id":15,"title":"Resacón en Heroku","slug":"resacon-en-heroku","markdown":"Como era de esperar, el debut de [URLHunter](http://urlhunter-314159.herokuapp.com) ha tenido alguna incidencia.   \nEn un primer momento pensé que todo era provocado por unos cambios de ultima hora que tuve que hacer en los tipos de campo de la entidad _Tweetlinks_ al pasar de SQLite a PostgreSQL pero no, el problema ha sido de programador despistado.\n\n<!--more-->\n      \t\nEste es el método que se encarga de la grabación de los tweets en el modelo. Según el API de Twitter, cada tweet retweeteado estará contenido dentro de otro tweet. El tweet _padre_ siempre pertenecerá al usuario que hace el retweet mientras que la información original estará en el anidado. Esta es la razón por la que al preguntar si el tweet es en realidad un retweet hay que hacer una sustitución del objeto _tweet_. El problema ha sido que la comprobación de que el tweet_id no existe en la tabla se hacía antes del cambio por lo que, en realidad, el que se terminaba grabando siempre era otro.\n\n{% codeblock lang:ruby %}\ndef self.insert_tweet(tweet)\n unless exists?(tweet_id: tweet.id)\n   if tweet.retweet?\n     tweet = tweet.retweeted_status\n   end\n   if tweet.urls.any?\n     create!(\n         tweet_id: tweet.id,\n         content: tweet.text,\n         screen_name: tweet.user.screen_name,\n         profile_image: tweet.user.profile_image_url,\n         tweet_created_at: tweet.created_at,\n     )\n   end\n end\nend\n{% endcodeblock %}\n\nEste sería el código correcto:\n\n{% codeblock lang:ruby %}\ndef self.insert_tweet(tweet)\n if tweet.retweet?\n   tweet = tweet.retweeted_status\n end\n unless exists?(tweet_id: tweet.id)\n   if tweet.urls.any?\n     create!(\n         tweet_id: tweet.id,\n         content: tweet.text,\n         screen_name: tweet.user.screen_name,\n         profile_image: tweet.user.profile_image_url,\n         tweet_created_at: tweet.created_at,\n     )\n   end\n end\nend\n{% endcodeblock %}\n\nA veces sucede que un error compensa a otro error y esto es lo que ha pasado esta vez. Al incluir la paginación, se me olvido incluir un criterio de ordenación en la query correspondiente. Debido a esto, el orden de presentación era por inserción (ascendente). En la carga inicial se recuperan 200 tweets pero se empiezan a insertar de más reciente a más antiguo. Posteriormente, cada llamada a la página recupera los nuevos tweets y si corresponde insertarlos los inserta.     \nA lo largo de la mañana se podía ver como el número de páginas iba subiendo de seis hasta once que es a lo que ha llegado hasta que he podido hacer un pequeño arreglo en Heroku. Básicamente las cinco nuevas páginas contenían el mismo tweet, en concreto el RT de mi tweet de presentación... vamos un debut lamentable ;-)\n\n{% codeblock lang:ruby %}\ndef home\n\n  @tweetlinks = Tweetlink.paginate(page: params[:page])\n\n  @tweetlinks.empty? ? Tweetlink.first_time : Tweetlink.pull_tweets\n\n  respond_to do |format|\n    format.html # index.html.erb\n    format.json { render json: @tweetlinks }\n  end\n\nend\n{% endcodeblock %}\n\nEste sería la forma correcta:\n\n{% codeblock lang:ruby %}\ndef home\n\n  @tweetlinks = Tweetlink.paginate(page: params[:page]).order('tweet_id DESC')\n\n  @tweetlinks.empty? ? Tweetlink.first_time : Tweetlink.pull_tweets\n\n  respond_to do |format|\n    format.html # index.html.erb\n    format.json { render json: @tweetlinks }\n  end\n\nend\n{% endcodeblock %}\n\n## ¿Cómo lo he podido arreglar sin tocar el código?\n\nUna vez identificado el problema, y viendo que los amigos de [@ObjectiveC_es](http://twitter.com/ObjectiveC_es) habían tweeteado algún enlace más lo único que había que hacer era hacer un rollback de la base de datos, borrarla completamente y volverla a crear. La primera carga de la base de datos recuperaría hasta un tweet normal y mientras no hicieran otro retweet de un enlace no se volvería a producir el problema.\n\nPor los pelos, la próxima vez seré más prudente y hare una beta. :-)\n\n","html":"<p>Como era de esperar, el debut de <a href=\"http://urlhunter-314159.herokuapp.com\">URLHunter</a> ha tenido alguna incidencia.<br>\nEn un primer momento pensé que todo era provocado por unos cambios de ultima hora que tuve que hacer en los tipos de campo de la entidad <em>Tweetlinks</em> al pasar de SQLite a PostgreSQL pero no, el problema ha sido de programador despistado.</p>\n\n<!--more-->\n\n<p>Este es el método que se encarga de la grabación de los tweets en el modelo. Según el API de Twitter, cada tweet retweeteado estará contenido dentro de otro tweet. El tweet <em>padre</em> siempre pertenecerá al usuario que hace el retweet mientras que la información original estará en el anidado. Esta es la razón por la que al preguntar si el tweet es en realidad un retweet hay que hacer una sustitución del objeto <em>tweet</em>. El problema ha sido que la comprobación de que el tweet_id no existe en la tabla se hacía antes del cambio por lo que, en realidad, el que se terminaba grabando siempre era otro.</p>\n\n<p>{% codeblock lang:ruby %}\ndef self.insert<em>tweet(tweet)\n unless exists?(tweet</em>id: tweet.id)\n   if tweet.retweet?\n     tweet = tweet.retweeted<em>status\n   end\n   if tweet.urls.any?\n     create!(\n         tweet</em>id: tweet.id,\n         content: tweet.text,\n         screen<em>name: tweet.user.screen</em>name,\n         profile<em>image: tweet.user.profile</em>image<em>url,\n         tweet</em>created<em>at: tweet.created</em>at,\n     )\n   end\n end\nend\n{% endcodeblock %}</p>\n\n<p>Este sería el código correcto:</p>\n\n<p>{% codeblock lang:ruby %}\ndef self.insert<em>tweet(tweet)\n if tweet.retweet?\n   tweet = tweet.retweeted</em>status\n end\n unless exists?(tweet<em>id: tweet.id)\n   if tweet.urls.any?\n     create!(\n         tweet</em>id: tweet.id,\n         content: tweet.text,\n         screen<em>name: tweet.user.screen</em>name,\n         profile<em>image: tweet.user.profile</em>image<em>url,\n         tweet</em>created<em>at: tweet.created</em>at,\n     )\n   end\n end\nend\n{% endcodeblock %}</p>\n\n<p>A veces sucede que un error compensa a otro error y esto es lo que ha pasado esta vez. Al incluir la paginación, se me olvido incluir un criterio de ordenación en la query correspondiente. Debido a esto, el orden de presentación era por inserción (ascendente). En la carga inicial se recuperan 200 tweets pero se empiezan a insertar de más reciente a más antiguo. Posteriormente, cada llamada a la página recupera los nuevos tweets y si corresponde insertarlos los inserta.<br>\nA lo largo de la mañana se podía ver como el número de páginas iba subiendo de seis hasta once que es a lo que ha llegado hasta que he podido hacer un pequeño arreglo en Heroku. Básicamente las cinco nuevas páginas contenían el mismo tweet, en concreto el RT de mi tweet de presentación... vamos un debut lamentable ;-)</p>\n\n<p>{% codeblock lang:ruby %}\ndef home</p>\n\n<p>@tweetlinks = Tweetlink.paginate(page: params[:page])</p>\n\n<p>@tweetlinks.empty? ? Tweetlink.first<em>time : Tweetlink.pull</em>tweets</p>\n\n<p>respond_to do |format|\n    format.html # index.html.erb\n    format.json { render json: @tweetlinks }\n  end</p>\n\n<p>end\n{% endcodeblock %}</p>\n\n<p>Este sería la forma correcta:</p>\n\n<p>{% codeblock lang:ruby %}\ndef home</p>\n\n<p>@tweetlinks = Tweetlink.paginate(page: params[:page]).order(&#39;tweet_id DESC&#39;)</p>\n\n<p>@tweetlinks.empty? ? Tweetlink.first<em>time : Tweetlink.pull</em>tweets</p>\n\n<p>respond_to do |format|\n    format.html # index.html.erb\n    format.json { render json: @tweetlinks }\n  end</p>\n\n<p>end\n{% endcodeblock %}</p>\n\n<h2>¿Cómo lo he podido arreglar sin tocar el código?</h2>\n\n<p>Una vez identificado el problema, y viendo que los amigos de <a href=\"http://twitter.com/ObjectiveC_es\">@ObjectiveC_es</a> habían tweeteado algún enlace más lo único que había que hacer era hacer un rollback de la base de datos, borrarla completamente y volverla a crear. La primera carga de la base de datos recuperaría hasta un tweet normal y mientras no hicieran otro retweet de un enlace no se volvería a producir el problema.</p>\n\n<p>Por los pelos, la próxima vez seré más prudente y hare una beta. :-)</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1363050900000,"created_by":1,"updated_at":1363050900000,"updated_by":1,"published_at":1363050900000,"published_by":1},{"id":16,"title":"Send to Kindle Para Octopress","slug":"send-to-kindle-para-octopress","markdown":"Cuando escribí la [_oda_ a Octopress](/blog/2013/03/08/como-mola-octopress/) comenté que me sentía más comodo con Ruby para tocar diversas partes del código del blog, como por ejemplo los plugins. En esta entrada voy a aprovechar la noticia del botón de [enviar a kindle](http://www.genbeta.com/web/amazon-lanza-su-boton-para-enviar-contenido-al-kindle-desde-un-sitio-web) para que veáis lo fácil que es hacer un plugin.\n\n<!--more-->\n      \t\nEn primer lugar, vamos a ir a la página de Amazon donde [configuramos el botón](http://www.amazon.com/gp/sendtokindle/developers/button) a nuestro gusto y generamos el widget. Según esta página, tendríamos que seguir dos sencillos pasos para poner el botón en nuestra web: \n\n1. Insertar un script antes del cierre de la etiqueta _body_.\n2. Insertar un trozo de HTML en el lugar donde queremos que aparezca el botón.\n\nLo que nosotros queremos es que el botón aparezca al final de nuestras entradas, junto con los botones de Karmacracy, Twitter, Facebook y Google+. En primer lugar, crearemos una variable *send_to_kindle* en el fichero _config.yml.\n\n{% codeblock lang:yml %}\n# Send To Kindle Button\nsend_to_kindle: true\n{% endcodeblock %}\n\nDe esta forma, podremos elegir poner o no el botón en nuestro blog.\n\nOctopress viene de serie con opciones para compartir en Twitter, Facebook, Google+, etc. El fichero donde están recogidas las diferentes opciones se llama _sharing.html_ y se encuentra en source/_includes/post/sharing.html. En este fichero es donde insertaremos el fragmento HTML del paso 2:\n\n{% codeblock lang:html %}\n{ % if site.send_to_kindle %}\n  <div class=\"kindleWidget\" style=\"display:inline-block;padding:3px;cursor:pointer;font-size:11px;font-family:Arial;border-radius:3px;border:#ccc thin solid;color:black;background:transparent url('https://d1xnn692s7u6t6.cloudfront.net/button-gradient.png') repeat-x;background-size:contain;\">\n  \t<img style=\"vertical-align:middle;\" src=\"https://d1xnn692s7u6t6.cloudfront.net/black-15.png\" />\n  \t<span style=\"vertical-align:middle;margin-left:3px;\">Send to Kindle</span>\n  </div>\n{ % endif %}\n{% endcodeblock %}\n\nCreo que lo que está pasando aquí es fácil de entender: solo si la variable global *send_to_kindle* esta configurada como true, se inyectará el fragmento HTML.\n> Una aclaración. El uso de variables, condiciones, etc en Jekyll se realiza encerrando los trozos de código entre llave-porcentaje y porcentaje-llave. En el snippet anterior he escrito { % para que pudierais verlo porque de lo contrario, al generar esta entrada Jekyll habría interpretado que estaba intentando evaluar alguna condición y no lo habría mostrado. Si lo váis a copiar y pegar, acordaros de quitar el espacio entre { y %.\n\nBueno, ya solo nos falta incluir el script al final del body de nuestra página. Ahora vamos a ver lo bien organizado que está todo en Octopress: en la carpeta source/\\_includes hay un archivo que se llama *after\\_footer.html*. Cuando lo editamos vemos que contiene _includes_ de ficheros llamados google\\_plus\\_one.html, twitter\\_sharing.html, etc. Estos ficheros están en la misma carpeta y al abrirlos podemos ver que contienen los scripts necesarios para los botónes de Google+, Twitter, etc. \nVamos a crear un nuevo fichero en esta misma carpeta llamado send\\_to\\_kindle.html y en el incluiremos el script que nos indican en Amazon que hay que poner al final del body. Nuevamente, evaluaremos si la variable para incluir el botón está a true:\n\n{% codeblock lang:html %}\n{ % if site.send_to_kindle %}\n<script type=\"text/javascript\" src=\"https://d1xnn692s7u6t6.cloudfront.net/widget.js\"></script>\n<script type=\"text/javascript\">(function k(){window.$SendToKindle&&window.$SendToKindle.Widget?$SendToKindle.Widget.init({}):setTimeout(k,500);})();</script>\n{ % endif %}\n{% endcodeblock %}\n\nY en el archivo *after\\_footer.html* incluiremos el nuevo html que acabamos de crear:\n\n{% codeblock lang:html %}\n{ % include send_to_kindle.html %}\n{% endcodeblock %}\n\nListo, si ahora generamos y previsualizamos nuestro blog podremos ver un botón al final de cada artículo para enviar el contenido al kindle.\n\nComo véis, todo es muy intuitivo. Con un poco de sentido común y navegando por las carpetas del blog para ver como funcionan los plugins que vienen de serie podemos ir dejando Octopress a nuestro gusto.\n\nPd: No me gusta como queda el botón, sale más alto de lo que se previsualiza en el sitio de Amazón. Mis conocimientos de css, javascript y html son bastante limitados por lo que no estoy seguro de si es algo que podamos corregir o si por el contrario está así en el widget.js y no podemos hacer nada. Tampoco me gusta que el botón de Karmacracy salga en una linea aparte pero son esas cosas que no he conseguido arreglar. Si vosotros habéis conseguido dejarlo mejor... decidme como!!!! \n","html":"<p>Cuando escribí la <a href=\"/blog/2013/03/08/como-mola-octopress/\"><em>oda</em> a Octopress</a> comenté que me sentía más comodo con Ruby para tocar diversas partes del código del blog, como por ejemplo los plugins. En esta entrada voy a aprovechar la noticia del botón de <a href=\"http://www.genbeta.com/web/amazon-lanza-su-boton-para-enviar-contenido-al-kindle-desde-un-sitio-web\">enviar a kindle</a> para que veáis lo fácil que es hacer un plugin.</p>\n\n<!--more-->\n\n<p>En primer lugar, vamos a ir a la página de Amazon donde <a href=\"http://www.amazon.com/gp/sendtokindle/developers/button\">configuramos el botón</a> a nuestro gusto y generamos el widget. Según esta página, tendríamos que seguir dos sencillos pasos para poner el botón en nuestra web: </p>\n\n<ol>\n<li>Insertar un script antes del cierre de la etiqueta <em>body</em>.</li>\n<li>Insertar un trozo de HTML en el lugar donde queremos que aparezca el botón.</li>\n</ol>\n\n<p>Lo que nosotros queremos es que el botón aparezca al final de nuestras entradas, junto con los botones de Karmacracy, Twitter, Facebook y Google+. En primer lugar, crearemos una variable <em>send<em>to</em>kindle</em> en el fichero _config.yml.</p>\n\n<p>{% codeblock lang:yml %}</p>\n\n<h1>Send To Kindle Button</h1>\n\n<p>send<em>to</em>kindle: true\n{% endcodeblock %}</p>\n\n<p>De esta forma, podremos elegir poner o no el botón en nuestro blog.</p>\n\n<p>Octopress viene de serie con opciones para compartir en Twitter, Facebook, Google+, etc. El fichero donde están recogidas las diferentes opciones se llama <em>sharing.html</em> y se encuentra en source/_includes/post/sharing.html. En este fichero es donde insertaremos el fragmento HTML del paso 2:</p>\n\n<p>{% codeblock lang:html %}\n{ % if site.send<em>to</em>kindle %}\n  <div class=\"kindleWidget\" style=\"display:inline-block;padding:3px;cursor:pointer;font-size:11px;font-family:Arial;border-radius:3px;border:#ccc thin solid;color:black;background:transparent url('https://d1xnn692s7u6t6.cloudfront.net/button-gradient.png') repeat-x;background-size:contain;\">\n    <img style=\"vertical-align:middle;\" src=\"https://d1xnn692s7u6t6.cloudfront.net/black-15.png\" />\n    <span style=\"vertical-align:middle;margin-left:3px;\">Send to Kindle</span>\n  </div>\n{ % endif %}\n{% endcodeblock %}</p>\n\n<p>Creo que lo que está pasando aquí es fácil de entender: solo si la variable global <em>send<em>to</em>kindle</em> esta configurada como true, se inyectará el fragmento HTML.</p>\n\n<blockquote>\n<p>Una aclaración. El uso de variables, condiciones, etc en Jekyll se realiza encerrando los trozos de código entre llave-porcentaje y porcentaje-llave. En el snippet anterior he escrito { % para que pudierais verlo porque de lo contrario, al generar esta entrada Jekyll habría interpretado que estaba intentando evaluar alguna condición y no lo habría mostrado. Si lo váis a copiar y pegar, acordaros de quitar el espacio entre { y %.</p>\n</blockquote>\n\n<p>Bueno, ya solo nos falta incluir el script al final del body de nuestra página. Ahora vamos a ver lo bien organizado que está todo en Octopress: en la carpeta source/_includes hay un archivo que se llama <em>after_footer.html</em>. Cuando lo editamos vemos que contiene <em>includes</em> de ficheros llamados google_plus_one.html, twitter_sharing.html, etc. Estos ficheros están en la misma carpeta y al abrirlos podemos ver que contienen los scripts necesarios para los botónes de Google+, Twitter, etc. \nVamos a crear un nuevo fichero en esta misma carpeta llamado send_to_kindle.html y en el incluiremos el script que nos indican en Amazon que hay que poner al final del body. Nuevamente, evaluaremos si la variable para incluir el botón está a true:</p>\n\n<p>{% codeblock lang:html %}\n{ % if site.send<em>to</em>kindle %}\n<script type=\"text/javascript\" src=\"https://d1xnn692s7u6t6.cloudfront.net/widget.js\"></script>\n<script type=\"text/javascript\">(function k(){window.$SendToKindle&amp;&amp;window.$SendToKindle.Widget?$SendToKindle.Widget.init({}):setTimeout(k,500);})();</script>\n{ % endif %}\n{% endcodeblock %}</p>\n\n<p>Y en el archivo <em>after_footer.html</em> incluiremos el nuevo html que acabamos de crear:</p>\n\n<p>{% codeblock lang:html %}\n{ % include send<em>to</em>kindle.html %}\n{% endcodeblock %}</p>\n\n<p>Listo, si ahora generamos y previsualizamos nuestro blog podremos ver un botón al final de cada artículo para enviar el contenido al kindle.</p>\n\n<p>Como véis, todo es muy intuitivo. Con un poco de sentido común y navegando por las carpetas del blog para ver como funcionan los plugins que vienen de serie podemos ir dejando Octopress a nuestro gusto.</p>\n\n<p>Pd: No me gusta como queda el botón, sale más alto de lo que se previsualiza en el sitio de Amazón. Mis conocimientos de css, javascript y html son bastante limitados por lo que no estoy seguro de si es algo que podamos corregir o si por el contrario está así en el widget.js y no podemos hacer nada. Tampoco me gusta que el botón de Karmacracy salga en una linea aparte pero son esas cosas que no he conseguido arreglar. Si vosotros habéis conseguido dejarlo mejor... decidme como!!!! </p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1363908900000,"created_by":1,"updated_at":1363908900000,"updated_by":1,"published_at":1363908900000,"published_by":1},{"id":17,"title":"Variables De Entorno en Rails","slug":"variables-de-entorno-en-rails","markdown":"Cuando terminé la primera versión de URLHunter, tenía claro que compartir el código fuente del proyecto era básico. Principalmente por dos razones:     \nPrimero, porque que se aprende mucho viendo el código, quizá mas que siguiendo un tutorial.  \nSegundo, porque me encantaría que la gente clonara el proyecto, hiciera forks, pull requests y enriqueciera URLHunter con sus aportaciones individuales.\n\nCuando lo iba a subir a GitHub caí en la cuenta de que los _tokens_, _consumer\\_keys_, etc de Twitter los iba a poder ver cualquiera que echara un vistazo al fichero _twitter.rb_ y no solo eso, si en el futuro decidía incluir un formulario de contacto, integrar New Relic o Google Analytics los usuarios, contraseñas, identificadores únicos serían visibles para todo el mundo. Fue entonces cuando vi la importancia de las *_variables de entorno_* a las que hacían referencia en la documentación de la gema de Twitter.     \n\n<!--more-->\n\nEl caso es que, por no hacerlo de primeras, para subir el repositorio a GitHub tuve que crear una rama nueva, cambiar los ficheros, asegurarme de que la rama principal nunca se sincronizaría con GitHub, etc. El problema añadido a esto es que todas los cambios que he ido haciendo al proyecto no los he podido sincronizar con la rama GitHub por falta de tiempo (o pereza, según se mire). En fin, que antes de que la cosa se complicará más había que actuar así que buscando un poco en internet he encontrado [este tutorial](http://railsapps.github.com/rails-environment-variables.html) que es el que voy a seguir para ocultar la información confidencial del proyecto.\n\nLa opción que he decidido desarrollar es la tercera, tiene un poco más de trabajo a la hora de desplegar en Heroku pero no es muy significativo.\n\nLo primero es crear el fichero _local\\_env.yml_ e incluirlo en _.gitignore_ para que no lo veáis jamás. ;-)\n\n{% codeblock /config/local_env.yml lang:yaml %}\n# Rename this file to local_env.yml\n# Add account settings and API keys here.\n# This file should be listed in .gitignore to keep your settings secret!\n# Each entry gets set as a local environment variable.\n# This file overrides ENV variables in the Unix shell.\n# For example, setting:\n# GMAIL_USERNAME: 'Your_Gmail_Username'\n# makes 'Your_Gmail_Username' available as ENV[\"GMAIL_USERNAME\"]\n\n# Twitter Variables\nCONSUMER_KEY: 'Your_Consumer_Key'\nCONSUMER_SECRET: 'Your_Consumer_Secret'\nOAUTH_TOKEN: 'Your_Oauth_Token'\nOAUTH_TOKEN_SECRET: 'Your_Oauth_Token_Secret'\n# New Relic Parameters\nNEW_RELIC_LICENSE_KEY: 'Your_New_Relic_License_Key'\n{% endcodeblock %}\n\nEn el fichero podéis ver como no solo he creado variables de entorno para Twitter si no también para New Relic, eso es porque al margen de los cambios en el estilo de URLHunter, el uso de los Tweets Embeds y algunas mejoras en la cache también he incluido New Relic para monitorizar su comportamiento y buscar formas de mejorar el rendimiento.\n\nAhora hay que incluir las variables de entorno en los ficheros correspondientes. El fichero de configuración _twitter.rb_ quedará de la siguiente manera:\n\n{% codeblock /config/initializers/twitter.rb lang:ruby %}\nTwitter.configure do |config|\n  config.consumer_key = ENV[\"CONSUMER_KEY\"]\n  config.consumer_secret = ENV[\"CONSUMER_SECRET\"]\n  config.oauth_token = ENV[\"OAUTH_TOKEN\"]\n  config.oauth_token_secret = ENV[\"OAUTH_TOKEN_SECRET\"]\nend\n{% endcodeblock %}\n\nY en el fichero de configuración de New Relic lo único que hay que tener en cuenta es que hay usar ruby embebido para nombra la variable de entorno:\n\n{% codeblock /config/newrelic.yml lang:yaml %}\n  # You must specify the license key associated with your New Relic\n  # account.  This key binds your Agent's data to your account in the\n  # New Relic service.\n  license_key: <%= ENV['NEW_RELIC_LICENSE_KEY'] %>\n{% endcodeblock %}\n\n## Cargando las variables de entorno.\n\nPara que la aplicación cargue las variables de entorno, tendremos que indicarle en el fichero de configuración que lo primero que tiene que hacer, antes que configurar cualquier otro ajuste es cargar las variables de nuestro fichero. Esto lo tendremos que hacer en el fichero _application.rb_:\n\n{% codeblock /config/application.rb lang:ruby %}\n    # Load the environment variables at beginning\n    config.before_configuration do\n      env_file = File.join(Rails.root, 'config', 'local_env.yml')\n      YAML.load(File.open(env_file)).each do |key, value|\n        ENV[key.to_s] = value\n      end if File.exists?(env_file)\n    end\n{% endcodeblock %}\n\nSi hemos hecho todo esto correctamente, al ejecutar la aplicación en local todo debería funcionar perfectamente. El problema nos lo vamos a encontrar cuando despleguemos en Heroku. Heroku se apoya en el fichero git de nuestro proyecto para tomar toda la información. Del mismo modo que el fichero donde hemos incluido las variables de entorno no es visible en el repositorio (GitHub, Bitbucket,...) tampoco lo es para Heroku por lo que las variables de entorno nunca se cargarán al iniciar la aplicación. Hemos de cargar estas variables de forma manual.\n\n{% codeblock Carga de variables de entorno en Heroku lang:bash %}\n$ heroku config:add CONSUMER_KEY='Your_Consumer_Key'\n{% endcodeblock %}\n\nPodemos hacer un fichero bash que ejecutaremos después de hacer el despliegue en heroku. Este script tendría la siguiente estructura:\n\n{% codeblock Script para cargar variables de entorno en Heroku heroku.sh lang:bash %}\nheroku config:add CONSUMER_KEY='Your_Consumer_Key' CONSUMER_SECRET='Your_Consumer_Secret' OAUTH_TOKEN='Your_Oauth_Token' OAUTH_TOKEN_SECRET='Your_Oauth_Token_Secret' NEW_RELIC_LICENSE_KEY='Your_New_Relic_License_Key';\nheroku info --app urlhunter-314159;\n{% endcodeblock %}\n\nY lo ejecutamos escribiendo en el terminal:\n\n{% codeblock Script para cargar variables de entorno en Heroku lang:bash %}\n$ sh heroku.sh\n{% endcodeblock %}\n\nListo. Ya podemos compartir el código fuente del proyecto sin temor a que nadie pueda hacer uso de nuestras claves de terceros.","html":"<p>Cuando terminé la primera versión de URLHunter, tenía claro que compartir el código fuente del proyecto era básico. Principalmente por dos razones:<br>\nPrimero, porque que se aprende mucho viendo el código, quizá mas que siguiendo un tutorial.<br>\nSegundo, porque me encantaría que la gente clonara el proyecto, hiciera forks, pull requests y enriqueciera URLHunter con sus aportaciones individuales.</p>\n\n<p>Cuando lo iba a subir a GitHub caí en la cuenta de que los <em>tokens</em>, <em>consumer_keys</em>, etc de Twitter los iba a poder ver cualquiera que echara un vistazo al fichero <em>twitter.rb</em> y no solo eso, si en el futuro decidía incluir un formulario de contacto, integrar New Relic o Google Analytics los usuarios, contraseñas, identificadores únicos serían visibles para todo el mundo. Fue entonces cuando vi la importancia de las <em><em>variables de entorno</em></em> a las que hacían referencia en la documentación de la gema de Twitter.     </p>\n\n<!--more-->\n\n<p>El caso es que, por no hacerlo de primeras, para subir el repositorio a GitHub tuve que crear una rama nueva, cambiar los ficheros, asegurarme de que la rama principal nunca se sincronizaría con GitHub, etc. El problema añadido a esto es que todas los cambios que he ido haciendo al proyecto no los he podido sincronizar con la rama GitHub por falta de tiempo (o pereza, según se mire). En fin, que antes de que la cosa se complicará más había que actuar así que buscando un poco en internet he encontrado <a href=\"http://railsapps.github.com/rails-environment-variables.html\">este tutorial</a> que es el que voy a seguir para ocultar la información confidencial del proyecto.</p>\n\n<p>La opción que he decidido desarrollar es la tercera, tiene un poco más de trabajo a la hora de desplegar en Heroku pero no es muy significativo.</p>\n\n<p>Lo primero es crear el fichero <em>local_env.yml</em> e incluirlo en <em>.gitignore</em> para que no lo veáis jamás. ;-)</p>\n\n<p>{% codeblock /config/local_env.yml lang:yaml %}</p>\n\n<h1>Rename this file to local_env.yml</h1>\n\n<h1>Add account settings and API keys here.</h1>\n\n<h1>This file should be listed in .gitignore to keep your settings secret!</h1>\n\n<h1>Each entry gets set as a local environment variable.</h1>\n\n<h1>This file overrides ENV variables in the Unix shell.</h1>\n\n<h1>For example, setting:</h1>\n\n<h1>GMAIL<em>USERNAME: &#39;Your</em>Gmail_Username&#39;</h1>\n\n<h1>makes &#39;Your<em>Gmail</em>Username&#39; available as ENV[&quot;GMAIL_USERNAME&quot;]</h1>\n\n<h1>Twitter Variables</h1>\n\n<p>CONSUMER<em>KEY: &#39;Your</em>Consumer<em>Key&#39;\nCONSUMER</em>SECRET: &#39;Your<em>Consumer</em>Secret&#39;\nOAUTH<em>TOKEN: &#39;Your</em>Oauth<em>Token&#39;\nOAUTH</em>TOKEN<em>SECRET: &#39;Your</em>Oauth<em>Token</em>Secret&#39;</p>\n\n<h1>New Relic Parameters</h1>\n\n<p>NEW<em>RELIC</em>LICENSE<em>KEY: &#39;Your</em>New<em>Relic</em>License_Key&#39;\n{% endcodeblock %}</p>\n\n<p>En el fichero podéis ver como no solo he creado variables de entorno para Twitter si no también para New Relic, eso es porque al margen de los cambios en el estilo de URLHunter, el uso de los Tweets Embeds y algunas mejoras en la cache también he incluido New Relic para monitorizar su comportamiento y buscar formas de mejorar el rendimiento.</p>\n\n<p>Ahora hay que incluir las variables de entorno en los ficheros correspondientes. El fichero de configuración <em>twitter.rb</em> quedará de la siguiente manera:</p>\n\n<p>{% codeblock /config/initializers/twitter.rb lang:ruby %}\nTwitter.configure do |config|\n  config.consumer<em>key = ENV[&quot;CONSUMER</em>KEY&quot;]\n  config.consumer<em>secret = ENV[&quot;CONSUMER</em>SECRET&quot;]\n  config.oauth<em>token = ENV[&quot;OAUTH</em>TOKEN&quot;]\n  config.oauth<em>token</em>secret = ENV[&quot;OAUTH<em>TOKEN</em>SECRET&quot;]\nend\n{% endcodeblock %}</p>\n\n<p>Y en el fichero de configuración de New Relic lo único que hay que tener en cuenta es que hay usar ruby embebido para nombra la variable de entorno:</p>\n\n<p>{% codeblock /config/newrelic.yml lang:yaml %}\n  # You must specify the license key associated with your New Relic\n  # account.  This key binds your Agent&#39;s data to your account in the\n  # New Relic service.\n  license<em>key: &lt;%= ENV[&#39;NEW</em>RELIC<em>LICENSE</em>KEY&#39;] %&gt;\n{% endcodeblock %}</p>\n\n<h2>Cargando las variables de entorno.</h2>\n\n<p>Para que la aplicación cargue las variables de entorno, tendremos que indicarle en el fichero de configuración que lo primero que tiene que hacer, antes que configurar cualquier otro ajuste es cargar las variables de nuestro fichero. Esto lo tendremos que hacer en el fichero <em>application.rb</em>:</p>\n\n<p>{% codeblock /config/application.rb lang:ruby %}\n    # Load the environment variables at beginning\n    config.before<em>configuration do\n      env</em>file = File.join(Rails.root, &#39;config&#39;, &#39;local<em>env.yml&#39;)\n      YAML.load(File.open(env</em>file)).each do |key, value|\n        ENV[key.to<em>s] = value\n      end if File.exists?(env</em>file)\n    end\n{% endcodeblock %}</p>\n\n<p>Si hemos hecho todo esto correctamente, al ejecutar la aplicación en local todo debería funcionar perfectamente. El problema nos lo vamos a encontrar cuando despleguemos en Heroku. Heroku se apoya en el fichero git de nuestro proyecto para tomar toda la información. Del mismo modo que el fichero donde hemos incluido las variables de entorno no es visible en el repositorio (GitHub, Bitbucket,...) tampoco lo es para Heroku por lo que las variables de entorno nunca se cargarán al iniciar la aplicación. Hemos de cargar estas variables de forma manual.</p>\n\n<p>{% codeblock Carga de variables de entorno en Heroku lang:bash %}\n$ heroku config:add CONSUMER<em>KEY=&#39;Your</em>Consumer_Key&#39;\n{% endcodeblock %}</p>\n\n<p>Podemos hacer un fichero bash que ejecutaremos después de hacer el despliegue en heroku. Este script tendría la siguiente estructura:</p>\n\n<p>{% codeblock Script para cargar variables de entorno en Heroku heroku.sh lang:bash %}\nheroku config:add CONSUMER<em>KEY=&#39;Your</em>Consumer<em>Key&#39; CONSUMER</em>SECRET=&#39;Your<em>Consumer</em>Secret&#39; OAUTH<em>TOKEN=&#39;Your</em>Oauth<em>Token&#39; OAUTH</em>TOKEN<em>SECRET=&#39;Your</em>Oauth<em>Token</em>Secret&#39; NEW<em>RELIC</em>LICENSE<em>KEY=&#39;Your</em>New<em>Relic</em>License_Key&#39;;\nheroku info --app urlhunter-314159;\n{% endcodeblock %}</p>\n\n<p>Y lo ejecutamos escribiendo en el terminal:</p>\n\n<p>{% codeblock Script para cargar variables de entorno en Heroku lang:bash %}\n$ sh heroku.sh\n{% endcodeblock %}</p>\n\n<p>Listo. Ya podemos compartir el código fuente del proyecto sin temor a que nadie pueda hacer uso de nuestras claves de terceros.</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1364214300000,"created_by":1,"updated_at":1364214300000,"updated_by":1,"published_at":1364214300000,"published_by":1},{"id":18,"title":"Una Decada","slug":"una-decada","markdown":"{% blockquote Douglas Adams. %}\nPuede que no haya ido a donde quería ir, pero creo que he terminado donde tenía que estar.\n{% endblockquote %}\n\nHoy hace diez años que entré a trabajar como programador en una empresa de consultoría. Para algunos serán muchos, para otros serán pocos, para mi es una cantidad muy significativa que me permite echar la vista atrás y reflexionar sobre como han cambiado las cosas desde entonces.\n\n<!--more-->\n\nYo no iba a ser programador. Estudié (y no me arrepiento) Química porque me gustaba muchísimo e incluso tuve la suerte de trabajar de becario en la Facultad de Químicas durante un año y en Repsol durante seis meses. La historia comienza en segundo de carrera, cuando compre mi primer ordenador, un clónico con Windows 95 original (puedo demostrarlo con fotos) con el que empece a utilizar [Origin](http://www.softwarecientifico.com/paginas/origin.htm), [Hyperchem](http://www.hyper.com), [Matlab](http://www.mathworks.es/products/matlab/) y el mítico [Maple V](http://www.tecnun.es/asignaturas/metmat/Manual_Maple/version5.pdf). Creo que esto era a finales del año 1997, para acceder a Internet reservábamos una hora en la sala de informática de la facultad, no había proxy pero una señora de muy mal caracter te abroncaba si buscabas guiones de los Monty Python, la fuente favorita de las paginas web era Times New Roman y usabamos [Altavista](http://es.wikipedia.org/wiki/AltaVista) para hacer búsquedas.   \n\nDesde el primer momento me sentí muy bien con el ordenador. Tuve la certeza de que si hubiera tenido mi primer ordenador (en realidad era el segundo, el primero fué un Amstrad CPC 464 en los ochenta) en el bachillerato no habría elegido Química como carrera pero aun así continué con mi _vocación_. Podría haberme especializado en Química Física, una rama de la Química que en aquella época ya tenía un alto contenido computacional: eran unos frikis que usaban linux porque no había que apagarlos nunca y así podían dejar cálculos corriendo durante meses, pero a mi lo que me gustaba era la síntesis de moléculas orgánicas... que le vamos a hacer.   \n\nEl caso es que cuando acabé la carrera y me puse a buscar trabajo las opciones eran: comercial, profesor de secundaria y programador. Había más posibilidades de trabajar como investigador en el extranjero pero por aquella época yo ya era un huevón y no quería salir de casa así que empece por la primera opción, comercial. No me llevó mucho tiempo darme cuenta de que aquello no era lo mío y a los cinco meses estaba haciendo un curso de programación en base de datos y echando curriculums en las típicas empresas de consultoría que contrataban a gente sin experiencia en programación (no doy nombres pero seguro que se os ocurren muchas). En las navidades de 2002 me seleccionaron para hacer un curso de COBOL/CICS/DB2, dejé el trabajo de visitador médico y durante un mes y medio estuve aprendiendo las bases para ser un cobolero. \n\nAunque se decía que había bastante trabajo de programador, las _vacas gordas_ estaban adelgazando. En 2003, la burbuja de las _punto com_ ya había estallado, los grandes proyectos de desarrollo COBOL en España que habían sido el efecto 2000 y la transición de la peseta al euro ya estaban más que acabados, el trío de las Azores se disponía a invadir Irak... en este escenario tan devastador, sin ninguna experiencia como programador y con un gran sentimiento de intrusismo, ser contratado como Codificador Informático por la importante suma de 10.300€ brutos anuales fue algo maravilloso. \\</ironia>\n\nProgramar me gustaba mucho, tanto, que cuando ya me empezaba a sentir cómodo con COBOL y sus adláteres le empece a hacer ojillos al lenguaje con el que programaban los _tíos de al lado_, esos que hacían cosas mucho más sofisticadas que nosotros: Java.  \nEn el año 2003 ya era normal tener internet en casa y aunque en aquella época no había tantos recursos para aprender a programar encontré un tutorial de Sun para aprender Java mientras desarrollabas un _diarío de buceo (Dive Log)_. Aunque parezca mentira, rebuscando en la web de Oracle todavía se puede encontrar este [pecio](http://www.oracle.com/technetwork/topics/newtojava/divelog-140357.html).     \nYo no se nadar, y mucho menos bucear por lo que todo apuntaba a receta para un fracaso y así fue. Avancé bastante con la aplicación pero entender los conceptos de orientación a objetos, herencia, clases y demás me costaba mucho. \n\nQuizá fuera culpa mía, por empeñarme en aprender con lo que obtenía de internet en una época en la que no había los recursos para aprender que tenemos ahora, quizá por que no fuí más al grano de lo que quería aprender, quizá porque mis conocimientos de programación no estaban lo suficientemente asentados, el caso es que finalmente se me quitaron las ganas de aprender Java y cualquier otro lenguaje. En el trabajo seguía haciendo programas en COBOL, aprendía mucho de bases de datos, SQL, normalización, diseño de aplicaciones,... y con eso era suficiente. Aprovechaba mis ratos libres para leer, escuchar música, estar con mi novia, mis amigos y hacer de bajista en un par de grupos. De hecho, pocas personas pueden presumir de haber estado en el Sexto encuentro de asociaciones de Félix Rodríguez de la Fuente y muchos menos pueden presumir de haber tocado en directo allí, en [Ruesta, Huesca](http://www.iberica2000.org/Es/Articulo.asp?Id=3648). Había más músicos que asistentes. \n\nAunque no dedicaba mi tiempo libre a programar, descubrí MySpace y empece a modificar y mantener el MySpace del grupo en el que estaba. En algo había mejorado internet: era mucho más fácil encontrar recursos que te explicaran como modificar las hojas de estilos de MySpace e incluso había gente que compartía hojas de estilos muy trabajadas de forma desinteresada. Internet había cambiado pero mi talento para el diseño no así que pronto me canse de jugar con MySpace. El friki que había dentro de mi estaba deseando salir pero todavía faltaba algo... un _totem_.\n\nEl _totem_ llegó en 2009 con forma de iPhone 3G, comprado dos semanas antes de que presentaran el 3GS. Eran otros tiempos, nunca había oído hablar de los ciclos de vida de los productos de Apple. El caso es que yo estaba muy contento con él, lo usaba bastante, probaba apps, hacia fotos, leía el correo, Google Reader y de repente, un día, mientras esperaba al autobús empece a buscar una aplicación para calcular el percentil de un bebé. Buscaba algo sencillo, que permitiese guardar unos pocos datos del recién nacido y, en cada revisión, mostrara la evolución del percentil. No vi nada que me llamara la atención y me dije: \"¿Esto podría hacerlo yo?\". \nLo comente con un compañero de trabajo y empezamos a investigar: hacía falta un Mac, no sabíamos si se podría virtualizar pero descubrimos que había algo llamado Hackintosh que podría valer. Encontramos la web de desarrolladores de Apple que te daban un filón de documentación sin pagar ni un duro. No había ni un solo tutorial en castellano pero en ingles había ya unas cuantas páginas especializadas que te enseñaban desde cero.\n\nViéndolo en perspectiva, de lo único que me arrepiento de esa época es de haberle dedicado tanto tiempo al Hackintosh. Yo no tenía mucho tiempo libre con mi hija recién nacida (lo de quitarme horas de sueño no lo había descubierto todavía) y mantener un Hackintosh requiere mucho tiempo. Esas navidades me compre el primer libro de desarrollo de aplicaciones y empece a darle caña por las noches. Lo que más me quemaba (siempre me ha quemado) era conseguir hacer cosas sin terminar de entender del todo lo que estaba pasando. Yo no sabía lo que era la programación orientada a objetos, había leído sobre ella cuando intente aprender .Net y Java pero nunca termine de tenerlo claro. Ahora estaba empeñado en aprender, y tenía que hacerlo con Objective-C.    \nEl tiempo iba pasando pero no conseguía producir nada, cada vez iba entendiendo un poco más como funcionaba iPhone OS (así se llamaba entonces) pero no terminaba las aplicaciones (sigo teniendo una larga lista de aplicaciones inacabadas). El problema era que me costaba mucho enfocarme. Había descubierto que podía aprender mucho por mi cuenta, internet estaba plagada de recursos y por fin tenía paciencia (o pasaba más tiempo en casa) para detenerme a leer, madurar, entender. No había hecho ninguna aplicación pero estaba convencido de que algún día necesitaría de servicios web que alimentaran alguna de mis aplicaciones por lo que también tendría que aprender algo de desarrollo web. Ruby on Rails sonaba bastante pero todo el mundo decía que Php era muy fácil y que el hosting era muy barato... Aprender, aprender, aprender, me estaba obsesionando, y mucho.\n\nAl final si que llegaron las aplicaciones: la primera, una lista de chistes _graciosillos_ para felicitar la Navidad y el año nuevo salió a finales de 2010. No ganó ni para pagar la licencia de desarrollador pero nos enseño mucho sobre la publicidad, los comentarios y la _competencia_, sobre todo, de la *_competencia_*.\nMás tarde, a principios de 2012 salió TasaTuCoche. De esta si que aprendimos bastante más: identificar un nicho, ver que se podía mejorar, probar técnicas de posicionamiento en el App Store, etc. Aquí ya hay necesidad de servicios web por lo que hubo que aprender algo de Php, hostings, redireccionamiento dns, dominios y demás historias. Php está bien, y nos permitió desarrollar el servicio en muy poco tiempo pero aun así hay algo que no me hace sentir cómodo cuando programo en Php, por eso volví a darle a Ruby On Rails.\n\nY ahí sigo, saltando de iOS a Ruby on Rails, mirando de reojo a Node.js, comprando libros de OSX para cuando pueda, pasar a la pantalla grande, disfrutando de compartir mi tiempo y mi código en GitHub, o en este blog,...\n\nDiez años para mí son muchos años, se han pasado volando y sobre todo los últimos cuatro me hubiera gustado exprimirlos más. Es muy difícil saber en que se traducirán las horas de sueño que me estoy quitando pero no me pesan nada por que, solo de aprender lo que estoy aprendiendo, ya las doy por bien invertidas y se que marcarán lo que pasará en los próximos diez años. Si estos han sido buenos, los próximos espero que sean la caña.\n\n### Nota:\nEsta entrada la empece a escribir el domingo 31 de Marzo pero hasta hoy 2 de Abril no he podido terminarla. \n\n\n\n\n","html":"<p>{% blockquote Douglas Adams. %}\nPuede que no haya ido a donde quería ir, pero creo que he terminado donde tenía que estar.\n{% endblockquote %}</p>\n\n<p>Hoy hace diez años que entré a trabajar como programador en una empresa de consultoría. Para algunos serán muchos, para otros serán pocos, para mi es una cantidad muy significativa que me permite echar la vista atrás y reflexionar sobre como han cambiado las cosas desde entonces.</p>\n\n<!--more-->\n\n<p>Yo no iba a ser programador. Estudié (y no me arrepiento) Química porque me gustaba muchísimo e incluso tuve la suerte de trabajar de becario en la Facultad de Químicas durante un año y en Repsol durante seis meses. La historia comienza en segundo de carrera, cuando compre mi primer ordenador, un clónico con Windows 95 original (puedo demostrarlo con fotos) con el que empece a utilizar <a href=\"http://www.softwarecientifico.com/paginas/origin.htm\">Origin</a>, <a href=\"http://www.hyper.com\">Hyperchem</a>, <a href=\"http://www.mathworks.es/products/matlab/\">Matlab</a> y el mítico <a href=\"http://www.tecnun.es/asignaturas/metmat/Manual_Maple/version5.pdf\">Maple V</a>. Creo que esto era a finales del año 1997, para acceder a Internet reservábamos una hora en la sala de informática de la facultad, no había proxy pero una señora de muy mal caracter te abroncaba si buscabas guiones de los Monty Python, la fuente favorita de las paginas web era Times New Roman y usabamos <a href=\"http://es.wikipedia.org/wiki/AltaVista\">Altavista</a> para hacer búsquedas.   </p>\n\n<p>Desde el primer momento me sentí muy bien con el ordenador. Tuve la certeza de que si hubiera tenido mi primer ordenador (en realidad era el segundo, el primero fué un Amstrad CPC 464 en los ochenta) en el bachillerato no habría elegido Química como carrera pero aun así continué con mi <em>vocación</em>. Podría haberme especializado en Química Física, una rama de la Química que en aquella época ya tenía un alto contenido computacional: eran unos frikis que usaban linux porque no había que apagarlos nunca y así podían dejar cálculos corriendo durante meses, pero a mi lo que me gustaba era la síntesis de moléculas orgánicas... que le vamos a hacer.   </p>\n\n<p>El caso es que cuando acabé la carrera y me puse a buscar trabajo las opciones eran: comercial, profesor de secundaria y programador. Había más posibilidades de trabajar como investigador en el extranjero pero por aquella época yo ya era un huevón y no quería salir de casa así que empece por la primera opción, comercial. No me llevó mucho tiempo darme cuenta de que aquello no era lo mío y a los cinco meses estaba haciendo un curso de programación en base de datos y echando curriculums en las típicas empresas de consultoría que contrataban a gente sin experiencia en programación (no doy nombres pero seguro que se os ocurren muchas). En las navidades de 2002 me seleccionaron para hacer un curso de COBOL/CICS/DB2, dejé el trabajo de visitador médico y durante un mes y medio estuve aprendiendo las bases para ser un cobolero. </p>\n\n<p>Aunque se decía que había bastante trabajo de programador, las <em>vacas gordas</em> estaban adelgazando. En 2003, la burbuja de las <em>punto com</em> ya había estallado, los grandes proyectos de desarrollo COBOL en España que habían sido el efecto 2000 y la transición de la peseta al euro ya estaban más que acabados, el trío de las Azores se disponía a invadir Irak... en este escenario tan devastador, sin ninguna experiencia como programador y con un gran sentimiento de intrusismo, ser contratado como Codificador Informático por la importante suma de 10.300€ brutos anuales fue algo maravilloso. &lt;/ironia&gt;</p>\n\n<p>Programar me gustaba mucho, tanto, que cuando ya me empezaba a sentir cómodo con COBOL y sus adláteres le empece a hacer ojillos al lenguaje con el que programaban los <em>tíos de al lado</em>, esos que hacían cosas mucho más sofisticadas que nosotros: Java.<br>\nEn el año 2003 ya era normal tener internet en casa y aunque en aquella época no había tantos recursos para aprender a programar encontré un tutorial de Sun para aprender Java mientras desarrollabas un <em>diarío de buceo (Dive Log)</em>. Aunque parezca mentira, rebuscando en la web de Oracle todavía se puede encontrar este <a href=\"http://www.oracle.com/technetwork/topics/newtojava/divelog-140357.html\">pecio</a>.<br>\nYo no se nadar, y mucho menos bucear por lo que todo apuntaba a receta para un fracaso y así fue. Avancé bastante con la aplicación pero entender los conceptos de orientación a objetos, herencia, clases y demás me costaba mucho. </p>\n\n<p>Quizá fuera culpa mía, por empeñarme en aprender con lo que obtenía de internet en una época en la que no había los recursos para aprender que tenemos ahora, quizá por que no fuí más al grano de lo que quería aprender, quizá porque mis conocimientos de programación no estaban lo suficientemente asentados, el caso es que finalmente se me quitaron las ganas de aprender Java y cualquier otro lenguaje. En el trabajo seguía haciendo programas en COBOL, aprendía mucho de bases de datos, SQL, normalización, diseño de aplicaciones,... y con eso era suficiente. Aprovechaba mis ratos libres para leer, escuchar música, estar con mi novia, mis amigos y hacer de bajista en un par de grupos. De hecho, pocas personas pueden presumir de haber estado en el Sexto encuentro de asociaciones de Félix Rodríguez de la Fuente y muchos menos pueden presumir de haber tocado en directo allí, en <a href=\"http://www.iberica2000.org/Es/Articulo.asp?Id=3648\">Ruesta, Huesca</a>. Había más músicos que asistentes. </p>\n\n<p>Aunque no dedicaba mi tiempo libre a programar, descubrí MySpace y empece a modificar y mantener el MySpace del grupo en el que estaba. En algo había mejorado internet: era mucho más fácil encontrar recursos que te explicaran como modificar las hojas de estilos de MySpace e incluso había gente que compartía hojas de estilos muy trabajadas de forma desinteresada. Internet había cambiado pero mi talento para el diseño no así que pronto me canse de jugar con MySpace. El friki que había dentro de mi estaba deseando salir pero todavía faltaba algo... un <em>totem</em>.</p>\n\n<p>El <em>totem</em> llegó en 2009 con forma de iPhone 3G, comprado dos semanas antes de que presentaran el 3GS. Eran otros tiempos, nunca había oído hablar de los ciclos de vida de los productos de Apple. El caso es que yo estaba muy contento con él, lo usaba bastante, probaba apps, hacia fotos, leía el correo, Google Reader y de repente, un día, mientras esperaba al autobús empece a buscar una aplicación para calcular el percentil de un bebé. Buscaba algo sencillo, que permitiese guardar unos pocos datos del recién nacido y, en cada revisión, mostrara la evolución del percentil. No vi nada que me llamara la atención y me dije: &quot;¿Esto podría hacerlo yo?&quot;. \nLo comente con un compañero de trabajo y empezamos a investigar: hacía falta un Mac, no sabíamos si se podría virtualizar pero descubrimos que había algo llamado Hackintosh que podría valer. Encontramos la web de desarrolladores de Apple que te daban un filón de documentación sin pagar ni un duro. No había ni un solo tutorial en castellano pero en ingles había ya unas cuantas páginas especializadas que te enseñaban desde cero.</p>\n\n<p>Viéndolo en perspectiva, de lo único que me arrepiento de esa época es de haberle dedicado tanto tiempo al Hackintosh. Yo no tenía mucho tiempo libre con mi hija recién nacida (lo de quitarme horas de sueño no lo había descubierto todavía) y mantener un Hackintosh requiere mucho tiempo. Esas navidades me compre el primer libro de desarrollo de aplicaciones y empece a darle caña por las noches. Lo que más me quemaba (siempre me ha quemado) era conseguir hacer cosas sin terminar de entender del todo lo que estaba pasando. Yo no sabía lo que era la programación orientada a objetos, había leído sobre ella cuando intente aprender .Net y Java pero nunca termine de tenerlo claro. Ahora estaba empeñado en aprender, y tenía que hacerlo con Objective-C.<br>\nEl tiempo iba pasando pero no conseguía producir nada, cada vez iba entendiendo un poco más como funcionaba iPhone OS (así se llamaba entonces) pero no terminaba las aplicaciones (sigo teniendo una larga lista de aplicaciones inacabadas). El problema era que me costaba mucho enfocarme. Había descubierto que podía aprender mucho por mi cuenta, internet estaba plagada de recursos y por fin tenía paciencia (o pasaba más tiempo en casa) para detenerme a leer, madurar, entender. No había hecho ninguna aplicación pero estaba convencido de que algún día necesitaría de servicios web que alimentaran alguna de mis aplicaciones por lo que también tendría que aprender algo de desarrollo web. Ruby on Rails sonaba bastante pero todo el mundo decía que Php era muy fácil y que el hosting era muy barato... Aprender, aprender, aprender, me estaba obsesionando, y mucho.</p>\n\n<p>Al final si que llegaron las aplicaciones: la primera, una lista de chistes <em>graciosillos</em> para felicitar la Navidad y el año nuevo salió a finales de 2010. No ganó ni para pagar la licencia de desarrollador pero nos enseño mucho sobre la publicidad, los comentarios y la <em>competencia</em>, sobre todo, de la <em><em>competencia</em></em>.\nMás tarde, a principios de 2012 salió TasaTuCoche. De esta si que aprendimos bastante más: identificar un nicho, ver que se podía mejorar, probar técnicas de posicionamiento en el App Store, etc. Aquí ya hay necesidad de servicios web por lo que hubo que aprender algo de Php, hostings, redireccionamiento dns, dominios y demás historias. Php está bien, y nos permitió desarrollar el servicio en muy poco tiempo pero aun así hay algo que no me hace sentir cómodo cuando programo en Php, por eso volví a darle a Ruby On Rails.</p>\n\n<p>Y ahí sigo, saltando de iOS a Ruby on Rails, mirando de reojo a Node.js, comprando libros de OSX para cuando pueda, pasar a la pantalla grande, disfrutando de compartir mi tiempo y mi código en GitHub, o en este blog,...</p>\n\n<p>Diez años para mí son muchos años, se han pasado volando y sobre todo los últimos cuatro me hubiera gustado exprimirlos más. Es muy difícil saber en que se traducirán las horas de sueño que me estoy quitando pero no me pesan nada por que, solo de aprender lo que estoy aprendiendo, ya las doy por bien invertidas y se que marcarán lo que pasará en los próximos diez años. Si estos han sido buenos, los próximos espero que sean la caña.</p>\n\n<h3>Nota:</h3>\n\n<p>Esta entrada la empece a escribir el domingo 31 de Marzo pero hasta hoy 2 de Abril no he podido terminarla. </p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1364689080000,"created_by":1,"updated_at":1364689080000,"updated_by":1,"published_at":1364689080000,"published_by":1},{"id":19,"title":"Helios: El Sol vs. La 'iNube'","slug":"helios-el-sol-vs-la-inube","markdown":"{% blockquote Led Zeppelin, Stairway to heaven. %}\nThere's a lady who's sure all that glitters is gold\nAnd she's buying a stairway to heaven.\n{% endblockquote %}\n\nSon tiempos convulsos para la sincronización de datos entre aplicaciones. Si seguís al mismo tipo de personas que yo en Twitter habréis visto como el nivel de indignación con iCloud por la sincronización por Core Data ha llegado a niveles casi de disturbios. [Este post](http://rms2.tumblr.com/post/46505165521/the-gathering-storm-our-travails-with-icloud-sync) de los desarrolladores de Yojimbo es un buen resumen. \nPara echar un poco más de leña al fuego, Brent Simmons escribía [Why Developers Shouldn’t Use iCloud Syncing, Even If It Worked](http://t.co/U6NFNTDjDR) unos días después.\n\n<!--more-->\n\nMattt Thompson aprovechó el _April Fools´ Day_ para poner una pizca de humor en el asunto dedicando un [NSHipster a iCloud](http://nshipster.com/icloud/).\n\nLa sorpresa llegó cuando el día siguiente aparecieron estos dos tweets casi seguidos:\n\n{% tweet https://twitter.com/mattt/status/319144081731227649 %}\n\n{% tweet https://twitter.com/NSHipster/status/319144640592896000 %}\n\nA estas alturas creo que no hay que presentar a Mattt Thompson, famoso co-creador de AFNetworking, pero igual si que hay que volver a repasar algunas de las cosas que ha estado haciendo en los últimos tiempos, desde que abandono Gowalla para entrar a formar parte del equipo de Heroku como Director del área de Mobile:\n\n- AFNetworking se ha consolidado como el framework de facto para realizar cualquier comunicación con servidores, descarga y subida de ficheros, etc.\n- Basándose en AFNetworking ha creado AFIncrementalStore, que junto con el servicio Heroku Mobile permite hacer persistencia de Core Data en servidores de forma correcta... ¿dardo envenenado a iCloud?\n\nLos dos trabajos anteriores son bastante conocidos pero también tienen buena reputación los siguientes:\n\n- Cargo Bay es una pequeña librería para realizar la verificación de las transacciones realizadas por In-App-Purchases.\n- Orbiter es otra pequeña librería que facilita el control de los dispositivos vinculados a notificaciones para poder usar servicios push de terceros como Urban Airship o Parse sin tener que instalar los SDK´s correspondientes.\n- Rack::PushNotification es un webservice para realizar las notificaciones push desde nuestros propios servidores.\n\nPodríamos seguir y seguir con otras muchas pequeñas y grandes utilidades creadas por Mattt: Postgres.app (una cliente standalone para instalar PostgreSQL en el Mac), Induction.app (un cliente de bases de datos también para Mac),... pero creo que esta es una buena representación.\n\nAparte de los IaaS, PaaS y los SaaS, últimamente empiezan a sonar mucho los BaaS (Backend as a Service) como Parse, Urban Airship, Apigee, Azure o BackBeam.io (que es un desarrollo español, mañico para más señas). Las ventajas de estos Baas son claras, nos permiten disfrutar de una infraestructura necesaria por la mayoría de las aplicaciones móviles sin tener que desarrollar nada. Normalmente, además, tienen una tarifa de entrada que suele ser gratuita en la mayoría de los casos. Una vez que superas ese consumo gratuito, empiezas a pagar. Si has diseñado un buen plan de negocio para tu aplicación, lo normal es que cuando llegues al punto de tener que pagar por usar el Baas ya tengas bastantes ingresos y por tanto te siga compensando seguir utilizándolo.\n\nHeroku, la empresa donde trabaja Mattt es un Paas (Platform as a Service), lo que ofrece es una plataforma donde es muy sencillo desplegar una aplicación. Es decir, el backend lo desarrollamos nosotros y ellos a cambio nos dan facilidades para el despliegue, garantías de escalabilidad y nos liberan del mantenimiento de las máquinas en sí.    \nPero si a Heroku le sumamos los desarrollos que ha estado realizando Mattt: un backend para nuestras bases de datos, un backend para los dispositivos que requieren de notificaciones push, le añadimos un servicio para realizar la validación de los IAP en el servidor y un servicio para generar Passbooks (que empiezan a estar de moda) tenemos casi nuestro propio Parse. Además, no es necesario un SDK para la parte cliente, Mattt ya tiene un montón de librerías que se encargan de esto: AFNetworking, AFIncrementalStore, Cargo Bay, Orbiter,...\n\nHelios no es un sustituto de Parse, Urban Airship, TestFlight, Flurry... todavía, pero tiempo al tiempo.    \nCon Parse tenemos cubierto prácticamente todo lo que se le puede pedir a un backend: persistencia, cuentas de usuario, notificaciones push, servicios de geolocalización. Urban Airship está especializado en notificaciones push, geolocalización y passbook. Flurry tiene métricas de uso y control de errores. Testflight tiene distribución de betas, control de uso y gestión de errores. Crashlitycs solo gestión de errores. New Relic se mete ahora con monitores de servicios.\nSi se nos va la mano, terminamos haciendo una aplicación del tiempo con 17 SDK´s diferentes instalados. La idea de Heroku me parece brillante, yo te pongo el hosting y un backend superpersonalizable. Además te doy clientes modulares para lo que quieras usar. Eres libre de usar tu propio servidor pero que sepas que en Heroku es tan sencillo como escribir \"git push heroku master\" y cuando llegue el momento de pagar, pagarás. No es oro todo lo que reluce ya que pasamos de depender de una caja negra como Parse a un conjunto de servicios desarrollados por una única empresa pero al menos esos servicios son _open source_, podemos ver el código cuando queramos y depender solo de nosostros mismos.\n\nYa os digo que a Helios le queda mucho camino por andar, pero tiene muy buena pinta. Estoy haciendo pruebas con él y quiero ver si es fácil de superar las dos principales carencias que le veo ahora mismo: la gestión de usuarios y las notificaciones push sin recurrir a servicios de terceros. También quiero saber si su uso en Heroku implica directamente coste o si, por el contrario, podemos probarlo de forma gratuita con bastante margen... creo que Helios va a ser un _habitual_ en mis próximos posts... Stay tuned!\n\n","html":"<p>{% blockquote Led Zeppelin, Stairway to heaven. %}\nThere&#39;s a lady who&#39;s sure all that glitters is gold\nAnd she&#39;s buying a stairway to heaven.\n{% endblockquote %}</p>\n\n<p>Son tiempos convulsos para la sincronización de datos entre aplicaciones. Si seguís al mismo tipo de personas que yo en Twitter habréis visto como el nivel de indignación con iCloud por la sincronización por Core Data ha llegado a niveles casi de disturbios. <a href=\"http://rms2.tumblr.com/post/46505165521/the-gathering-storm-our-travails-with-icloud-sync\">Este post</a> de los desarrolladores de Yojimbo es un buen resumen. \nPara echar un poco más de leña al fuego, Brent Simmons escribía <a href=\"http://t.co/U6NFNTDjDR\">Why Developers Shouldn’t Use iCloud Syncing, Even If It Worked</a> unos días después.</p>\n\n<!--more-->\n\n<p>Mattt Thompson aprovechó el <em>April Fools´ Day</em> para poner una pizca de humor en el asunto dedicando un <a href=\"http://nshipster.com/icloud/\">NSHipster a iCloud</a>.</p>\n\n<p>La sorpresa llegó cuando el día siguiente aparecieron estos dos tweets casi seguidos:</p>\n\n<p>{% tweet https://twitter.com/mattt/status/319144081731227649 %}</p>\n\n<p>{% tweet https://twitter.com/NSHipster/status/319144640592896000 %}</p>\n\n<p>A estas alturas creo que no hay que presentar a Mattt Thompson, famoso co-creador de AFNetworking, pero igual si que hay que volver a repasar algunas de las cosas que ha estado haciendo en los últimos tiempos, desde que abandono Gowalla para entrar a formar parte del equipo de Heroku como Director del área de Mobile:</p>\n\n<ul>\n<li>AFNetworking se ha consolidado como el framework de facto para realizar cualquier comunicación con servidores, descarga y subida de ficheros, etc.</li>\n<li>Basándose en AFNetworking ha creado AFIncrementalStore, que junto con el servicio Heroku Mobile permite hacer persistencia de Core Data en servidores de forma correcta... ¿dardo envenenado a iCloud?</li>\n</ul>\n\n<p>Los dos trabajos anteriores son bastante conocidos pero también tienen buena reputación los siguientes:</p>\n\n<ul>\n<li>Cargo Bay es una pequeña librería para realizar la verificación de las transacciones realizadas por In-App-Purchases.</li>\n<li>Orbiter es otra pequeña librería que facilita el control de los dispositivos vinculados a notificaciones para poder usar servicios push de terceros como Urban Airship o Parse sin tener que instalar los SDK´s correspondientes.</li>\n<li>Rack::PushNotification es un webservice para realizar las notificaciones push desde nuestros propios servidores.</li>\n</ul>\n\n<p>Podríamos seguir y seguir con otras muchas pequeñas y grandes utilidades creadas por Mattt: Postgres.app (una cliente standalone para instalar PostgreSQL en el Mac), Induction.app (un cliente de bases de datos también para Mac),... pero creo que esta es una buena representación.</p>\n\n<p>Aparte de los IaaS, PaaS y los SaaS, últimamente empiezan a sonar mucho los BaaS (Backend as a Service) como Parse, Urban Airship, Apigee, Azure o BackBeam.io (que es un desarrollo español, mañico para más señas). Las ventajas de estos Baas son claras, nos permiten disfrutar de una infraestructura necesaria por la mayoría de las aplicaciones móviles sin tener que desarrollar nada. Normalmente, además, tienen una tarifa de entrada que suele ser gratuita en la mayoría de los casos. Una vez que superas ese consumo gratuito, empiezas a pagar. Si has diseñado un buen plan de negocio para tu aplicación, lo normal es que cuando llegues al punto de tener que pagar por usar el Baas ya tengas bastantes ingresos y por tanto te siga compensando seguir utilizándolo.</p>\n\n<p>Heroku, la empresa donde trabaja Mattt es un Paas (Platform as a Service), lo que ofrece es una plataforma donde es muy sencillo desplegar una aplicación. Es decir, el backend lo desarrollamos nosotros y ellos a cambio nos dan facilidades para el despliegue, garantías de escalabilidad y nos liberan del mantenimiento de las máquinas en sí.<br>\nPero si a Heroku le sumamos los desarrollos que ha estado realizando Mattt: un backend para nuestras bases de datos, un backend para los dispositivos que requieren de notificaciones push, le añadimos un servicio para realizar la validación de los IAP en el servidor y un servicio para generar Passbooks (que empiezan a estar de moda) tenemos casi nuestro propio Parse. Además, no es necesario un SDK para la parte cliente, Mattt ya tiene un montón de librerías que se encargan de esto: AFNetworking, AFIncrementalStore, Cargo Bay, Orbiter,...</p>\n\n<p>Helios no es un sustituto de Parse, Urban Airship, TestFlight, Flurry... todavía, pero tiempo al tiempo.<br>\nCon Parse tenemos cubierto prácticamente todo lo que se le puede pedir a un backend: persistencia, cuentas de usuario, notificaciones push, servicios de geolocalización. Urban Airship está especializado en notificaciones push, geolocalización y passbook. Flurry tiene métricas de uso y control de errores. Testflight tiene distribución de betas, control de uso y gestión de errores. Crashlitycs solo gestión de errores. New Relic se mete ahora con monitores de servicios.\nSi se nos va la mano, terminamos haciendo una aplicación del tiempo con 17 SDK´s diferentes instalados. La idea de Heroku me parece brillante, yo te pongo el hosting y un backend superpersonalizable. Además te doy clientes modulares para lo que quieras usar. Eres libre de usar tu propio servidor pero que sepas que en Heroku es tan sencillo como escribir &quot;git push heroku master&quot; y cuando llegue el momento de pagar, pagarás. No es oro todo lo que reluce ya que pasamos de depender de una caja negra como Parse a un conjunto de servicios desarrollados por una única empresa pero al menos esos servicios son <em>open source</em>, podemos ver el código cuando queramos y depender solo de nosostros mismos.</p>\n\n<p>Ya os digo que a Helios le queda mucho camino por andar, pero tiene muy buena pinta. Estoy haciendo pruebas con él y quiero ver si es fácil de superar las dos principales carencias que le veo ahora mismo: la gestión de usuarios y las notificaciones push sin recurrir a servicios de terceros. También quiero saber si su uso en Heroku implica directamente coste o si, por el contrario, podemos probarlo de forma gratuita con bastante margen... creo que Helios va a ser un <em>habitual</em> en mis próximos posts... Stay tuned!</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1365035460000,"created_by":1,"updated_at":1365035460000,"updated_by":1,"published_at":1365035460000,"published_by":1},{"id":20,"title":"Helios I. Guardando Datos","slug":"helios-i-guardando-datos","markdown":"Tal y como anticipe que sucedería, durante estos días he estado probando Helios, el framework de @mattt que nos permite crear un backend para aplicaciones móviles. \n\nComo ya hice un primer análisis del framework en conjunto, ahora me voy a ir centrando en las piezas que lo forman siguiendo el orden, para mi, de mayor a menor importancia. La idea es que en las próximas semanas pueda ir sacando artículos sobre cada una de ellas:\n\n1. Sincronización de datos. Core Data Buildpack + AFIncrementalStore\n2. Notificaciones Push. Rack::Push Notification + Orbiter\n3. In-App Purchases. Venice + Cargo Bay\n4. Passbook. Dubai/Rack::Passbook\n\nSigo teniendo sentimientos encontrados con este framework. Por un lado creo que supone un gran avance ya que simplifica enormemente el desarrollo *propietario* de una serie de servicios indispensables para una aplicación móvil actual. Por otro lado creo que frameworks de desarrollo web como Ruby on Rails o Sinatra no son mucho más complicados y las posibilidades que ofrecen son infinitamente mayores.\n\nEmpezemos...\n\n<!--more-->\n\n## Sincronización de datos\n\nHace algunos meses, Heroku publicó un tutorial en el que mostraba como crear un backend a partir de un proyecto iOS con Core Data. El mismo tutorial proponía realizar la sincronización con AFIncrementalStore, un framework basado en NSIncrmentalStote (una nueva clase no muy conocida) y que usa AFNetworking para las conexiones REST. Según el [articulo de NSHipster sobre NSIncrementalStore](http://nshipster.com/nsincrementalstore/) con menos de 300 líneas de código tenemos una sincronización que nos quitará muchos quebraderos de cabeza. \"It just works\", dice. Unas palabras malditas siempre que se habla de sincronización de datos en la *nube*.\n\nAFIncrementalStore no funciona bien a día de hoy. ¡Anda! igual que iCloud. He estado varios días intentando hacerlo funcionar pero al final no he conseguido nada. Supongo que es cosa de tiempo ya que hay una enorme comunidad de desarrolladores detrás intentando hacerlo funcionar.\n\n## Backend\n\nHelios usa Core Data Buildpack para generar el modelo REST al arrancar el servidor. Necesita una base de datos PostgreSQL para funcionar y un poquito de configuración, pero hacerlo andar con una estructura de tablas por detrás es coser y cantar. Ojo con el modelo REST: tendremos todos los endpoints habituales para hacer las operaciones CRUD pero una cosa fundamental como son los filtros, a día de hoy, no están desarrollados y desconozco si lo estarán algún día ya que en el _roadmap_ no se habla de ellos. Si por algún motivo no lo vas a necesitar en tu backend, perfecto, Helios se ajusta al 100% a tu servicio aunque yo creo que lo normal es incluir algún filtro en el _endpoint_: un campo de ordenación, el número de registros por página, filtrado por usuario. Creo que solo hay algo que se utilice más que la cláusula WHERE en SQL... el operador AND:\n\nHelios puede usarse solo ya que por dentro es una aplicación hecha en Sinatra pero también pueden integrarse la gema en un proyecto Rails o Sinatra, actuando como middleware. En el repositorio recomiendan que se proteja este middleware con seguridad ya que podrá contener datos de gran sensibilidad.\n\nEn este post, aprovecharé para explicar muy brevemente como incluir la gema en un proyecto Rails e incorporar una seguridad HTTP básica.\n\nMi idea era usar Helios para hacer una especie de Google Reader. AFIncrementalStore me ha desinflado un poco la idea pero sigue siendo la base del backend.    \nSupongo que cada uno seguirá su método; en mi caso, antes de empezar con la aplicación web, lo primero que haremos será crear un proyecto iOS con Core Data donde definiremos el modelo: dos tablas, una para almacenar los feeds a los que estamos suscritos y otra para almacener los elementos descargados de cada feed.\n\nUsaremos el API de Google Reader que se ocupa de descargar los feeds ya que devuelve siempre el mismo resultado, independientemente de que lea de un rss o de un atom. Este API seguro que desaparece el 1 de Julio de 2013 pero de momento nos ayudará a tener una buena copia de seguridad de nuestros blogs favoritos.\n\n### Empezamos a desarrollar.\n\nUna vez que hemos creado un _xcdatamodel_ en Xcode, lo que hacemos es crear una aplicación Rails que sirva para contener el backend Helios y además nos permita crear todo aquello que no nos proporciente este framework, como por ejemplo la securización del repositorio, las cuentas de usuario, etc.\n\nEn el terminal escribiremos lo siguiente: \n\n{% codeblock lang:bash %}\n$ rails new DealerErgoGo -d postgresql\n{% endcodeblock %}\n\nDirectamente trabajaremos con PostgreSQL desde desarrollo por lo que tenemos que tener instalado en nuestro equipo este gestor de base de datos. Mi recomendación es usar Postgres.app, desarrollada por Mattt (que tío) que funciona muy bien y es fácil de instalar (relativamente).\n\nLo primero que haremos en nuestro proyecto Rails es configurar el acceso a la base de datos, solo cambiamos el usuario y le indicamos el puerto y el host. Creamos las bases de datos y a disfrutar.\n\n{% codeblock lang:bash %}\n$ rake db:create\n{% endcodeblock %}\n\nA continuación incluimos todo lo necesario para usar Helios.\n\nInstalamos la gema y creamos la base de datos\n\n{% codeblock lang:bash %}\n$ rake db:create\n{% endcodeblock %}\n\nSiguiendo las instrucciones del repositorio, configuramos Helios como un middleware en application.rb. Aprovecharemos para incluir el modelo de datos que hemos creado en la aplicación iOS dentro de la carpeta de configuración de la aplicación Rails. En local no es necesario pero cuando hagamos el despliegue en Heroku, tendremos que subir el modelo junto con la aplicación.\n\n{% codeblock \"fragmento de código en .config/application.rb\" lang:ruby %}\n# Using framework Helios as a middleware for our app\n\tconfig.middleware.use Helios::Application do\n\t\tservice :data, model: './config/DealerErgoGo.xcdatamodel'\n\t\tservice :push_notification\n\t\tservice :in_app_purchase\n\t\tservice :passbook\n\tend\n{% endcodeblock %}\n\nSecurizamos desarrollo y producción con seguridad HTTP básica\n\n{% codeblock \"fragmento de código en .config/environments/development.rb y .config/environments/production.rb\" lang:ruby %}\n# Autenticación HTTP Básica para no dejar al descubierto los datos de la aplicación\n  config.middleware.insert_after(::Rack::Lock, \"::Rack::Auth::Basic\", \"Who R' U?\") do |u, p|\n    u == ENV[\"USERNAME\"] && p == ENV[\"PASSWORD\"]\n  end\n{% endcodeblock %}\n\nCargamos las variables de entorno de nuestro fichero\n\n{% codeblock lang:ruby %}\n# Load the environment variables at beginning\n  config.before_configuration do\n\tenv_file = File.join(Rails.root, 'config', 'local_env.yml')\n    YAML.load(File.open(env_file)).each do |key, value|\n    ENV[key.to_s] = value\n    end if File.exists?(env_file)\n  end\n{% endcodeblock %}\n\nPara terminar, cambiamos el adaptador de postgresql a postgres porque sequel, una dependencia que trae Helios, lo usa. Debido a esto es muy importante configurar y crear la base de datos antes de introducir Helios en la aplicación ya que de lo contrario entraremos en un bucle infinito de cambio de adapatores. También cambiamos el usuario de la base de datos ya que, por defecto, PostgreSQL solo tendrá nuestro usuario local.\n\n{% codeblock lang:yaml %}\ndevelopment:\n\tadapter: postgres\n   \tencoding: unicode\n   \tdatabase: DealerErgoGo_development\n   \tpool: 5\n\tusername: javi\n   \tpassword:\n\thost: localhost\n\tport: 5432\n{% endcodeblock %}\n\nY con esto ya tendríamos listo el backend. Podríamos probarlo en nuestra máquina local o desplegar directamente en Heroku. Para ello solo hay que tener [Heroku toolbelt](https://toolbelt.heroku.com) instalado, haber hecho commit de todos los cambios en la rama y principal y desde la carpeta del proyecto en el terminal escribir lo siguiente:\n\n{% codeblock lang:bash %}\n$ heroku create\n{% endcodeblock %}\n\nPara crear la aplicación y\n\n{% codeblock lang:bash %}\n$ git push heroku master\n{% endcodeblock %}\n\nPara desplegar la aplicación en Heroku. Listo, ya podemos disfrutar de nuestras 750 horas gratuitas al mes.\n\n### La decepción\n\nNos las prometíamos muy felices. El desarrollo y puesta en producción del backend había sido tan sencillo que confiábamos en que la creación de la aplicación iOS fuera igual y en realidad, esto no ha sido así.\n\nPara desarrollar la aplicación vamos a seguir [este tutorial de la web de Heroku](https://devcenter.heroku.com/articles/ios-core-data-buildpack-app). Aparentemente no es muy complicado y de hecho no lo es, el problema es que cuando hayamos seguido todos los pasos y tengamos la aplicación lista para envíar datos a nuestro flamante servidor veremos que la grabación la hace bien pero el retorno de la información no y nuestra aplicación empieza a fallar. Llevo toda la semana leyendo las _issues_ del repositorio y buscando en Stackoverflow a ver si doy con el correcto funcionamiento pero hasta ahora no he conseguido nada. Creo que es algo que se me ha pasado por alto en algún punto ya que es demasiado evidente que no está funcionando como para que no haya ninguna queja al respecto. En cualquier caso, yo mismo pondré un _issue_ a ver si me pueden echar una mano.\n\n## Conclusiones\n\nSi tu aplicación necesita de subir los datos a un servidor o simplemente leer unos datos sencillos: datos del tiempo, noticias, entradas de un blog, radares móviles,... Helios te puede ser de una gran ayuda. No recomiendo que uses AFIncrementalStore si no que, de momento, sería mejor que te hicieras tu propia sincronización con Core Data. \n\nSi ves que Helios se te empieza a quedar pequeño porque necesitas filtrar los datos en el servidor y no en la propia aplicación, no tengas miedo a dar el paso a Ruby on Rails. Llevará un poco más de trabajo pero no mucho más y eso ya si que es dar un salto cualitativo en la creación de tu propio backend ya que tendrás mucho más control sobre el mismo.","html":"<p>Tal y como anticipe que sucedería, durante estos días he estado probando Helios, el framework de @mattt que nos permite crear un backend para aplicaciones móviles. </p>\n\n<p>Como ya hice un primer análisis del framework en conjunto, ahora me voy a ir centrando en las piezas que lo forman siguiendo el orden, para mi, de mayor a menor importancia. La idea es que en las próximas semanas pueda ir sacando artículos sobre cada una de ellas:</p>\n\n<ol>\n<li>Sincronización de datos. Core Data Buildpack + AFIncrementalStore</li>\n<li>Notificaciones Push. Rack::Push Notification + Orbiter</li>\n<li>In-App Purchases. Venice + Cargo Bay</li>\n<li>Passbook. Dubai/Rack::Passbook</li>\n</ol>\n\n<p>Sigo teniendo sentimientos encontrados con este framework. Por un lado creo que supone un gran avance ya que simplifica enormemente el desarrollo <em>propietario</em> de una serie de servicios indispensables para una aplicación móvil actual. Por otro lado creo que frameworks de desarrollo web como Ruby on Rails o Sinatra no son mucho más complicados y las posibilidades que ofrecen son infinitamente mayores.</p>\n\n<p>Empezemos...</p>\n\n<!--more-->\n\n<h2>Sincronización de datos</h2>\n\n<p>Hace algunos meses, Heroku publicó un tutorial en el que mostraba como crear un backend a partir de un proyecto iOS con Core Data. El mismo tutorial proponía realizar la sincronización con AFIncrementalStore, un framework basado en NSIncrmentalStote (una nueva clase no muy conocida) y que usa AFNetworking para las conexiones REST. Según el <a href=\"http://nshipster.com/nsincrementalstore/\">articulo de NSHipster sobre NSIncrementalStore</a> con menos de 300 líneas de código tenemos una sincronización que nos quitará muchos quebraderos de cabeza. &quot;It just works&quot;, dice. Unas palabras malditas siempre que se habla de sincronización de datos en la <em>nube</em>.</p>\n\n<p>AFIncrementalStore no funciona bien a día de hoy. ¡Anda! igual que iCloud. He estado varios días intentando hacerlo funcionar pero al final no he conseguido nada. Supongo que es cosa de tiempo ya que hay una enorme comunidad de desarrolladores detrás intentando hacerlo funcionar.</p>\n\n<h2>Backend</h2>\n\n<p>Helios usa Core Data Buildpack para generar el modelo REST al arrancar el servidor. Necesita una base de datos PostgreSQL para funcionar y un poquito de configuración, pero hacerlo andar con una estructura de tablas por detrás es coser y cantar. Ojo con el modelo REST: tendremos todos los endpoints habituales para hacer las operaciones CRUD pero una cosa fundamental como son los filtros, a día de hoy, no están desarrollados y desconozco si lo estarán algún día ya que en el <em>roadmap</em> no se habla de ellos. Si por algún motivo no lo vas a necesitar en tu backend, perfecto, Helios se ajusta al 100% a tu servicio aunque yo creo que lo normal es incluir algún filtro en el <em>endpoint</em>: un campo de ordenación, el número de registros por página, filtrado por usuario. Creo que solo hay algo que se utilice más que la cláusula WHERE en SQL... el operador AND:</p>\n\n<p>Helios puede usarse solo ya que por dentro es una aplicación hecha en Sinatra pero también pueden integrarse la gema en un proyecto Rails o Sinatra, actuando como middleware. En el repositorio recomiendan que se proteja este middleware con seguridad ya que podrá contener datos de gran sensibilidad.</p>\n\n<p>En este post, aprovecharé para explicar muy brevemente como incluir la gema en un proyecto Rails e incorporar una seguridad HTTP básica.</p>\n\n<p>Mi idea era usar Helios para hacer una especie de Google Reader. AFIncrementalStore me ha desinflado un poco la idea pero sigue siendo la base del backend.<br>\nSupongo que cada uno seguirá su método; en mi caso, antes de empezar con la aplicación web, lo primero que haremos será crear un proyecto iOS con Core Data donde definiremos el modelo: dos tablas, una para almacenar los feeds a los que estamos suscritos y otra para almacener los elementos descargados de cada feed.</p>\n\n<p>Usaremos el API de Google Reader que se ocupa de descargar los feeds ya que devuelve siempre el mismo resultado, independientemente de que lea de un rss o de un atom. Este API seguro que desaparece el 1 de Julio de 2013 pero de momento nos ayudará a tener una buena copia de seguridad de nuestros blogs favoritos.</p>\n\n<h3>Empezamos a desarrollar.</h3>\n\n<p>Una vez que hemos creado un <em>xcdatamodel</em> en Xcode, lo que hacemos es crear una aplicación Rails que sirva para contener el backend Helios y además nos permita crear todo aquello que no nos proporciente este framework, como por ejemplo la securización del repositorio, las cuentas de usuario, etc.</p>\n\n<p>En el terminal escribiremos lo siguiente: </p>\n\n<p>{% codeblock lang:bash %}\n$ rails new DealerErgoGo -d postgresql\n{% endcodeblock %}</p>\n\n<p>Directamente trabajaremos con PostgreSQL desde desarrollo por lo que tenemos que tener instalado en nuestro equipo este gestor de base de datos. Mi recomendación es usar Postgres.app, desarrollada por Mattt (que tío) que funciona muy bien y es fácil de instalar (relativamente).</p>\n\n<p>Lo primero que haremos en nuestro proyecto Rails es configurar el acceso a la base de datos, solo cambiamos el usuario y le indicamos el puerto y el host. Creamos las bases de datos y a disfrutar.</p>\n\n<p>{% codeblock lang:bash %}\n$ rake db:create\n{% endcodeblock %}</p>\n\n<p>A continuación incluimos todo lo necesario para usar Helios.</p>\n\n<p>Instalamos la gema y creamos la base de datos</p>\n\n<p>{% codeblock lang:bash %}\n$ rake db:create\n{% endcodeblock %}</p>\n\n<p>Siguiendo las instrucciones del repositorio, configuramos Helios como un middleware en application.rb. Aprovecharemos para incluir el modelo de datos que hemos creado en la aplicación iOS dentro de la carpeta de configuración de la aplicación Rails. En local no es necesario pero cuando hagamos el despliegue en Heroku, tendremos que subir el modelo junto con la aplicación.</p>\n\n<p>{% codeblock &quot;fragmento de código en .config/application.rb&quot; lang:ruby %}</p>\n\n<h1>Using framework Helios as a middleware for our app</h1>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">config.middleware.use Helios::Application do\n    service :data, model: &#39;./config/DealerErgoGo.xcdatamodel&#39;\n    service :push_notification\n    service :in_app_purchase\n    service :passbook\nend\n</code></pre></div>\n<p>{% endcodeblock %}</p>\n\n<p>Securizamos desarrollo y producción con seguridad HTTP básica</p>\n\n<p>{% codeblock &quot;fragmento de código en .config/environments/development.rb y .config/environments/production.rb&quot; lang:ruby %}</p>\n\n<h1>Autenticación HTTP Básica para no dejar al descubierto los datos de la aplicación</h1>\n\n<p>config.middleware.insert_after(::Rack::Lock, &quot;::Rack::Auth::Basic&quot;, &quot;Who R&#39; U?&quot;) do |u, p|\n    u == ENV[&quot;USERNAME&quot;] &amp;&amp; p == ENV[&quot;PASSWORD&quot;]\n  end\n{% endcodeblock %}</p>\n\n<p>Cargamos las variables de entorno de nuestro fichero</p>\n\n<p>{% codeblock lang:ruby %}</p>\n\n<h1>Load the environment variables at beginning</h1>\n\n<p>config.before<em>configuration do\n    env</em>file = File.join(Rails.root, &#39;config&#39;, &#39;local<em>env.yml&#39;)\n    YAML.load(File.open(env</em>file)).each do |key, value|\n    ENV[key.to<em>s] = value\n    end if File.exists?(env</em>file)\n  end\n{% endcodeblock %}</p>\n\n<p>Para terminar, cambiamos el adaptador de postgresql a postgres porque sequel, una dependencia que trae Helios, lo usa. Debido a esto es muy importante configurar y crear la base de datos antes de introducir Helios en la aplicación ya que de lo contrario entraremos en un bucle infinito de cambio de adapatores. También cambiamos el usuario de la base de datos ya que, por defecto, PostgreSQL solo tendrá nuestro usuario local.</p>\n\n<p>{% codeblock lang:yaml %}\ndevelopment:\n    adapter: postgres\n    encoding: unicode\n    database: DealerErgoGo_development\n    pool: 5\n    username: javi\n    password:\n    host: localhost\n    port: 5432\n{% endcodeblock %}</p>\n\n<p>Y con esto ya tendríamos listo el backend. Podríamos probarlo en nuestra máquina local o desplegar directamente en Heroku. Para ello solo hay que tener <a href=\"https://toolbelt.heroku.com\">Heroku toolbelt</a> instalado, haber hecho commit de todos los cambios en la rama y principal y desde la carpeta del proyecto en el terminal escribir lo siguiente:</p>\n\n<p>{% codeblock lang:bash %}\n$ heroku create\n{% endcodeblock %}</p>\n\n<p>Para crear la aplicación y</p>\n\n<p>{% codeblock lang:bash %}\n$ git push heroku master\n{% endcodeblock %}</p>\n\n<p>Para desplegar la aplicación en Heroku. Listo, ya podemos disfrutar de nuestras 750 horas gratuitas al mes.</p>\n\n<h3>La decepción</h3>\n\n<p>Nos las prometíamos muy felices. El desarrollo y puesta en producción del backend había sido tan sencillo que confiábamos en que la creación de la aplicación iOS fuera igual y en realidad, esto no ha sido así.</p>\n\n<p>Para desarrollar la aplicación vamos a seguir <a href=\"https://devcenter.heroku.com/articles/ios-core-data-buildpack-app\">este tutorial de la web de Heroku</a>. Aparentemente no es muy complicado y de hecho no lo es, el problema es que cuando hayamos seguido todos los pasos y tengamos la aplicación lista para envíar datos a nuestro flamante servidor veremos que la grabación la hace bien pero el retorno de la información no y nuestra aplicación empieza a fallar. Llevo toda la semana leyendo las <em>issues</em> del repositorio y buscando en Stackoverflow a ver si doy con el correcto funcionamiento pero hasta ahora no he conseguido nada. Creo que es algo que se me ha pasado por alto en algún punto ya que es demasiado evidente que no está funcionando como para que no haya ninguna queja al respecto. En cualquier caso, yo mismo pondré un <em>issue</em> a ver si me pueden echar una mano.</p>\n\n<h2>Conclusiones</h2>\n\n<p>Si tu aplicación necesita de subir los datos a un servidor o simplemente leer unos datos sencillos: datos del tiempo, noticias, entradas de un blog, radares móviles,... Helios te puede ser de una gran ayuda. No recomiendo que uses AFIncrementalStore si no que, de momento, sería mejor que te hicieras tu propia sincronización con Core Data. </p>\n\n<p>Si ves que Helios se te empieza a quedar pequeño porque necesitas filtrar los datos en el servidor y no en la propia aplicación, no tengas miedo a dar el paso a Ruby on Rails. Llevará un poco más de trabajo pero no mucho más y eso ya si que es dar un salto cualitativo en la creación de tu propio backend ya que tendrás mucho más control sobre el mismo.</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1365636360000,"created_by":1,"updated_at":1365636360000,"updated_by":1,"published_at":1365636360000,"published_by":1},{"id":21,"title":"Helios II. Houston, Tenemos Un Problema.","slug":"helios-ii-houston","markdown":"{% blockquote CAPCOM Apollo XIII, Jack Swigert - Jack R. Lousma - James A. Lovell. %}\n- Okay, Houston, we've had a problem here.\n- This is Houston. Say again, please!\n- Uh, Houston, we've had a problem.\n{% endblockquote %}\n\nAprovechando que Rafa Aguilar (aka [@rais38](http://twitter.com/rais38)) ha publicado en [Objective-C.es](http://objective-c.es) un par de entradas sobre las notificaciones Push en iOS he decidido aparcar un par de cosillas que me tenían bastante atareado y continuar con el análisis de [Helios.io](http://helios.io) que había prometido.\n\n<!--more-->\n\nYo no me voy a detener a explicar en que consisten las notificaciones Push y que tipos podemos encontrar en iOS ya que Rafa lo ha explicado estupendamente si no que voy a contar como se desarrollaría el ejemplo de la segunda entrada con Ruby en lugar de con PHP. Para ello, usaré Houston, una gema desarrollada por [@mattt](http://twitter.com/mattt). La versión actual de Helios (que tiene unas pocas horas) ya incluye Houston de serie así que Helios y Orbiter nos proporcionan un backend completo para el envío de notificaciones Push.\n\nOs dejo los enlaces a los artículos de Rafa por si los queréis consultar antes de empezar:\n\n[Envío de notificaciones en iOS (Parte 1)](http://objective-c.es/envio-de-notificaciones-en-ios-parte-1/)\n\n[Envío de notificaciones en iOS (Parte 2)](http://objective-c.es/envio-de-notificaciones-en-ios-parte-2/)\n\n##Helios y Orbiter. Preparando el CAPCOM.\n\nSi habéis seguido las indicaciones del artículo de Objective-C.es, tendréis una aplicación instalada en vuestro dispositivo que vuelca al log de Xcode el token que le devuelven los servidores de Apple para las notificaciones Push.\nHelios y Orbiter nos proporcionan un sistema para almacenar esos tokens en un servidor, esto nos será útil cuando queramos enviar notificaciones desde nuestro servidor a los dispositivos que tengamos vinculados a nuestra aplicación. No será necesario pasar siempre el token al servicio si no que podría bastar con usar el *alias*.\n\nPara ello, nos descargamos Orbiter de GitHub y lo incorporamos a nuestro proyecto o bien usamos CocoaPods, lo que hagamos habitualmente y modificamos el siguiente método del AppDelegate:\n\n{% codeblock lang:objc %}\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken\n{\n    NSURL *serverURL = [NSURL URLWithString:@\"http://192.168.1.105:3000\"];\n    NSURLCredential *serverCredential = [NSURLCredential credentialWithUser:@\"YourUsername\" password:@\"YourPassword\" persistence:NSURLCredentialPersistencePermanent];\n    Orbiter *orbiter = [[Orbiter alloc] initWithBaseURL:serverURL credential:serverCredential];\n    [orbiter registerDeviceToken:deviceToken withAlias:@\"ApoloXIII\" success:^(id responseObject) {\n        NSLog(@\"Registration Success: %@\", responseObject);\n    } failure:^(NSError *error) {\n        NSLog(@\"Registration Error: %@\", error);\n    }];\n}\n{% endcodeblock %}\n    \nEl servidor que voy a utilizar para almacenar los tokens y enviar las notificaciones es el mismo de la entrada anterior sobre almacenamiento de datos y sincronización. Si recordáis, una de las cosas que hicimos fue poner seguridad por lo que necesitamos pasarle un usuario y una contraseña. Orbiter usa NSURLCredential para estos fines.\n\nSi hemos hecho todo correctamente, al arrancar la aplicación en el dispositivo obtendremos el siguiente resultado:\n\n{% codeblock lang:bash %}\n2013-05-01 11:07:01.903 CAPCOM[24399:907] Registration Success: {\ndevice =     {\n    alias = ApoloXIII;\n    badge = 0;\n    id = 1;\n    \"ip_address\" = \"<null>\";\n    language = es;\n    lat = \"<null>\";\n    lng = \"<null>\";\n    locale = \"es_ES\";\n    tags =         (\n        \"iPhone OS 6.1.3\",\n        \"v1.0\",\n        iPhone\n    );\n    timezone = \"Europe/Madrid\";\n    token = 1F0E7706D1A343BF17615051DB944743F18156C52EFF0F8DD43DDA23F156862A;\n    tsv = \"'1f0e7706d1a343bf17615051db944743f18156c52eff0f8dd43dda23f156862a':1 'apoloxiii':2 'es':3,4 'europe/madrid':5\";\n    };\n}\n{% endcodeblock %}\n    \nY en el panel de administración de Helios veremos lo siguiente:\n\n![]({{ site.url }}/assets/photos/2013/admin-helios-tokens.png)\n\nAhora tenemos que preparar nuestro servidor para que realice el envío de notificaciones Push. Como ya hemos comentado al principio, esta funcionalidad no la traía Helios en su primera versión y nos obligaba a nosotros a incluir y configurar esta gema. Hace pocas horas han actualizado el repositorio de Helios incluyendo la funcionalidad de envío de mensajes mediante Houston. Como el merge en GitHub es tan reciente, la gema que hay en [RubyGems.org](http://rubygems.org/gems/helios) todavía no está actualizada así que para poder usarla en nuestro proyecto Rails he tenido que indicar en el *gemfile* que tome el fuente de GitHub. Al hacerlo de esta forma, las dependencias no son visibles por el Bundler por lo que, para evitar errores, he indicado también que necesitamos la gema **Houston**.\n\n{% codeblock lang:bash %}\ngem 'helios', :git => 'git://github.com/helios-framework/helios.git'\ngem 'houston'\n{% endcodeblock %}\n \nAhora tendremos que guardar el certificado para realizar APS en alguna carpeta de nuestro proyecto y decirle a Helios donde está. Los pasos que hay que seguir para trabajar con los certificados están en el post de Rafa, lo único que haremos diferente es el paso de exportación del certificado, al que le daremos un nombre más *comodo* para nuestra configuración:\n\n{% codeblock lang:bash %}\n$ openssl pkcs12 -in CAPCOMAPNDEV.p12 -out apple_push_notification.pem -nodes -clcerts\n{% endcodeblock %}\n   \nEl fichero .pem resultante lo dejaremos en la carpeta *config* de nuestro proyecto (junto al xcdatamodel) y modificaremos la configuración de Helios en nuestro *application.rb* de la siguiente manera:\n\n{% codeblock lang:ruby %}\n# Using framework Helios as a middleware for our app\nconfig.middleware.use Helios::Application do\n  service :data, model: './config/DealerErgoGo.xcdatamodel'\n  service :push_notification, apn_certificate: '.config/apple_push_notification.pem', apn_environment: 'development'\n  service :in_app_purchase\n  service :passbook\nend    \n{% endcodeblock %}\n    \nPara comprobar que todo está bien configurado, ejecutamos la siguiente instrucción desde el terminal (recordad que nuestro servidor tiene configurado usuario y contraseña):\n\n{% codeblock lang:bash %}\ncurl -X POST --user \"username:password\" -d 'payload={\"aps\": {\"alert\":\"Okay, stand by Thirteen, we are looking at it.\",\"badge\":\"13\",\"sound\":\"default\"}}' http://localhost:3000/message \n{% endcodeblock %}\n\nListo, parece que ya tenemos comunicación con Houston... o por lo menos recibimos sus mensajes. ;-)\n\n![]({{ site.url }}/assets/photos/2013/notificacion-iphone.png)\n \nHouston incluye una utilidad de terminal a la que le pasamos un token, la ubicación del certificado y el mensaje que queremos enviar. Esto no verifica que hayamos configurado correctamente ningún servidor, solo que el certificado y el token sean correctos:\n\n{% codeblock lang:bash %}\n$ apn push \"1F0E7706D1A343BF17615051DB944743F18156C52EFF0F8DD43DDA23F156862A\" -c \"config/apple_push_notification.pem\" -m \"Okay, stand by Thirteen, we're looking at it.\"\n{% endcodeblock %}\n    \n## Siguientes pasos\n\nNuevamente vuelvo a tener sentimientos encontrados. Aunque esta vez he terminado más satisfecho de forma general con los resultados obtenidos de Helios, Orbiter y Houston todavía queda mucho por hacer para tener algo que se parezca mínimamente a lo que nos ofrecen Parse o Urban Airship\n\nHemos almacenado los tokens en nuestro servidor y hemos sido capaces de enviar notificaciones a nuestro dispositivo desde el terminal. Podríamos realizar el envío de mensajes desde la propia aplicación con un método semejante a este:\n\n{% codeblock lang:objc %}\n- (void)useHoustonServiceWithAlert:(NSString *)alert \n{\n    NSURL *url = [NSURL URLWithString:@\"http://localhost:3000\"];\n    AFHTTPClient *httpClient = [[AFHTTPClient alloc] initWithBaseURL:url];\n    [httpClient setAuthorizationHeaderWithUsername:@\"GoogleReader\" password:@\"F0r3v3r\"];\n    \n    NSDictionary *payload = @{@\"aps\": @{@\"alert\": alert, @\"sound\": @\"default\"}};\n    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:payload\n                                                       options:0\n                                                         error:nil];\n    \n    NSString *JSONString = [[NSString alloc] initWithBytes:[jsonData bytes] length:[jsonData length] encoding:NSUTF8StringEncoding];\n    \n    NSDictionary *params = [NSDictionary dictionaryWithObjectsAndKeys:\n                            JSONString, @\"payload\",\n                            nil];\n\n    [httpClient postPath:@\"/message\" parameters:params success:^(AFHTTPRequestOperation *operation, id responseObject) {\n        NSString *responseStr = [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding];\n        NSLog(@\"Request Successful, response '%@'\", responseStr);\n    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n        NSLog(@\"[HTTPClient Error]: %@\", error.localizedDescription);\n    }];\n}\n{% endcodeblock %}\n\nPero en realidad este mensaje no se lo estaríamos enviando al Apolo XIII solamente si no a toda la misión Apolo. Si nos atrevemos a mirar el código fuente de Helios, el fichero [*push-notification.rb*](https://github.com/helios-framework/helios/blob/master/lib/helios/backend/push-notification.rb) es bastante clarificador: no solo admite el parámetro *payload*, también admite otro parámetro llamado *tokens* que es de tipo *array*. Es decir, si le pasamos un array de tokens el mensaje solo llegará a los dispositivos determinados por esos tokens.\n\nPero los tokens están almacenados en el servidor, hacemos el registro con Orbiter cada vez que un dispositivo en el que instalamos la aplicación acepta que le enviemos notificaciones Push. ¿Tenemos que descargarnos el listado completo de tokens al dispositivo y filtrar por los *alias*? Parece que no.\n\nSi nos fijamos en el mismo fuente de antes, donde se define el método get devices, vemos que hay algunos parámetros que se le pueden pasar a dicho método: pages, per_page, limit, offset y q... los cuatro primeros son, obviamente, para controlar la paginación de los resultados y el quinto parece ser el indicado para hacer una *query* a la tabla *Device* pero, ¿qué es [*tsquery*](http://www.postgresql.org/docs/9.1/static/textsearch-tables.html)? Pues según la documentación de PostgreSQL es la forma de hacer búsqueda completa de texto dentro de una determinada entidad. \n\nEn realidad *tsquery* devolverá todas las registros en los que aparezca el **lexema** que estamos buscando, esto es, si queremos buscar el token del Apolo XIII haríamos una llamada como la siguiente: \n\n{% codeblock lang:bash %}\n$ curl -X GET --user \"GoogleReader:F0r3v3r\" http://localhost:3000/devices?q=ApoloXIII\n{% endcodeblock %}\n\t\nPero si, por ejemplo, quisiéramos buscar el token del Apolo XI:\n\n{% codeblock lang:bash %}\n$ curl -X GET --user \"GoogleReader:F0r3v3r\" http://localhost:3000/devices?q=ApoloXI\n{% endcodeblock %}\n\t\nRecuperariamos los tokens de los Apolos XI, XII, XIII y XIV. Es más, como la búsqueda se hace en todos los campos de la entidad Device, pudiera ser que recuperáramos algún otro registro más. Por ejemplo, si en vez de misiones espaciales utilizáramos como *alias* los nombres de las lunas de Jupiter. Al buscar el token de *Europe*, la consulta nos devolvería el token del alias *Europe* y el de todos los registros de dispositivos con *timezone* europeo.\n\nPara este caso particular, y viendo el funcionamiento de los servicios de Parse y Urban Airship, sería conveniente ampliar las funcionalidades de push-notification.rb para incluir los alias como parámetro y buscar sus tokens. Además sería conveniente hacer el envío de notificaciones en batch para los casos en los que hubiera muchos tokens. Sería recomendable que las notificaciones se almacenaran en base de datos y que el envío se hiciera en background... vamos, que esto es un no parar. :-)\n\nAun con todo el trabajo que queda por hacer, hemos podido ver lo sencillo que es montar un sistema de notificaciones para nuestras aplicaciones iOS. Si solo lo queremos para enviar, de vez en cuando, un mensajero para que nos compren alguna aplicación, con esto tenemos más que suficiente.\n\n\n\n\n\n\n","html":"<p>{% blockquote CAPCOM Apollo XIII, Jack Swigert - Jack R. Lousma - James A. Lovell. %}\n- Okay, Houston, we&#39;ve had a problem here.\n- This is Houston. Say again, please!\n- Uh, Houston, we&#39;ve had a problem.\n{% endblockquote %}</p>\n\n<p>Aprovechando que Rafa Aguilar (aka <a href=\"http://twitter.com/rais38\">@rais38</a>) ha publicado en <a href=\"http://objective-c.es\">Objective-C.es</a> un par de entradas sobre las notificaciones Push en iOS he decidido aparcar un par de cosillas que me tenían bastante atareado y continuar con el análisis de <a href=\"http://helios.io\">Helios.io</a> que había prometido.</p>\n\n<!--more-->\n\n<p>Yo no me voy a detener a explicar en que consisten las notificaciones Push y que tipos podemos encontrar en iOS ya que Rafa lo ha explicado estupendamente si no que voy a contar como se desarrollaría el ejemplo de la segunda entrada con Ruby en lugar de con PHP. Para ello, usaré Houston, una gema desarrollada por <a href=\"http://twitter.com/mattt\">@mattt</a>. La versión actual de Helios (que tiene unas pocas horas) ya incluye Houston de serie así que Helios y Orbiter nos proporcionan un backend completo para el envío de notificaciones Push.</p>\n\n<p>Os dejo los enlaces a los artículos de Rafa por si los queréis consultar antes de empezar:</p>\n\n<p><a href=\"http://objective-c.es/envio-de-notificaciones-en-ios-parte-1/\">Envío de notificaciones en iOS (Parte 1)</a></p>\n\n<p><a href=\"http://objective-c.es/envio-de-notificaciones-en-ios-parte-2/\">Envío de notificaciones en iOS (Parte 2)</a></p>\n\n<h2>Helios y Orbiter. Preparando el CAPCOM.</h2>\n\n<p>Si habéis seguido las indicaciones del artículo de Objective-C.es, tendréis una aplicación instalada en vuestro dispositivo que vuelca al log de Xcode el token que le devuelven los servidores de Apple para las notificaciones Push.\nHelios y Orbiter nos proporcionan un sistema para almacenar esos tokens en un servidor, esto nos será útil cuando queramos enviar notificaciones desde nuestro servidor a los dispositivos que tengamos vinculados a nuestra aplicación. No será necesario pasar siempre el token al servicio si no que podría bastar con usar el <em>alias</em>.</p>\n\n<p>Para ello, nos descargamos Orbiter de GitHub y lo incorporamos a nuestro proyecto o bien usamos CocoaPods, lo que hagamos habitualmente y modificamos el siguiente método del AppDelegate:</p>\n\n<p>{% codeblock lang:objc %}\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken\n{\n    NSURL *serverURL = [NSURL URLWithString:@&quot;http://192.168.1.105:3000&quot;];\n    NSURLCredential *serverCredential = [NSURLCredential credentialWithUser:@&quot;YourUsername&quot; password:@&quot;YourPassword&quot; persistence:NSURLCredentialPersistencePermanent];\n    Orbiter *orbiter = [[Orbiter alloc] initWithBaseURL:serverURL credential:serverCredential];\n    [orbiter registerDeviceToken:deviceToken withAlias:@&quot;ApoloXIII&quot; success:^(id responseObject) {\n        NSLog(@&quot;Registration Success: %@&quot;, responseObject);\n    } failure:^(NSError *error) {\n        NSLog(@&quot;Registration Error: %@&quot;, error);\n    }];\n}\n{% endcodeblock %}</p>\n\n<p>El servidor que voy a utilizar para almacenar los tokens y enviar las notificaciones es el mismo de la entrada anterior sobre almacenamiento de datos y sincronización. Si recordáis, una de las cosas que hicimos fue poner seguridad por lo que necesitamos pasarle un usuario y una contraseña. Orbiter usa NSURLCredential para estos fines.</p>\n\n<p>Si hemos hecho todo correctamente, al arrancar la aplicación en el dispositivo obtendremos el siguiente resultado:</p>\n\n<p>{% codeblock lang:bash %}\n2013-05-01 11:07:01.903 CAPCOM[24399:907] Registration Success: {\ndevice =     {\n    alias = ApoloXIII;\n    badge = 0;\n    id = 1;\n    &quot;ip<em>address&quot; = &quot;<null>&quot;;\n    language = es;\n    lat = &quot;<null>&quot;;\n    lng = &quot;<null>&quot;;\n    locale = &quot;es</em>ES&quot;;\n    tags =         (\n        &quot;iPhone OS 6.1.3&quot;,\n        &quot;v1.0&quot;,\n        iPhone\n    );\n    timezone = &quot;Europe/Madrid&quot;;\n    token = 1F0E7706D1A343BF17615051DB944743F18156C52EFF0F8DD43DDA23F156862A;\n    tsv = &quot;&#39;1f0e7706d1a343bf17615051db944743f18156c52eff0f8dd43dda23f156862a&#39;:1 &#39;apoloxiii&#39;:2 &#39;es&#39;:3,4 &#39;europe/madrid&#39;:5&quot;;\n    };\n}\n{% endcodeblock %}</p>\n\n<p>Y en el panel de administración de Helios veremos lo siguiente:</p>\n\n<p><img src=\"%7B%7B%20site.url%20%7D%7D/assets/photos/2013/admin-helios-tokens.png\" alt=\"\"></p>\n\n<p>Ahora tenemos que preparar nuestro servidor para que realice el envío de notificaciones Push. Como ya hemos comentado al principio, esta funcionalidad no la traía Helios en su primera versión y nos obligaba a nosotros a incluir y configurar esta gema. Hace pocas horas han actualizado el repositorio de Helios incluyendo la funcionalidad de envío de mensajes mediante Houston. Como el merge en GitHub es tan reciente, la gema que hay en <a href=\"http://rubygems.org/gems/helios\">RubyGems.org</a> todavía no está actualizada así que para poder usarla en nuestro proyecto Rails he tenido que indicar en el <em>gemfile</em> que tome el fuente de GitHub. Al hacerlo de esta forma, las dependencias no son visibles por el Bundler por lo que, para evitar errores, he indicado también que necesitamos la gema <strong>Houston</strong>.</p>\n\n<p>{% codeblock lang:bash %}\ngem &#39;helios&#39;, :git =&gt; &#39;git://github.com/helios-framework/helios.git&#39;\ngem &#39;houston&#39;\n{% endcodeblock %}</p>\n\n<p>Ahora tendremos que guardar el certificado para realizar APS en alguna carpeta de nuestro proyecto y decirle a Helios donde está. Los pasos que hay que seguir para trabajar con los certificados están en el post de Rafa, lo único que haremos diferente es el paso de exportación del certificado, al que le daremos un nombre más <em>comodo</em> para nuestra configuración:</p>\n\n<p>{% codeblock lang:bash %}\n$ openssl pkcs12 -in CAPCOMAPNDEV.p12 -out apple<em>push</em>notification.pem -nodes -clcerts\n{% endcodeblock %}</p>\n\n<p>El fichero .pem resultante lo dejaremos en la carpeta <em>config</em> de nuestro proyecto (junto al xcdatamodel) y modificaremos la configuración de Helios en nuestro <em>application.rb</em> de la siguiente manera:</p>\n\n<p>{% codeblock lang:ruby %}</p>\n\n<h1>Using framework Helios as a middleware for our app</h1>\n\n<p>config.middleware.use Helios::Application do\n  service :data, model: &#39;./config/DealerErgoGo.xcdatamodel&#39;\n  service :push<em>notification, apn</em>certificate: &#39;.config/apple<em>push</em>notification.pem&#39;, apn<em>environment: &#39;development&#39;\n  service :in</em>app_purchase\n  service :passbook\nend<br>\n{% endcodeblock %}</p>\n\n<p>Para comprobar que todo está bien configurado, ejecutamos la siguiente instrucción desde el terminal (recordad que nuestro servidor tiene configurado usuario y contraseña):</p>\n\n<p>{% codeblock lang:bash %}\ncurl -X POST --user &quot;username:password&quot; -d &#39;payload={&quot;aps&quot;: {&quot;alert&quot;:&quot;Okay, stand by Thirteen, we are looking at it.&quot;,&quot;badge&quot;:&quot;13&quot;,&quot;sound&quot;:&quot;default&quot;}}&#39; http://localhost:3000/message \n{% endcodeblock %}</p>\n\n<p>Listo, parece que ya tenemos comunicación con Houston... o por lo menos recibimos sus mensajes. ;-)</p>\n\n<p><img src=\"%7B%7B%20site.url%20%7D%7D/assets/photos/2013/notificacion-iphone.png\" alt=\"\"></p>\n\n<p>Houston incluye una utilidad de terminal a la que le pasamos un token, la ubicación del certificado y el mensaje que queremos enviar. Esto no verifica que hayamos configurado correctamente ningún servidor, solo que el certificado y el token sean correctos:</p>\n\n<p>{% codeblock lang:bash %}\n$ apn push &quot;1F0E7706D1A343BF17615051DB944743F18156C52EFF0F8DD43DDA23F156862A&quot; -c &quot;config/apple<em>push</em>notification.pem&quot; -m &quot;Okay, stand by Thirteen, we&#39;re looking at it.&quot;\n{% endcodeblock %}</p>\n\n<h2>Siguientes pasos</h2>\n\n<p>Nuevamente vuelvo a tener sentimientos encontrados. Aunque esta vez he terminado más satisfecho de forma general con los resultados obtenidos de Helios, Orbiter y Houston todavía queda mucho por hacer para tener algo que se parezca mínimamente a lo que nos ofrecen Parse o Urban Airship</p>\n\n<p>Hemos almacenado los tokens en nuestro servidor y hemos sido capaces de enviar notificaciones a nuestro dispositivo desde el terminal. Podríamos realizar el envío de mensajes desde la propia aplicación con un método semejante a este:</p>\n\n<p>{% codeblock lang:objc %}\n- (void)useHoustonServiceWithAlert:(NSString *)alert \n{\n    NSURL *url = [NSURL URLWithString:@&quot;http://localhost:3000&quot;];\n    AFHTTPClient *httpClient = [[AFHTTPClient alloc] initWithBaseURL:url];\n    [httpClient setAuthorizationHeaderWithUsername:@&quot;GoogleReader&quot; password:@&quot;F0r3v3r&quot;];</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">NSDictionary *payload = @{@&quot;aps&quot;: @{@&quot;alert&quot;: alert, @&quot;sound&quot;: @&quot;default&quot;}};\nNSData *jsonData = [NSJSONSerialization dataWithJSONObject:payload\n                                                   options:0\n                                                     error:nil];\n\nNSString *JSONString = [[NSString alloc] initWithBytes:[jsonData bytes] length:[jsonData length] encoding:NSUTF8StringEncoding];\n\nNSDictionary *params = [NSDictionary dictionaryWithObjectsAndKeys:\n                        JSONString, @&quot;payload&quot;,\n                        nil];\n\n[httpClient postPath:@&quot;/message&quot; parameters:params success:^(AFHTTPRequestOperation *operation, id responseObject) {\n    NSString *responseStr = [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding];\n    NSLog(@&quot;Request Successful, response &#39;%@&#39;&quot;, responseStr);\n} failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n    NSLog(@&quot;[HTTPClient Error]: %@&quot;, error.localizedDescription);\n}];\n</code></pre></div>\n<p>}\n{% endcodeblock %}</p>\n\n<p>Pero en realidad este mensaje no se lo estaríamos enviando al Apolo XIII solamente si no a toda la misión Apolo. Si nos atrevemos a mirar el código fuente de Helios, el fichero <a href=\"https://github.com/helios-framework/helios/blob/master/lib/helios/backend/push-notification.rb\"><em>push-notification.rb</em></a> es bastante clarificador: no solo admite el parámetro <em>payload</em>, también admite otro parámetro llamado <em>tokens</em> que es de tipo <em>array</em>. Es decir, si le pasamos un array de tokens el mensaje solo llegará a los dispositivos determinados por esos tokens.</p>\n\n<p>Pero los tokens están almacenados en el servidor, hacemos el registro con Orbiter cada vez que un dispositivo en el que instalamos la aplicación acepta que le enviemos notificaciones Push. ¿Tenemos que descargarnos el listado completo de tokens al dispositivo y filtrar por los <em>alias</em>? Parece que no.</p>\n\n<p>Si nos fijamos en el mismo fuente de antes, donde se define el método get devices, vemos que hay algunos parámetros que se le pueden pasar a dicho método: pages, per_page, limit, offset y q... los cuatro primeros son, obviamente, para controlar la paginación de los resultados y el quinto parece ser el indicado para hacer una <em>query</em> a la tabla <em>Device</em> pero, ¿qué es <a href=\"http://www.postgresql.org/docs/9.1/static/textsearch-tables.html\"><em>tsquery</em></a>? Pues según la documentación de PostgreSQL es la forma de hacer búsqueda completa de texto dentro de una determinada entidad. </p>\n\n<p>En realidad <em>tsquery</em> devolverá todas las registros en los que aparezca el <strong>lexema</strong> que estamos buscando, esto es, si queremos buscar el token del Apolo XIII haríamos una llamada como la siguiente: </p>\n\n<p>{% codeblock lang:bash %}\n$ curl -X GET --user &quot;GoogleReader:F0r3v3r&quot; http://localhost:3000/devices?q=ApoloXIII\n{% endcodeblock %}</p>\n\n<p>Pero si, por ejemplo, quisiéramos buscar el token del Apolo XI:</p>\n\n<p>{% codeblock lang:bash %}\n$ curl -X GET --user &quot;GoogleReader:F0r3v3r&quot; http://localhost:3000/devices?q=ApoloXI\n{% endcodeblock %}</p>\n\n<p>Recuperariamos los tokens de los Apolos XI, XII, XIII y XIV. Es más, como la búsqueda se hace en todos los campos de la entidad Device, pudiera ser que recuperáramos algún otro registro más. Por ejemplo, si en vez de misiones espaciales utilizáramos como <em>alias</em> los nombres de las lunas de Jupiter. Al buscar el token de <em>Europe</em>, la consulta nos devolvería el token del alias <em>Europe</em> y el de todos los registros de dispositivos con <em>timezone</em> europeo.</p>\n\n<p>Para este caso particular, y viendo el funcionamiento de los servicios de Parse y Urban Airship, sería conveniente ampliar las funcionalidades de push-notification.rb para incluir los alias como parámetro y buscar sus tokens. Además sería conveniente hacer el envío de notificaciones en batch para los casos en los que hubiera muchos tokens. Sería recomendable que las notificaciones se almacenaran en base de datos y que el envío se hiciera en background... vamos, que esto es un no parar. :-)</p>\n\n<p>Aun con todo el trabajo que queda por hacer, hemos podido ver lo sencillo que es montar un sistema de notificaciones para nuestras aplicaciones iOS. Si solo lo queremos para enviar, de vez en cuando, un mensajero para que nos compren alguna aplicación, con esto tenemos más que suficiente.</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1367458560000,"created_by":1,"updated_at":1367458560000,"updated_by":1,"published_at":1367458560000,"published_by":1},{"id":22,"title":"Sobre Memorión","slug":"sobre-memorion","markdown":"Hablando un día por Twitter, Miguel Díaz Rubio (aka [@migueldiazrubio](http://twitter.com/migueldiazrubio)) cometió la imprudencia de animarme a escribir algo en su blog: [www.migueldiazrubio.com](http://www.migueldiazrubio.com). Obviamente le dije que si, el blog de Miguel junto con el de [Objective-C.es](http://objective-c.es) son de lo mejorcito que hay ahora mismo en castellano para aprender Objective-C y Cocoa Touch, las herramientas necesarias para hacer aplicaciones iOS y una oportunidad para ayudar a estos *máquinas* no podía desperdiciarse. \n\n<!--more-->\n\nHoy se ha publicado en el blog de Miguel [mi primera colaboración](http://www.migueldiazrubio.com/2013/05/17/desarrollo-ios-primeros-pasos-con-uicollectionview-parte-ii/) (espero que me deje hacer alguna más), un tutorial sobre como hacer un juego de encontrar las parejas basado en un componente que se presento en iOS 6: UICollectionView. Este era un tutorial que tenía pensado colgar en este blog más pronto o más tarde pero estoy seguro que en el blog de Miguel podrá ser de utilidad a más gente.\n\nNo es un ejemplo que se me haya ocurrido sobre la marcha, llevo trabajando a ratos en una aplicación muy parecida a la del tutorial desde hace seis meses. Por esta razón me ha parecido oportuno escribir esta entrada que explica de donde me vino la inspiración.\n\nEn diciembre del año pasado mi hija estuvo ingresada un par de días en el hospital (un sustejo del que afortunadamente se recuperó perfectamente). Un par de días en los que jugamos a todos los juegos que había en el hospital más alguno que llevamos de casa. Su favorito era uno con piezas que había que poner boca abajo, e ir dando la vuelta de dos en dos hasta encontrar todas las parejas.    \nRecordé que en la aplicación Phytonista había un ejemplo que consistía precisamente en un juego como este y que usaba los animales del teclado emoji como personajes del juego. \n\n> Merece mucho la pena ver el código para darse cuenta de la potencia de Python ya que con muy pocas líneas tienes el juego funcionando.  \n\nEl caso es que pensé en si sería mucho más complicado hacerlo en Objective-C, sobre todo el grid de tarjetas y en ese momento caí en la cuenta de que UICollectionView podría ser un buen candidato ya que se alimenta fácilmente con un array y permite definir el tamaño de las celdas,...\n\nUna vez recuperados del susto, empece a probar si mi idea era cierta y en seguida vi que si, que UICollectionView era genial para hacer este juego. Desde entonces, a ratos, he ido metiéndole funcionalidad para hacer el juego algo más interesante y entretenido. La verdad es que mi hija se lo pone en el iPad sin que yo le diga nada, así que no debe estar muy mal hecho ;-)\n\nSi alguien está interesado en probarlo y no tiene cuenta de desarrollador, que me lo diga, no me vendrá mal tener más beta-tester. \n\nEl código fuente podéis verlo [aquí](https://github.com/jmoreno/Memorion).","html":"<p>Hablando un día por Twitter, Miguel Díaz Rubio (aka <a href=\"http://twitter.com/migueldiazrubio\">@migueldiazrubio</a>) cometió la imprudencia de animarme a escribir algo en su blog: <a href=\"http://www.migueldiazrubio.com\">www.migueldiazrubio.com</a>. Obviamente le dije que si, el blog de Miguel junto con el de <a href=\"http://objective-c.es\">Objective-C.es</a> son de lo mejorcito que hay ahora mismo en castellano para aprender Objective-C y Cocoa Touch, las herramientas necesarias para hacer aplicaciones iOS y una oportunidad para ayudar a estos <em>máquinas</em> no podía desperdiciarse. </p>\n\n<!--more-->\n\n<p>Hoy se ha publicado en el blog de Miguel <a href=\"http://www.migueldiazrubio.com/2013/05/17/desarrollo-ios-primeros-pasos-con-uicollectionview-parte-ii/\">mi primera colaboración</a> (espero que me deje hacer alguna más), un tutorial sobre como hacer un juego de encontrar las parejas basado en un componente que se presento en iOS 6: UICollectionView. Este era un tutorial que tenía pensado colgar en este blog más pronto o más tarde pero estoy seguro que en el blog de Miguel podrá ser de utilidad a más gente.</p>\n\n<p>No es un ejemplo que se me haya ocurrido sobre la marcha, llevo trabajando a ratos en una aplicación muy parecida a la del tutorial desde hace seis meses. Por esta razón me ha parecido oportuno escribir esta entrada que explica de donde me vino la inspiración.</p>\n\n<p>En diciembre del año pasado mi hija estuvo ingresada un par de días en el hospital (un sustejo del que afortunadamente se recuperó perfectamente). Un par de días en los que jugamos a todos los juegos que había en el hospital más alguno que llevamos de casa. Su favorito era uno con piezas que había que poner boca abajo, e ir dando la vuelta de dos en dos hasta encontrar todas las parejas.<br>\nRecordé que en la aplicación Phytonista había un ejemplo que consistía precisamente en un juego como este y que usaba los animales del teclado emoji como personajes del juego. </p>\n\n<blockquote>\n<p>Merece mucho la pena ver el código para darse cuenta de la potencia de Python ya que con muy pocas líneas tienes el juego funcionando.  </p>\n</blockquote>\n\n<p>El caso es que pensé en si sería mucho más complicado hacerlo en Objective-C, sobre todo el grid de tarjetas y en ese momento caí en la cuenta de que UICollectionView podría ser un buen candidato ya que se alimenta fácilmente con un array y permite definir el tamaño de las celdas,...</p>\n\n<p>Una vez recuperados del susto, empece a probar si mi idea era cierta y en seguida vi que si, que UICollectionView era genial para hacer este juego. Desde entonces, a ratos, he ido metiéndole funcionalidad para hacer el juego algo más interesante y entretenido. La verdad es que mi hija se lo pone en el iPad sin que yo le diga nada, así que no debe estar muy mal hecho ;-)</p>\n\n<p>Si alguien está interesado en probarlo y no tiene cuenta de desarrollador, que me lo diga, no me vendrá mal tener más beta-tester. </p>\n\n<p>El código fuente podéis verlo <a href=\"https://github.com/jmoreno/Memorion\">aquí</a>.</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1368824640000,"created_by":1,"updated_at":1368824640000,"updated_by":1,"published_at":1368824640000,"published_by":1},{"id":23,"title":"Mamá, Salgo en Un Podcast!","slug":"mama-salgo-en-un-podcast","markdown":"Aunque el COBOL no esté dentro de la temática habitual de este blog, si habéis leido mi entrada sobre mis diez años como programador, sabréis que los proyectos a los que me dedico durante el día tienen a ese *maravilloso* lenguaje como base para el desarrollo. Por este motivo, cada vez que se habla de COBOL salto como un resorte y en [uno de esos saltos](https://twitter.com/jmoreno78/statuses/274461772721827840), [Jose Antonio Blanco](http://twitter.com/jablanco) cometió la locura de dejarme participar en el podcast [We.Developers](http://wedevelopers.com).      \nSupongo que la audiencia le bajará estrepitosamente. Si queréis echar un vistazo al guión que preparé, es el cuerpo principal de este post.\n\n<!--more-->\n\n## Citas relacionadas con COBOL\n\nNo hay muchas, la verdad. Las mejores son las que hacen un poco de leña con el lenguaje, como la de Dijktstra. Son un *poco* ofensivas pero la verdad es que son graciosas. Echale un vistazo a estas a ver que te parecen:\n\n> The use of COBOL cripples the mind; its teaching should, therefore, be regarded as a criminal offence.    \n— Edsger Dijkstra\n\n> Cobol has almost no fervent enthusiasts. As a programming tool, it has roughly the sex appeal of a wrench.    \n— Charles Petzold\n\n> A computer without COBOL and FORTRAN is like a piece of chocolate cake without ketchup or mustard.    \n— John Krueger\n\n> The tree large enough that a stake capable of killing COBOL could be fashioned from its trunk has not yet grown anywhere upon the face of this verdant planet.     \n— Dan Martinez\n\nComo puedes ver, las tres primeras son bastante jocosas con el lenguaje... la última es bastante real y es la que no buscar herir el lenguaje. Vendría a traducirse a algo así como:\n\n> El árbol lo suficientemente largo como para que una estaca capaz de matar al COBOL pudiera sacarse de su tronco todavía no ha crecido lo suficiente en ningún lugar de este verde planeta.    \n- Dan Martinez\n\n##Historia\n\nA finales de los años 50, con la aparición de las primeras máquinas *comerciales* los usuarios empazaban a reclamar a los fabricantes una convergencia en los lenguajes de programación ya que por aquel entonces lo habitual era que cada fabricante tuviera su propio lenguaje para comunicarse con sus máquinas.    \nUna comisión formada por fabricantes de ordenadores, usuarios, trabajadores de la Universidad de Pennsylvania y el Departamento de Defensa de los Estados Unidos fue la que, después de tan solo seis meses de trabajo, definió el lenguaje COBOL, siglas de COmmon Bussines Oriented Language.   \nUn par de años antes, Grace Hopper había desarrollado FLOW-MATIC, un lenguaje pionero ya que empleaba instrucciones en ingles para comunicarse con la máquina. Precisamente para poder transformar estas instrucciones en lenguaje máquina, Grace Hopper creó el primer compilador. Este lenguaje FLOW-MATIC fue en el que más se basó la comisión por lo que, a modo de atribución, se llama a Grace Hopper la madre de COBOL ya que en realidad no tuvo un papel tan preponderante en la comisión. \n\nDespués de la primera definición del lenguaje en el año 59, se realizaron varias revisiones mayores: en el 68, 74, 85 y 2002. La más frecuente suele ser una mejora del año 89 sobre la del 85. La del año 2002 es la que introduce muchos más cambios como orientación a objetos, soporte a mucho más tipos de variables, generación y parseo de XML pero no está muy implementada. \n\n##Características\n\nLa principal característica del COBOL está en su propio nombre: es un lenguaje totalmente orientado a la automatización de procesos de negocio. Quizá ese y no otro sea el principal motivo por el que sigue tan vigente. La mayoría de los lenguajes de programación de los que hablamos hoy en día (C, Java, C++, Objective-C, PHP, Javascript, Python, Ruby, etc) sirven para hacer cualquier tipo de programa. Obviamente están orientados a unas determinadas tecnologías o nichos de mercado: juegos, desarrollo web, drivers, aplicaciones de escritorio, aplicaciones móviles, etc pero no hay ninguno que sirva específicamente para hacer un CRM. COBOL fue diseñado específicamente para dar respuestas a una serie de necesidades que tenían las empresas para automatizar sus procesos. Todos querían un único lenguaje que les permitiera hacer eso, automatizaron sus procesos, procesos que en su mayoría no han cambiado en los últimos 50 o 60 años: emisión de recibos, listados de inventario, contratación de productos, control de actividad de procesos, etc. \n\nOtra característica novedosa para la época era que soportaba nombres de variables y de métodos de hasta 32 caracteres. Por esto se habla a veces de la *verbosidad* del COBOL. El código es muy legible y casi autodocumentado. Una de las cosas que tuvo muy en cuenta la comisión para el diseño del lenguaje es que un Gerente sin formación técnica pudiera leer el código fuente de un programa y entender que es lo que estaba pasando (luego llego el GOTO y acabo con este sueño dorado). Todos los lenguajes de programación tienen una fuerte influencia de la lengua inglesa pero con pocos tienes la sensación de estar hablando con la máquina como con COBOL: Como programador, escribir i++ y que la variable i aumente su valor en una unidad es una sensación de poder. Para un usuario, leer ADD 1 TO INDEX no deja lugar a dudas.\nEso no quita para que no haya que poner comentarios: la duda que nos surgirá cuando leamos la instrucción anterior en cualquier lenguaje es: ¿por qué cojones aumenta el indice?\n\nEs un lenguaje de tipado débil. Solo hay dos tipos de variables: numéricas y alfanuméricas. Dentro de las numéricas hay bastantes tipos de empaquetamientos: binario, hexadecimal, decimal comprimido, sin comprimir, editados... un lenguaje dedicado al mundo empresarial tiene que tener una buena gestión de variables numéricas. Es importante destacar que en la definición de la variable se indica explícitamente su longitud, es decir, el número de bytes que necesita. También pueden contruirse arrays.\n\nLas variables pueden agruparse dentro de otras variables (una especie de estructuras de C... pero solo una especie) identificandose la pertenencia a un grupo mediante la indentación por código de nivel. Un ejemplo sería una cuenta corriente: A nivel 01 estaría la variable CUENTA-CORRIENTE, a nivel 05 tendríamos CODIGO-BANCO, CODIGO-SUCURSAL, PRIMER-DIGITO-CONTROL, SEGUNDO-DIGITO-CONTROL y NUMERO-CUENTA. Si utilizamos numéricos de base decimal solo ocuparíamos 20 bytes, es decir, los 20 bytes estarían divididos en cinco bloques de 4, 4, 1, 1 y 10 bytes. \n\n    01  CUENTA-CORRIENTE\n        05  CODIGO-BANCO           PIC 9(4).\n        05  CODIGO-SUCURSAL        PIC 9(4).\n        05  PRIMER-DIGITO-CONTROL  PIC 9.\n        05  SEGUNDO-DIGITO-CONTROL PIC 9(1).\n        05  NUMERO-CUENTA          PIC 9(10).\n    \nNo es necesario definir el tipo y la longitud de la variable de primer nivel. Siempre será alfanumérica y ocupara los mismos bytes que las variables que agrupa. En este caso, si queremos tratarla como numérica tendríamos que redefinirla como numérica. Esto se hace con la instrucción REDEFINES.\n\n    01 CUENTA-CORRIENTE-NUMERICA   PIC 9(20).\n    01 CUENTA-CORRIENTE REDEFINES CUENTA-CORRIENTE-NUMERICA.\n\nNo hay variables de tipo booleano, se construyen mediante niveles especiales de indentación pero en realidad se parecen mas a un *enum*. La diferencia con los enum es que podemos evaluar variables numéricas y alfanuméricas.\n\nLa estructura de un programa COBOL es muy rígida: Consta de cuatro partes aunque no todas son obligatorias: \n- Una primera de encabezado (IDENTIFICATION DIVISION), donde se pone el nombre del programa, el autor, las fecha de compilación, etc. \n- Una segunda de configuración del entorno (ENVIRONMENT DIVISION), cuando el programa accede a ficheros esta es la sección donde se informan las características de dicho fichero, si en lugar de trabajar con punto como separador decimal se utilizase la coma se indicaría en esta sección. \n- Una tercera para los datos (DATA DIVISION) donde se definen todas las variables que va a utilizar el programa, se aporta algo más de información sobre los ficheros que se hubieran definido en la sección anterior, etc.\n- Una cuarta para las instrucciones (PROCEDURE DIVISION) que sería lo que actualmente entendemos por programa. Es donde se tira el código.\n\nAdemás de la rigidez de la secciones, el número de columna donde se escribe también es muy importante: los seis primero caracteres están reservados, el séptimo solo se utiliza para comentar o descomentar el código. Del 8 al 11 están reservados para la identificación de las divisiones y las secciones, los niveles 01 de variables y las definiciones de los ficheros. Esto es lo que se conoce como zona A. De la 12 a la 72 es la zona normal para codificar y se conoce como zona B. De la columna 72 a la 80 tampoco se debe escribir ya que el compilador no va a leer lo que ahí escribamos. Esta estructura procede de la forma original de programa en COBOL. Al principio no había IDE´s si no que se usaban fichas de programación. Estas fichas se introducían en los compiladores y si todo era correcto se generaban las tarjetas perforadas con las que funcionaban los mainframes. Aunque ya no haya tarjetas perforadas y se utilicen IDE´s para la codificación, estas restricciones se mantienen en los compiladores actuales.\n\n##Plataformas y Variantes\n\nAunque la plataforma habitual son los Mainframes se pueden encontrar programas para ordenadores personales. En este punto puedo meter la pata porque el entorno que yo conozco es el mainframe. Aunque el lenguaje COBOL es el mismo, a la versión del lenguaje que se utiliza para desarrollar aplicaciones que luego van a correr en sistemas operativos de ordenadores personales se la llama RM-COBOL. Hay empresas actuales que comercializan productos para seguir desarrollando y manteniendo estos programas como MicroFocus. \n\nEn entorno mainframe la versión más extendida es la del año 85 revisada en el 89. En algunos lugares se puede encontrar una versión denominada ENTERPRISE que además se actualiza con más frecuencia. Cuando me han hablado de ella, lo que más me han destacado es que permite trabajar con variables numéricas de mayor tamaño por lo que se usa en entidades financieras en las que los importes son muy elevados y existe riesgo de perder cifras significativas.\n\nLa versión de 2002 \"oficializa\" algunos desarrollos de terceros existentes que permiten embeber código COBOL en servicios .NET, Java, etc. Yo no he conocido a nadie que haya hecho algo de esto. No se si será más habitual en otros tipos de clientes, en otros países o si será algo menos frecuente como los programas RM-COBOL. \n\n### Entornos de desarrollo\n\nAunque se puede programar en cualquier editor de notas. He conocido gente que escribían los programas en Ultra-Edit, otros que lo hacían en SPFPC, un programa MS-DOS con el que se puede escribir un programa, compilarlo, ejecutarlo, etc.\n\nIBM, que es la reina indiscutible en este baile, tiene herramientas de desarrollo COBOL sobre Rational por lo que los programadores de COBOL no tendríamos nada que envidiar a los de Java, aun así, creo que lo más normal si se trabaja en entorno mainframe es usar el IDE que provee el sistema operativo del mainframe o algún otro IDE de terceros que se instale en el mainframe. \n\nEl sistema operativo Z/OS, es el que actualmente traen los ainframes de IBM. Este sistema operativo incluye las funcionalidades originales del MVS pero se le ha agregado compatibilidad con UNIX, soporte para espacios de memoria virtual lo que hace que los mainframe no solo sirvan para tener las funciones clásicas. Entre las características que tiene este sistema operativo se encuentra la de traer de serie un entorno de desarrollo en el que crear, compilar y ejecutar programas contra el propio mainframe... y desde el propio mainframe. Porque no hemos de olvidar que el acceso a este bicharraco se hace siempre desde terminales tontos. En este entorno de desarrollo, cada usuario puede tener su configuración,... el sistema operativo es multiusuario y multitarea. Yo puedo conectarme en mi pc de Madrid al Host de mi empresa, desde un portátil en el AVE Madrid-Barcelona, en el equipo de un compañero en la oficina de Barcelona... y si lo hago con mi usuario y contraseña siempre estaré viendo mi configuración, mis programas, mis librerías y mis permisos. Esto es así desde los años 70... ¿Cuantos años lleva Linode ofreciendo estas ventajas a los desarrolladores? Si, no se puede comparar lo que puede desarrollarse en un mainframe con lo que podemos hacer desde una virtualización de Linode pero la reflexión que yo siempre me hago es que los ciclos también llegan a la tecnología.\n\nComo en cualquier otro lenguaje, COBOL no sería nada si no fuera por otras tecnologías que están a su alrededor. Igual que PHP casi siempre va acompañado de MySQL y de un servidor Apache, el COBOL siempre va rodeado de una serie de términos (tecnologías) que suelen verse en ofertas de empleo. Se suelen buscar expertos en COBOL-CICS-DB2 con conocimientos de JCL, VSAM, IMS, SORTFD o cosas así. Salvando las distancias y pidiendo perdón de antemano a los compañeros del PHP por las confianzas que me estoy tomando, COBOL-CICS-DB2 es el LAMP, MAMP o WAMP del PHP:\n\nCICS es el nombre del terminal de teleproceso que incluyen los mainframes y que son los que permiten las conexiones on-line al sistema desde cualquier terminal tonto o emulador de terminal tonto. Es también el encargado de servir información a los servicios web (estos ya desarrollados en cualquier lenguaje aunque Java es un habitual) que se conectan al CICS a través de algún Gateway. No requiere unos conocimientos adicionales al lenguaje, solo que hay una serie de instrucciones en el lenguaje que solo sirven cuando el programa se va a utilizar en una instalación CICS.\n\nDB2 es una base de datos relacional, igual que MySQL, SQL Server, Oracle, etc. Es un producto de IBM que se puede instalar en distribuido y en mainframe. Al igual que el CICS, el único conocimiento adicional que se requiere es el de saber SQL, ya que es como se accede a la base de datos desde un programa COBOL.\n\nIMS es un gestor de bases de datos jerárquicas, no es lo más actual pero todavía se sigue usando en algún sitio.\n\nVSAM es un sistema de almacenamiento indexado. Aunque también esta muy desfasado, todavía es posible encontrar instalaciones que los usan. Los ficheros de tipo VSAM se usan para hacer la persistencia del DB2 así que para IBM siguen siendo de gran importancia.\n\nJCL es el sistema que se utiliza para ejecutar un proceso Batch. No sirve solo para procesos COBOL sino también para lanzar muchas utilidades que vienen en el Sistema Operativo de los mainframes: utilidades del DB2, procesos de ordenamiento de ficheros planos con SORTFD. Es como un fichero de configuración o mejor, como una plantilla en la que se le dice al sistema operativo el entorno en el que se quiere ejecutar el programa, que programa es el que se va a ejecutar, quien es el usuario que lo lanza para ver si tiene permisos, donde están los ficheros, que estructura tienen, que tamaño se les ha definido, etc. Quizá es a la hora de preparar un JCL cuando mayor es la sensación de estar trabajando con una tecnología con más de 50 años de historia: se habla de fichas, cilindros, pistas, cintas...\n\n\n##Para que se usa hoy en día\n\nHoy en día el COBOL está presente en multitud de situaciones cotidianas. Casi todos los sistemas bancarios están desarrollados en COBOL: ordenes de transferencia, venta de acciones, de valores, conciliaciones bancarias, procesos de facturación de grandes compañías telefónicas, o de grandes cadenas de supermercados. Aplicaciones completas de gestión de compañías de seguros, procesos de control de centrales eléctricas, aplicaciones de inventario de almacén... y así hasta el infinito. \nCuando se habla de la longevidad del COBOL no es porque queden muchos procesos antiguos que nadie se atreve a migrar, es que como esos desarrollos no están aislados, se sigue haciendo nuevo desarrollo en esta plataforma.\n\nQuizá no somos conscientes porque la capa de presentación que vemos nosotros es una aplicación de escritorio tipo Windows, o una página web pero el COBOL está ahí, por debajo. Incluso en alguna aplicación de un dispositivo móvil, los datos son extraídos por un programa COBOL.\n\nSi alguien se ha fijado alguna vez en unos ordenadores todo-en-uno que suele haber en El Corte Ingles en los que te buscan si un articulo está agotado o si lo puedes encontrar en otro centro a través de una pantalla negra en la que van tecleando y pulsando las teclas de función para moverse por las pantallas habrá visto un terminal CICS. La agencia de viajes y los seguros de El Corte Ingles también se contratan con un terminal CICS. \n\nPara mal o para bien, procesos muy críticos para compañías que mueven un gran volumen de dinero están desarrollados en COBOL, podrían haberse desarrollado en cualquier otro lenguaje más moderno y con más prestaciones pero se desarrollaron en COBOL. A día de hoy, plantearse una refactorización completa de esos programas a otro lenguaje no solo requiere mucho tiempo si no también una gran valentía, y en realidad hay que plantearse también si compensa el cambio.\n\nEsta claro que IBM tiene bien agarrados a los departamentos de sistemas que tienen un mainframe... pero también hay que entender que no todas las empresas son como Facebook o Twitter que pueden plantearse un gran cambio de tecnología. Aunque parezca mentira, en esas grandes entidades financieras, compañías telefónicas, cadenas de alimentación hay departamentos de Sistemas que no son muy grandes y que tienen que hacer frente a desarrollos nuevos y a   mantenimientos muy fuertes por lo que no es de extrañar que sigan apostando por conservar esa tecnología. Una tecnología que no está dando ningún problema, por otro lado, ¿hay que cambiarla simplemente porque sea vieja o no haya muchos programadores?\n\nSobre el número de programadores y su cotización también hay que aclarar algunas cosas. Lo primero es una triste noticia: la cotización de un programador COBOL no está unida a un sueldo alto. Gana como cualquier otro programador experimentado en Java, .Net o lo que sea. Aunque no hay una necesidad tan alta de programadores COBOL como hubo en los años del efecto 2000 o del cambio de la peseta al euro, se siguen haciendo muchos mantenimientos y nuevos desarrollos que requieren programadores COBOL y estoy convencido de que la demanda no disminuirá en los próximos años. \n\n##Futuro\n\nHay una frase que se le atribuye a Bill Gates que dice: \"no se que lenguajes de programación habrá en el futuro pero COBOL estará allí\". Yo estoy totalmente de acuerdo.\n\nComo ya he comentado en el apartado anterior, el COBOL está presente en procesos de vital importancia para empresas que mueven muchísimo dinero y además está presente en los procesos que garantizan que esas empresas sigan ganando dinero. Mientras IBM siga sirviendo Series Z estos procesos habrá que seguir manteniéndolos. Además, a medida que van apareciendo nuevas tecnologías, estas empresas no optan por sustituir los procesos COBOL por procesos codificados en lenguajes más modernos si no que buscan formas para que los procesos COBOL sigan funcionando: es posible enviar un email desde un  JCL, perfectamente podría enviarse un SMS, hacer una notificación PUSH o lo que venga a continuación.\n\nEstá claro que el COBOL no se va a utilizar para programar la próxima Red Social, o para hacer el Backend de un whatsapp, pero las empresas que mantienen procesos COBOL también utilizan tecnologías actuales que se han podido integrar así que a medida que sigan apareciendo nuevas tecnologías y estas se puedan seguir integrando, el COBOL seguirá.\n\nA veces aparecen corrientes a favor de la desaparición del COBOL, o que auguran el final de IBM... hay hueco para todos y lo seguirá habiendo.\n\n##¿Como se puede aprender COBOL?\n\nLos programadores COBOL son como los Sith, siempre van juntos maestro y aprendiz... es una tradición oral que va pasando de generación en generación y de la que nunca queda constancia escrita... o casi.\n\nAhora más en serio, por hacer caso a Dijkstra, las universidades no enseñan COBOL, tampoco enseñan Objective-C... las universidades son así. \nYo aprendí a programar en COBOL en una academia, a través de una oferta de trabajo para gente que no tuviera experiencia en programación o muy poca experiencia. No se anuncian tanto como las que te enseñan a programar en Java o a hacer aplicaciones para iOS o Android pero buscando un poco se pueden encontrar. En IBM los tienen pero son bastante caros. \nActualmente, como para cualquier lenguaje, se puede aprender a programar en COBOL a través de internet: habrá que buscar un emulador de un Host, una licencia de MicroFocus y buscar algún tutorial. Si que es cierto que conseguir un mainframe no es algo que pueda hacerse a través de ebay por lo que algunas de las características del lenguaje más relacionadas con esta arquitectura se tendrán que programar en alguna academia buena o directamente en el centro de trabajo.\n\n##Enlaces de interes:\n\n[Su historia, en la wikipedia](http://en.wikipedia.org/wiki/COBOL)  \n[Su historia, en Alt1040](http://alt1040.com/2011/12/historia-de-la-tecnologia-el-lenguaje-cobol)    \n[Foro de cobol en castellano](http://www.escobol.com/)    \n[Empresa comercializador de RM/COBOL](http://www.microfocus.com/products/micro-focus-developer/rm-cobol/)    \n[Curiosidad, el blog de alguien que quiere aprender COBOL en 2012](http://www.carlospinan.com/2012/09/21/iniciando-con-cobol-en-windows-7/)    \n[La Biblioteca de Alejandría: La documentación de IBM](http://pic.dhe.ibm.com/infocenter/pdthelp/v1r1/index.jsp?topic=%2Fcom.ibm.entcobol.doc_4.2%2FPGandLR%2Fpgtitlemvs.htm)    \n[Hasta Jeff Atwood habla de él](http://www.codinghorror.com/blog/2009/08/cobol-everywhere-and-nowhere.html)    \n\n\n\n","html":"<p>Aunque el COBOL no esté dentro de la temática habitual de este blog, si habéis leido mi entrada sobre mis diez años como programador, sabréis que los proyectos a los que me dedico durante el día tienen a ese <em>maravilloso</em> lenguaje como base para el desarrollo. Por este motivo, cada vez que se habla de COBOL salto como un resorte y en <a href=\"https://twitter.com/jmoreno78/statuses/274461772721827840\">uno de esos saltos</a>, <a href=\"http://twitter.com/jablanco\">Jose Antonio Blanco</a> cometió la locura de dejarme participar en el podcast <a href=\"http://wedevelopers.com\">We.Developers</a>.<br>\nSupongo que la audiencia le bajará estrepitosamente. Si queréis echar un vistazo al guión que preparé, es el cuerpo principal de este post.</p>\n\n<!--more-->\n\n<h2>Citas relacionadas con COBOL</h2>\n\n<p>No hay muchas, la verdad. Las mejores son las que hacen un poco de leña con el lenguaje, como la de Dijktstra. Son un <em>poco</em> ofensivas pero la verdad es que son graciosas. Echale un vistazo a estas a ver que te parecen:</p>\n\n<blockquote>\n<p>The use of COBOL cripples the mind; its teaching should, therefore, be regarded as a criminal offence.<br>\n— Edsger Dijkstra</p>\n\n<p>Cobol has almost no fervent enthusiasts. As a programming tool, it has roughly the sex appeal of a wrench.<br>\n— Charles Petzold</p>\n\n<p>A computer without COBOL and FORTRAN is like a piece of chocolate cake without ketchup or mustard.<br>\n— John Krueger</p>\n\n<p>The tree large enough that a stake capable of killing COBOL could be fashioned from its trunk has not yet grown anywhere upon the face of this verdant planet.<br>\n— Dan Martinez</p>\n</blockquote>\n\n<p>Como puedes ver, las tres primeras son bastante jocosas con el lenguaje... la última es bastante real y es la que no buscar herir el lenguaje. Vendría a traducirse a algo así como:</p>\n\n<blockquote>\n<p>El árbol lo suficientemente largo como para que una estaca capaz de matar al COBOL pudiera sacarse de su tronco todavía no ha crecido lo suficiente en ningún lugar de este verde planeta.<br>\n- Dan Martinez</p>\n</blockquote>\n\n<h2>Historia</h2>\n\n<p>A finales de los años 50, con la aparición de las primeras máquinas <em>comerciales</em> los usuarios empazaban a reclamar a los fabricantes una convergencia en los lenguajes de programación ya que por aquel entonces lo habitual era que cada fabricante tuviera su propio lenguaje para comunicarse con sus máquinas.<br>\nUna comisión formada por fabricantes de ordenadores, usuarios, trabajadores de la Universidad de Pennsylvania y el Departamento de Defensa de los Estados Unidos fue la que, después de tan solo seis meses de trabajo, definió el lenguaje COBOL, siglas de COmmon Bussines Oriented Language.<br>\nUn par de años antes, Grace Hopper había desarrollado FLOW-MATIC, un lenguaje pionero ya que empleaba instrucciones en ingles para comunicarse con la máquina. Precisamente para poder transformar estas instrucciones en lenguaje máquina, Grace Hopper creó el primer compilador. Este lenguaje FLOW-MATIC fue en el que más se basó la comisión por lo que, a modo de atribución, se llama a Grace Hopper la madre de COBOL ya que en realidad no tuvo un papel tan preponderante en la comisión. </p>\n\n<p>Después de la primera definición del lenguaje en el año 59, se realizaron varias revisiones mayores: en el 68, 74, 85 y 2002. La más frecuente suele ser una mejora del año 89 sobre la del 85. La del año 2002 es la que introduce muchos más cambios como orientación a objetos, soporte a mucho más tipos de variables, generación y parseo de XML pero no está muy implementada. </p>\n\n<h2>Características</h2>\n\n<p>La principal característica del COBOL está en su propio nombre: es un lenguaje totalmente orientado a la automatización de procesos de negocio. Quizá ese y no otro sea el principal motivo por el que sigue tan vigente. La mayoría de los lenguajes de programación de los que hablamos hoy en día (C, Java, C++, Objective-C, PHP, Javascript, Python, Ruby, etc) sirven para hacer cualquier tipo de programa. Obviamente están orientados a unas determinadas tecnologías o nichos de mercado: juegos, desarrollo web, drivers, aplicaciones de escritorio, aplicaciones móviles, etc pero no hay ninguno que sirva específicamente para hacer un CRM. COBOL fue diseñado específicamente para dar respuestas a una serie de necesidades que tenían las empresas para automatizar sus procesos. Todos querían un único lenguaje que les permitiera hacer eso, automatizaron sus procesos, procesos que en su mayoría no han cambiado en los últimos 50 o 60 años: emisión de recibos, listados de inventario, contratación de productos, control de actividad de procesos, etc. </p>\n\n<p>Otra característica novedosa para la época era que soportaba nombres de variables y de métodos de hasta 32 caracteres. Por esto se habla a veces de la <em>verbosidad</em> del COBOL. El código es muy legible y casi autodocumentado. Una de las cosas que tuvo muy en cuenta la comisión para el diseño del lenguaje es que un Gerente sin formación técnica pudiera leer el código fuente de un programa y entender que es lo que estaba pasando (luego llego el GOTO y acabo con este sueño dorado). Todos los lenguajes de programación tienen una fuerte influencia de la lengua inglesa pero con pocos tienes la sensación de estar hablando con la máquina como con COBOL: Como programador, escribir i++ y que la variable i aumente su valor en una unidad es una sensación de poder. Para un usuario, leer ADD 1 TO INDEX no deja lugar a dudas.\nEso no quita para que no haya que poner comentarios: la duda que nos surgirá cuando leamos la instrucción anterior en cualquier lenguaje es: ¿por qué cojones aumenta el indice?</p>\n\n<p>Es un lenguaje de tipado débil. Solo hay dos tipos de variables: numéricas y alfanuméricas. Dentro de las numéricas hay bastantes tipos de empaquetamientos: binario, hexadecimal, decimal comprimido, sin comprimir, editados... un lenguaje dedicado al mundo empresarial tiene que tener una buena gestión de variables numéricas. Es importante destacar que en la definición de la variable se indica explícitamente su longitud, es decir, el número de bytes que necesita. También pueden contruirse arrays.</p>\n\n<p>Las variables pueden agruparse dentro de otras variables (una especie de estructuras de C... pero solo una especie) identificandose la pertenencia a un grupo mediante la indentación por código de nivel. Un ejemplo sería una cuenta corriente: A nivel 01 estaría la variable CUENTA-CORRIENTE, a nivel 05 tendríamos CODIGO-BANCO, CODIGO-SUCURSAL, PRIMER-DIGITO-CONTROL, SEGUNDO-DIGITO-CONTROL y NUMERO-CUENTA. Si utilizamos numéricos de base decimal solo ocuparíamos 20 bytes, es decir, los 20 bytes estarían divididos en cinco bloques de 4, 4, 1, 1 y 10 bytes. </p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">01  CUENTA-CORRIENTE\n    05  CODIGO-BANCO           PIC 9(4).\n    05  CODIGO-SUCURSAL        PIC 9(4).\n    05  PRIMER-DIGITO-CONTROL  PIC 9.\n    05  SEGUNDO-DIGITO-CONTROL PIC 9(1).\n    05  NUMERO-CUENTA          PIC 9(10).\n</code></pre></div>\n<p>No es necesario definir el tipo y la longitud de la variable de primer nivel. Siempre será alfanumérica y ocupara los mismos bytes que las variables que agrupa. En este caso, si queremos tratarla como numérica tendríamos que redefinirla como numérica. Esto se hace con la instrucción REDEFINES.</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">01 CUENTA-CORRIENTE-NUMERICA   PIC 9(20).\n01 CUENTA-CORRIENTE REDEFINES CUENTA-CORRIENTE-NUMERICA.\n</code></pre></div>\n<p>No hay variables de tipo booleano, se construyen mediante niveles especiales de indentación pero en realidad se parecen mas a un <em>enum</em>. La diferencia con los enum es que podemos evaluar variables numéricas y alfanuméricas.</p>\n\n<p>La estructura de un programa COBOL es muy rígida: Consta de cuatro partes aunque no todas son obligatorias: \n- Una primera de encabezado (IDENTIFICATION DIVISION), donde se pone el nombre del programa, el autor, las fecha de compilación, etc. \n- Una segunda de configuración del entorno (ENVIRONMENT DIVISION), cuando el programa accede a ficheros esta es la sección donde se informan las características de dicho fichero, si en lugar de trabajar con punto como separador decimal se utilizase la coma se indicaría en esta sección. \n- Una tercera para los datos (DATA DIVISION) donde se definen todas las variables que va a utilizar el programa, se aporta algo más de información sobre los ficheros que se hubieran definido en la sección anterior, etc.\n- Una cuarta para las instrucciones (PROCEDURE DIVISION) que sería lo que actualmente entendemos por programa. Es donde se tira el código.</p>\n\n<p>Además de la rigidez de la secciones, el número de columna donde se escribe también es muy importante: los seis primero caracteres están reservados, el séptimo solo se utiliza para comentar o descomentar el código. Del 8 al 11 están reservados para la identificación de las divisiones y las secciones, los niveles 01 de variables y las definiciones de los ficheros. Esto es lo que se conoce como zona A. De la 12 a la 72 es la zona normal para codificar y se conoce como zona B. De la columna 72 a la 80 tampoco se debe escribir ya que el compilador no va a leer lo que ahí escribamos. Esta estructura procede de la forma original de programa en COBOL. Al principio no había IDE´s si no que se usaban fichas de programación. Estas fichas se introducían en los compiladores y si todo era correcto se generaban las tarjetas perforadas con las que funcionaban los mainframes. Aunque ya no haya tarjetas perforadas y se utilicen IDE´s para la codificación, estas restricciones se mantienen en los compiladores actuales.</p>\n\n<h2>Plataformas y Variantes</h2>\n\n<p>Aunque la plataforma habitual son los Mainframes se pueden encontrar programas para ordenadores personales. En este punto puedo meter la pata porque el entorno que yo conozco es el mainframe. Aunque el lenguaje COBOL es el mismo, a la versión del lenguaje que se utiliza para desarrollar aplicaciones que luego van a correr en sistemas operativos de ordenadores personales se la llama RM-COBOL. Hay empresas actuales que comercializan productos para seguir desarrollando y manteniendo estos programas como MicroFocus. </p>\n\n<p>En entorno mainframe la versión más extendida es la del año 85 revisada en el 89. En algunos lugares se puede encontrar una versión denominada ENTERPRISE que además se actualiza con más frecuencia. Cuando me han hablado de ella, lo que más me han destacado es que permite trabajar con variables numéricas de mayor tamaño por lo que se usa en entidades financieras en las que los importes son muy elevados y existe riesgo de perder cifras significativas.</p>\n\n<p>La versión de 2002 &quot;oficializa&quot; algunos desarrollos de terceros existentes que permiten embeber código COBOL en servicios .NET, Java, etc. Yo no he conocido a nadie que haya hecho algo de esto. No se si será más habitual en otros tipos de clientes, en otros países o si será algo menos frecuente como los programas RM-COBOL. </p>\n\n<h3>Entornos de desarrollo</h3>\n\n<p>Aunque se puede programar en cualquier editor de notas. He conocido gente que escribían los programas en Ultra-Edit, otros que lo hacían en SPFPC, un programa MS-DOS con el que se puede escribir un programa, compilarlo, ejecutarlo, etc.</p>\n\n<p>IBM, que es la reina indiscutible en este baile, tiene herramientas de desarrollo COBOL sobre Rational por lo que los programadores de COBOL no tendríamos nada que envidiar a los de Java, aun así, creo que lo más normal si se trabaja en entorno mainframe es usar el IDE que provee el sistema operativo del mainframe o algún otro IDE de terceros que se instale en el mainframe. </p>\n\n<p>El sistema operativo Z/OS, es el que actualmente traen los ainframes de IBM. Este sistema operativo incluye las funcionalidades originales del MVS pero se le ha agregado compatibilidad con UNIX, soporte para espacios de memoria virtual lo que hace que los mainframe no solo sirvan para tener las funciones clásicas. Entre las características que tiene este sistema operativo se encuentra la de traer de serie un entorno de desarrollo en el que crear, compilar y ejecutar programas contra el propio mainframe... y desde el propio mainframe. Porque no hemos de olvidar que el acceso a este bicharraco se hace siempre desde terminales tontos. En este entorno de desarrollo, cada usuario puede tener su configuración,... el sistema operativo es multiusuario y multitarea. Yo puedo conectarme en mi pc de Madrid al Host de mi empresa, desde un portátil en el AVE Madrid-Barcelona, en el equipo de un compañero en la oficina de Barcelona... y si lo hago con mi usuario y contraseña siempre estaré viendo mi configuración, mis programas, mis librerías y mis permisos. Esto es así desde los años 70... ¿Cuantos años lleva Linode ofreciendo estas ventajas a los desarrolladores? Si, no se puede comparar lo que puede desarrollarse en un mainframe con lo que podemos hacer desde una virtualización de Linode pero la reflexión que yo siempre me hago es que los ciclos también llegan a la tecnología.</p>\n\n<p>Como en cualquier otro lenguaje, COBOL no sería nada si no fuera por otras tecnologías que están a su alrededor. Igual que PHP casi siempre va acompañado de MySQL y de un servidor Apache, el COBOL siempre va rodeado de una serie de términos (tecnologías) que suelen verse en ofertas de empleo. Se suelen buscar expertos en COBOL-CICS-DB2 con conocimientos de JCL, VSAM, IMS, SORTFD o cosas así. Salvando las distancias y pidiendo perdón de antemano a los compañeros del PHP por las confianzas que me estoy tomando, COBOL-CICS-DB2 es el LAMP, MAMP o WAMP del PHP:</p>\n\n<p>CICS es el nombre del terminal de teleproceso que incluyen los mainframes y que son los que permiten las conexiones on-line al sistema desde cualquier terminal tonto o emulador de terminal tonto. Es también el encargado de servir información a los servicios web (estos ya desarrollados en cualquier lenguaje aunque Java es un habitual) que se conectan al CICS a través de algún Gateway. No requiere unos conocimientos adicionales al lenguaje, solo que hay una serie de instrucciones en el lenguaje que solo sirven cuando el programa se va a utilizar en una instalación CICS.</p>\n\n<p>DB2 es una base de datos relacional, igual que MySQL, SQL Server, Oracle, etc. Es un producto de IBM que se puede instalar en distribuido y en mainframe. Al igual que el CICS, el único conocimiento adicional que se requiere es el de saber SQL, ya que es como se accede a la base de datos desde un programa COBOL.</p>\n\n<p>IMS es un gestor de bases de datos jerárquicas, no es lo más actual pero todavía se sigue usando en algún sitio.</p>\n\n<p>VSAM es un sistema de almacenamiento indexado. Aunque también esta muy desfasado, todavía es posible encontrar instalaciones que los usan. Los ficheros de tipo VSAM se usan para hacer la persistencia del DB2 así que para IBM siguen siendo de gran importancia.</p>\n\n<p>JCL es el sistema que se utiliza para ejecutar un proceso Batch. No sirve solo para procesos COBOL sino también para lanzar muchas utilidades que vienen en el Sistema Operativo de los mainframes: utilidades del DB2, procesos de ordenamiento de ficheros planos con SORTFD. Es como un fichero de configuración o mejor, como una plantilla en la que se le dice al sistema operativo el entorno en el que se quiere ejecutar el programa, que programa es el que se va a ejecutar, quien es el usuario que lo lanza para ver si tiene permisos, donde están los ficheros, que estructura tienen, que tamaño se les ha definido, etc. Quizá es a la hora de preparar un JCL cuando mayor es la sensación de estar trabajando con una tecnología con más de 50 años de historia: se habla de fichas, cilindros, pistas, cintas...</p>\n\n<h2>Para que se usa hoy en día</h2>\n\n<p>Hoy en día el COBOL está presente en multitud de situaciones cotidianas. Casi todos los sistemas bancarios están desarrollados en COBOL: ordenes de transferencia, venta de acciones, de valores, conciliaciones bancarias, procesos de facturación de grandes compañías telefónicas, o de grandes cadenas de supermercados. Aplicaciones completas de gestión de compañías de seguros, procesos de control de centrales eléctricas, aplicaciones de inventario de almacén... y así hasta el infinito. \nCuando se habla de la longevidad del COBOL no es porque queden muchos procesos antiguos que nadie se atreve a migrar, es que como esos desarrollos no están aislados, se sigue haciendo nuevo desarrollo en esta plataforma.</p>\n\n<p>Quizá no somos conscientes porque la capa de presentación que vemos nosotros es una aplicación de escritorio tipo Windows, o una página web pero el COBOL está ahí, por debajo. Incluso en alguna aplicación de un dispositivo móvil, los datos son extraídos por un programa COBOL.</p>\n\n<p>Si alguien se ha fijado alguna vez en unos ordenadores todo-en-uno que suele haber en El Corte Ingles en los que te buscan si un articulo está agotado o si lo puedes encontrar en otro centro a través de una pantalla negra en la que van tecleando y pulsando las teclas de función para moverse por las pantallas habrá visto un terminal CICS. La agencia de viajes y los seguros de El Corte Ingles también se contratan con un terminal CICS. </p>\n\n<p>Para mal o para bien, procesos muy críticos para compañías que mueven un gran volumen de dinero están desarrollados en COBOL, podrían haberse desarrollado en cualquier otro lenguaje más moderno y con más prestaciones pero se desarrollaron en COBOL. A día de hoy, plantearse una refactorización completa de esos programas a otro lenguaje no solo requiere mucho tiempo si no también una gran valentía, y en realidad hay que plantearse también si compensa el cambio.</p>\n\n<p>Esta claro que IBM tiene bien agarrados a los departamentos de sistemas que tienen un mainframe... pero también hay que entender que no todas las empresas son como Facebook o Twitter que pueden plantearse un gran cambio de tecnología. Aunque parezca mentira, en esas grandes entidades financieras, compañías telefónicas, cadenas de alimentación hay departamentos de Sistemas que no son muy grandes y que tienen que hacer frente a desarrollos nuevos y a   mantenimientos muy fuertes por lo que no es de extrañar que sigan apostando por conservar esa tecnología. Una tecnología que no está dando ningún problema, por otro lado, ¿hay que cambiarla simplemente porque sea vieja o no haya muchos programadores?</p>\n\n<p>Sobre el número de programadores y su cotización también hay que aclarar algunas cosas. Lo primero es una triste noticia: la cotización de un programador COBOL no está unida a un sueldo alto. Gana como cualquier otro programador experimentado en Java, .Net o lo que sea. Aunque no hay una necesidad tan alta de programadores COBOL como hubo en los años del efecto 2000 o del cambio de la peseta al euro, se siguen haciendo muchos mantenimientos y nuevos desarrollos que requieren programadores COBOL y estoy convencido de que la demanda no disminuirá en los próximos años. </p>\n\n<h2>Futuro</h2>\n\n<p>Hay una frase que se le atribuye a Bill Gates que dice: &quot;no se que lenguajes de programación habrá en el futuro pero COBOL estará allí&quot;. Yo estoy totalmente de acuerdo.</p>\n\n<p>Como ya he comentado en el apartado anterior, el COBOL está presente en procesos de vital importancia para empresas que mueven muchísimo dinero y además está presente en los procesos que garantizan que esas empresas sigan ganando dinero. Mientras IBM siga sirviendo Series Z estos procesos habrá que seguir manteniéndolos. Además, a medida que van apareciendo nuevas tecnologías, estas empresas no optan por sustituir los procesos COBOL por procesos codificados en lenguajes más modernos si no que buscan formas para que los procesos COBOL sigan funcionando: es posible enviar un email desde un  JCL, perfectamente podría enviarse un SMS, hacer una notificación PUSH o lo que venga a continuación.</p>\n\n<p>Está claro que el COBOL no se va a utilizar para programar la próxima Red Social, o para hacer el Backend de un whatsapp, pero las empresas que mantienen procesos COBOL también utilizan tecnologías actuales que se han podido integrar así que a medida que sigan apareciendo nuevas tecnologías y estas se puedan seguir integrando, el COBOL seguirá.</p>\n\n<p>A veces aparecen corrientes a favor de la desaparición del COBOL, o que auguran el final de IBM... hay hueco para todos y lo seguirá habiendo.</p>\n\n<h2>¿Como se puede aprender COBOL?</h2>\n\n<p>Los programadores COBOL son como los Sith, siempre van juntos maestro y aprendiz... es una tradición oral que va pasando de generación en generación y de la que nunca queda constancia escrita... o casi.</p>\n\n<p>Ahora más en serio, por hacer caso a Dijkstra, las universidades no enseñan COBOL, tampoco enseñan Objective-C... las universidades son así. \nYo aprendí a programar en COBOL en una academia, a través de una oferta de trabajo para gente que no tuviera experiencia en programación o muy poca experiencia. No se anuncian tanto como las que te enseñan a programar en Java o a hacer aplicaciones para iOS o Android pero buscando un poco se pueden encontrar. En IBM los tienen pero son bastante caros. \nActualmente, como para cualquier lenguaje, se puede aprender a programar en COBOL a través de internet: habrá que buscar un emulador de un Host, una licencia de MicroFocus y buscar algún tutorial. Si que es cierto que conseguir un mainframe no es algo que pueda hacerse a través de ebay por lo que algunas de las características del lenguaje más relacionadas con esta arquitectura se tendrán que programar en alguna academia buena o directamente en el centro de trabajo.</p>\n\n<h2>Enlaces de interes:</h2>\n\n<p><a href=\"http://en.wikipedia.org/wiki/COBOL\">Su historia, en la wikipedia</a><br>\n<a href=\"http://alt1040.com/2011/12/historia-de-la-tecnologia-el-lenguaje-cobol\">Su historia, en Alt1040</a><br>\n<a href=\"http://www.escobol.com/\">Foro de cobol en castellano</a><br>\n<a href=\"http://www.microfocus.com/products/micro-focus-developer/rm-cobol/\">Empresa comercializador de RM/COBOL</a><br>\n<a href=\"http://www.carlospinan.com/2012/09/21/iniciando-con-cobol-en-windows-7/\">Curiosidad, el blog de alguien que quiere aprender COBOL en 2012</a><br>\n<a href=\"http://pic.dhe.ibm.com/infocenter/pdthelp/v1r1/index.jsp?topic=%2Fcom.ibm.entcobol.doc_4.2%2FPGandLR%2Fpgtitlemvs.htm\">La Biblioteca de Alejandría: La documentación de IBM</a><br>\n<a href=\"http://www.codinghorror.com/blog/2009/08/cobol-everywhere-and-nowhere.html\">Hasta Jeff Atwood habla de él</a>    </p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1369157040000,"created_by":1,"updated_at":1369157040000,"updated_by":1,"published_at":1369157040000,"published_by":1},{"id":24,"title":"Helios III. Piratas Y Bucaneros.","slug":"helios-iii-piratas-y-bucaneros","markdown":"{% blockquote Star Wars, Ben Kenobi llegando a Mos Eisley con Luke Skywalker %}\nEl puerto espacial de Mos Eisley. No encontrarás nunca un lugar como éste tan lleno de maldad y vileza. Debemos cuidarnos.\n{% endblockquote %}\n\nPara esta tercera entrega volvemos a basarnos en unos artículos de Rafa Aguilar (aka [@rais38](http://twitter.com/rais38)), recien publicados en [Objective-C.es](http://objective-c.es), donde primero nos explica las [categorías y tipos de In-App Purchases](http://objective-c.es/in-app-purchases-en-ios-parte-1/) y después [nos enseña con un ejemplo](http://objective-c.es/in-app-purchases-en-ios-parte-2/) lo sencillo que es incorporar a una aplicación esta excelente fuente de ingresos.      \nNosotros aquí vamos a ver como simplifica CargoBay el uso de IAP en nuestras aplicaciones y también a verificar si la compra se ha realizado correctamente por el método más seguro: un servidor con Helios.\n\n<!--more-->\n\nHe de reconocer que a medida que he ido avanzando en el análisis de Helios he ido apreciando la bien que esta planteado y lo que puede suponer para un desarrollador que se quiera aventurar en la creación de su propio backend. Cierto es que la primera parte, la que replica el modelo Core Data en el servidor me parece que está todavía un poco floja, así como la sincronización entre los dispositivos y el backend. El soporte para notificaciones push está bien, todavía le queda camino que recorrer pero es un buen punto de partida si quieres tener tu propio gestor de notificaciones. Pero con CargoBay y Venice, la gestión de las compras dentro de la aplicación se simplifican una barbaridad. \n\nCargoBay es una pequeña librería de Mattt Thompson (del que no hemos hablado prácticamente nada en este blog) que facilita la gestión de estas transacciones al reducir a unos pocos métodos con bloques la recuperación de productos, comprobación del estado de la compra así como la verificación del recibo siguiendo las recomendaciones de Apple para evitar los fraudes en este tipo de compras. \n\nVenice, es la gema que incluye Helios para realizar la verificación del recibo en servidor (otra recomendación de Apple para evitar fraudes). La otra funcionalidad que ofrece esta gema es devolver un listado de identificadores de IAP, esto será muy útil cuando queramos cambiar la oferta de productos en nuestra aplicación sin tener que actualizar la aplicación vía iTunes Connect. Para poder utilizar esta funcionalidad, nuestra aplicación debe estar preparada para trabajar con todos los productos que le vayan a llegar por este servicio.\n\nCon todo lo que ya sabemos gracias a Rafa, vamos a crear una aplicación que nos permita contratar los servicios de los piratas y cazarecompensas que habitan Mos Eisley. Sabemos que nadie es de fiar en este lugar así que mejor que incluyamos un sistema de verificación de las compras o nuestro jefe nos terminará dando de comer a un sarlacc (algo muy doloroso ya que recordemos que su digestión dura más de mil años).\n\nPara probar algunas bondades de CargoBay vamos a hacer lo siguiente: En iTunes Connect vamos a crear las siguientes IAP tal y como nos ha [contado Rafa]():\n\nProducto          | Identificador                             |\n----------------- | ----------------------------------------- |\nHan Solo          | com.cytdevteam.MosEisley.HanSolo\nChewbacca         | com.cytdevteam.MosEisley.Chewbacca\nMillennium Falcon | com.cytdevteam.MosEisley.MillenniumFalcon\nModal Nodes       | com.cytdevteam.MosEisley.ModalNodes          \n\n\nEn nuestro repositorio de productos de Helios vamos a crear estos cuatro productos y dos más:      \n\nProducto          | Identificador                             |\n----------------- | ----------------------------------------- |\nHan Solo          | com.cytdevteam.MosEisley.HanSolo\nChewbacca         | com.cytdevteam.MosEisley.Chewbacca\nMillennium Falcon | com.cytdevteam.MosEisley.MillenniumFalcon\nModal Nodes       | com.cytdevteam.MosEisley.ModalNodes\nGreedo            | com.cytdevteam.MosEisley.Greedo\nBoba Fett         | com.cytdevteam.MosEisley.BobaFett         \n\n\nSi echamos un vistazo a la documentación de Helios, veremos que los únicos métodos que ofrece para In-App Purchases son un GET de productos y un POST para comprobar recibos... ¿Cómo grabamos entonces los productos en la tabla? pues como graban los hombres, con SQL directamente sobre la base de datos.\n\nCreamos un nuevo fichero *HeliosTasks.rake* en nuestro proyecto para poder lanzarlo tanto en local como en servidor de forma manual y escribimos lo siguiente:\n\n{% codeblock lang:ruby %}\nnamespace :HeliosTasks do\n  desc \"TODO\"\n  task :loadIdentifiers => :environment do\n    require 'pg'\n\n    def connect(db, user, pw)\n      PGconn.new('localhost', 5432, '', '', db, user, pw) \n    end\n\n    def populate_products(conn)\n      sql = \"DELETE FROM in_app_purchase_products;  -- empty contents of table\n             INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) \n                           VALUES (1, 'com.cytdevteam.MosEisley.HanSolo', 'Consumable', 'Han Solo', 'Han Solo The One And Only', 0.99, 'USD', 't');\n             INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) \n                           VALUES (2, 'com.cytdevteam.MosEisley.Chewbacca', 'Consumable', 'Chewbacca', 'Chewbacca', 0.99, 'USD', 't');\n             INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) \n                           VALUES (3, 'com.cytdevteam.MosEisley.MillenniumFalcon', 'Consumable', 'Millennium Falcon', 'Millennium Falcon', 4.99, 'USD', 't');\n             INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) \n                           VALUES (4, 'com.cytdevteam.MosEisley.ModalNodes', 'Consumable', 'Modal Nodes', 'A real Modal Nodes` gig', 4.99, 'USD', 't');\n             INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) \n                           VALUES (5, 'com.cytdevteam.MosEisley.Greedo', 'Consumable', 'Greedo', 'A coward that shot first', 4.99, 'USD', 't');\n             INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) \n                           VALUES (6, 'com.cytdevteam.MosEisley.BobaFett', 'Consumable', 'Boba Fett', 'He is no good to me dead', 4.99, 'USD', 't');\"\n      conn.exec(sql)\n    end\n\n    begin\n      conn = connect('databaseName','username','password')\n      puts \"Connected to #{conn.db} at #{conn.host}\"\n      populate_products(conn)  \n    rescue PGError=>e \n      puts \"Oh Oh!\", e\n    ensure\n      conn.close unless conn.nil?\n      puts \"Connection closed\" \n    end\n  end\nend\n{% endcodeblock %}\n    \nNo creo que os cueste mucho ver lo que hace: establece una conexión con la base de datos y a continuación borra e inserta seis registros. Si hubiera algún error saldría por la consola.\n\nSi ahora escribimos en un navegador [http://localhost:3000/products/identifiers](http://localhost:3000/products/identifiers)\n\nveríamos algo como esto:\n\n![]({{ site.url }}/assets/photos/2013/jsonResponse.png)\n\nYa hemos creado todas las IAP en iTunes Connect (que coñazo) y hemos insertado los productos que vamos a ofrecer en nuestro servidor. Es el momento de liarnos la manta a la cabeza con la aplicación.\n\nNos vamos a basar en la plantilla de Master-Detail con ARC, Storyboards y Core Data. La primera lista serán las compras que hayamos realizado. En Storyboard añadiremos un nuevo navigation controller con un UITableViewController donde mostraremos los productos que se pueden comprar a través del App Store. \n\nSi a estas alturas todavía no usas CocoaPods deberías hacerlo, es la forma más fácil de gestionar las librerías de terceros que usas en tus aplicaciones. En este caso, nuestro podfile incluirá AFNetworking, CargoBay y NSData+Base64:\n\n{% codeblock %}\nplatform :ios, '5.0'\npod 'AFNetworking', '~> 1.2'\npod 'CargoBay', '~> 0.3.2'\npod 'NSData+Base64', '~> 1.0.0'\n{% endcodeblock %}\n    \n## Un pequeño expositor.\n\nYa sabemos que lo primero que hay que hacer es comprobar si nuestra aplicación tiene permiso para hacer compras dentro de la aplicación. En caso afirmativo podremos acceder a nuestros servidores para recuperar la información de los productos que tenemos a la venta:\n\n{% codeblock lang:objc %}\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n\n    // Comprobamos si hay alguna restricción configurada en el device respecto a las In-App Purchases.\n    if ([SKPaymentQueue canMakePayments]) {\n        NSLog(@\"Puedo hacer pagos In-App\");\n        [self getProductsInStoreKitDirectlyFromHelios];\n    }\n    else {\n        NSLog(@\"Control parental activado\");\n    }\n}\n{% endcodeblock %}\n\nPara cargar el UITableView del viewController de productos necesitamos un array de productos. Toda la información del producto tal y como está en iTunes Connect la podemos obtener a través de StoreKit pero CargoBay nos proporciona unos métodos con bloques que recuperan está información. Podemos hacerlo de dos formas: recuperando primero la lista de identificadores y después pasándole esta lista al método correspondiente:\n\n{% codeblock lang:objc %}\n- (void)getProductsIdentifiersInHelios\n{\n    NSURL *url = [NSURL URLWithString:@\"http://localhost:3000/products/identifiers/\"];\n    NSURLRequest *request = [NSURLRequest requestWithURL:url];\n    \n    [AFJSONRequestOperation JSONRequestOperationWithRequest:request success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) {\n        [self getProductsInStoreKitFromArray:JSON];\n    } failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError *error, id JSON) {\n        NSLog(@\"Error: %@\", [error description]);\n    }];\n}\n    \n- (void)getProductsInStoreKitFromArray:(NSArray *)array\n{\n    [[CargoBay sharedManager] productsWithIdentifiers:[NSSet setWithArray:array] success:^(NSArray *products, NSArray *invalidIdentifiers) {\n        if (!_productsArray) {\n            _productsArray = [[NSMutableArray alloc] initWithCapacity:0];\n        }\n        NSLog(@\"Products: %@\", products);\n        NSLog(@\"Invalid Identifiers: %@\", invalidIdentifiers);\n        _productsArray = [NSMutableArray arrayWithArray:products];\n        [self.tableView reloadData];\n    } failure:^(NSError *error) {\n        NSLog(@\"Error: %@\", error);\n    }];\n}\n{% endcodeblock %}\n\nO bien, si tenemos la certeza que el servicio ya nos devuelve los datos en una array únicamente con los identificadores (que es como espera CargoBay que se lo pasemos), podemos hacerlo todo en un único método:\n\n{% codeblock lang:objc %}\n- (void)getProductsInStoreKitDirectlyFromHelios\n{\n    \n    NSURL *url = [NSURL URLWithString:@\"http://localhost:3000/products/identifiers/\"];\n    NSURLRequest *request = [NSURLRequest requestWithURL:url];\n    [[CargoBay sharedManager] productsWithRequest:request success:^(NSArray *products, NSArray *invalidIdentifiers) {\n        NSLog(@\"Products: %@\", products);\n        NSLog(@\"Invalid Identifiers: %@\", invalidIdentifiers);\n        _productsArray = [NSMutableArray arrayWithArray:products];\n        [self.tableView reloadData];\n    } failure:^(NSError *error) {\n        NSLog(@\"Error: %@\", [error description]);\n    }];\n}\n{% endcodeblock %}\n    \nEn cualquiera de los dos casos, el resultado del log será el siguiente:\n\n{% codeblock %}\n2013-05-15 16:14:48.275 MosEisley[3242:c07] Products: (\n    \"<SKProduct: 0x77ad230>\",\n    \"<SKProduct: 0x82a5ab0>\",\n    \"<SKProduct: 0x8267f70>\",\n    \"<SKProduct: 0x8263400>\"\n)\n2013-05-15 16:14:48.275 MosEisley[3242:c07] Invalid Identifiers: (\n    \"com.cytdevteam.MosEisley.Greedo\",\n    \"com.cytdevteam.MosEisley.BobaFett\"\n)\n{% endcodeblock %}\n\nEs decir, hemos recuperado seis registros de nuestro servidor de los cuales cuatro son productos correctos en iTunes Connect y dos no lo son. Solo mostraremos los productos correctos:\n\n{% codeblock lang:objc %}\n#pragma mark - Table view data source\n \n - (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView\n {\n     // Return the number of sections.\n     return 1;\n }\n \n - (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\n {\n     // Return the number of rows in the section.\n     return [_productsArray count];\n }\n \n - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n {\n     static NSString *CellIdentifier = @\"Cell\";\n     UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier forIndexPath:indexPath];\n     \n     // Configure the cell...\n     SKProduct *product = [_productsArray objectAtIndex:indexPath.row];\n     \n     cell.textLabel.text = product.localizedTitle;\n     cell.detailTextLabel.text = product.localizedDescription;\n     return cell;\n }\n{% endcodeblock %}\n\nEsta será, más o menos, la imagen de nuestro expositor:\n\n![]({{ site.url }}/assets/photos/2013/productsViewController.png)\n\nPara realizar las compras, CargoBay no tiene ninguna utilidad desarrollada por el momento, la única diferencia con el tutorial de Rafa es que el observer no es necesario incluirlo aquí ya que lo vamos a hacer en el `(BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions` para que gestiones no solo estas compras si no también las compras que pudieran haber quedado pendientes al cerrar la aplicación:\n\n{% codeblock lang:objc %}\n#pragma mark - Table view delegate\n \n - (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath\n {\n     // Añadimos el producto que recibimos en el método delegado productsRequest:didReceiveResponse:\n     SKPayment *pago = [SKPayment paymentWithProduct:[_productsArray objectAtIndex:indexPath.row]];\n     // Nos añadimos a nosotros mismos como observadores de la transacción.\n //    [[SKPaymentQueue defaultQueue] addTransactionObserver:self];\n     [[SKPaymentQueue defaultQueue] addPayment:pago];\n }\n{% endcodeblock %}\n\n## Que no se pierda ni un recibo.\n\nTal y como acabamos de comentar, el *observer* de la cola de pagos lo vamos a incluir en `(BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions` para que no se pierda ni una sola operación. Además incluimos el bloque que se llamará cada vez que haya alguna actualización de una transacción:\n\n{% codeblock lang:objc %}\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n    // Payment Queue Observation with CargoBay\n    [[CargoBay sharedManager] setPaymentQueueUpdatedTransactionsBlock:^(SKPaymentQueue *queue, NSArray *transactions) {\n        NSLog(@\"Updated Transactions: %@\", transactions);\n        for (SKPaymentTransaction *transaction in transactions)\n        {\n            switch (transaction.transactionState)\n            {\n                case SKPaymentTransactionStatePurchased:\n                    [self oneStepVerification:transaction];\n                    break;\n                case SKPaymentTransactionStateFailed:\n                         // TODO\n                    break;\n                case SKPaymentTransactionStateRestored:\n                         // TODO\n                    break;\n                default:\n                    break;\n            }\n        }\n    }];\n    \n    [[SKPaymentQueue defaultQueue] addTransactionObserver:[CargoBay sharedManager]];\n    \n    // Override point for customization after application launch.\n    ...\n}\n{% endcodeblock %}\n    \nCuando la transacción pase a un estado de *purchased* es cuando deberemos realizar las acciones derivadas de la compra, antes de hacer nada es cuando deberíamos asegurarnos de que el recibo es verdadero. Las dos opciones que tenemos son verificar dentro de la propia aplicación accediendo a un servicio de Apple o llamar a un servicio nuestro que realice ese mismo acceso. Para el primer caso, CargoBay ya nos proporciona un método que realiza esa verificación:\n\n{% codeblock lang:objc %}\n- (void)oneStepVerification:(SKPaymentTransaction *)transaction\n{\n    [[CargoBay sharedManager] verifyTransaction:transaction password:nil success:^(NSDictionary *receipt) {\n        NSLog(@\"Receipt: %@\", receipt);\n        [self serverSideVerification:transaction];\n    } failure:^(NSError *error) {\n        NSLog(@\"Error %d (%@)\", [error code], [error localizedDescription]);\n    }];\n}\n{% endcodeblock %}\n\nEs de sobra conocido que tanto las IAP son fácilmente *pirateables* y aunque la verificación desde la propia aplicación aumenta la seguridad de nuestras ventas, también son conocidos los casos en los que esta verificación también ha sido *hackeada*. La otra utilidad de Venice es la realización de esta misma verificación en nuestro servidor:\n\n{% codeblock lang:objc %}\n- (void)serverSideVerification:(SKPaymentTransaction *)transaction\n{\n    NSURL *url = [NSURL URLWithString:@\"http://localhost:3000/receipts/verify\"];\n    NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:url];\n    [request setHTTPMethod:@\"POST\"];\n    \n    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    NSString *documentsDirectory = [paths objectAtIndex:0];\n    NSString *appFile = [documentsDirectory stringByAppendingPathComponent:@\"TransactionReceipt\"];\n    [transaction.transactionReceipt writeToFile:appFile atomically:YES];\n    \n    NSString *params = [NSString stringWithFormat:@\"receipt-data=%@\", [transaction.transactionReceipt base64EncodedString]];\n    NSData *httpBody = [params dataUsingEncoding:NSUTF8StringEncoding];\n    [request setHTTPBody:httpBody];\n    \n    [NSURLConnection sendAsynchronousRequest:request queue:[NSOperationQueue mainQueue] completionHandler:^(NSURLResponse *response, NSData *data, NSError *error) {\n        NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *)response;\n        if (httpResponse.statusCode == 200 || httpResponse.statusCode == 203) {\n            id receipt = [NSJSONSerialization JSONObjectWithData:data\n                                                         options:0\n                                                           error:nil];\n            NSLog(@\"Received receipt: %@\", receipt);\n            [[SKPaymentQueue defaultQueue] finishTransaction: transaction];\n        } else {\n            NSLog(@\"Body: %@\", [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding]);\n            NSLog(@\"ERROR: %@\", error);\n        }\n    }];\n}\n{% endcodeblock %}\n\nEn el ejemplo de nuestra aplicación realizamos primero la verificación desde nuestra aplicación y posteriormente nos aseguramos repitiendo la verificación en nuestro servidor. Quizá sería más práctico hacerlo al revés: primero en nuestro servidor y si, por algún motivo, no hemos podido realizar la verificación hacerla desde nuestra aplicación como segunda opción.\n\nAh, podemos dormir tranquilos. La verificación desde nuestro servidor deja registro para que podamos hacernos una idea del volumen de nuestras compras... y a lo mejor sorprender a algún tunante:\n\n![]({{ site.url }}/assets/photos/2013/helios-panel-admin.png)\n\nA partir de aquí, si la compra ha sido correcta, podemos insertar el registro en nuestra base de datos que le informa a la aplicación que la compra ha sido registrada con éxito. En el ejemplo de Rafa, en este momento habría que descargar la canción.\n\nPor esta vez nada más, si habéis leído los anteriores notaréis que esta vez estoy más entusiasmado con la funcionalidad de Helios. No me he pegado mucho con StoreKit, tan solo con la versión pro de una aplicación, pero la verdad es que ahora si que tengo claro que usaré CargoBay y con toda seguridad haré la verificación en servidor con Venice... aunque haya que tocar algo el código base.\n\n> Ojito con las dependencias. No se que versión de Helios, CargoBay y AFNetworking estaréis utilizando pero se nota que estos frameworks se están tocando bastante estos días. Yo he tenido algún problemita que otro a la hora de preparar esta entrada. Nada que un par de horas de cabezazos en la pared no solucionen... ;-)","html":"<p>{% blockquote Star Wars, Ben Kenobi llegando a Mos Eisley con Luke Skywalker %}\nEl puerto espacial de Mos Eisley. No encontrarás nunca un lugar como éste tan lleno de maldad y vileza. Debemos cuidarnos.\n{% endblockquote %}</p>\n\n<p>Para esta tercera entrega volvemos a basarnos en unos artículos de Rafa Aguilar (aka <a href=\"http://twitter.com/rais38\">@rais38</a>), recien publicados en <a href=\"http://objective-c.es\">Objective-C.es</a>, donde primero nos explica las <a href=\"http://objective-c.es/in-app-purchases-en-ios-parte-1/\">categorías y tipos de In-App Purchases</a> y después <a href=\"http://objective-c.es/in-app-purchases-en-ios-parte-2/\">nos enseña con un ejemplo</a> lo sencillo que es incorporar a una aplicación esta excelente fuente de ingresos.<br>\nNosotros aquí vamos a ver como simplifica CargoBay el uso de IAP en nuestras aplicaciones y también a verificar si la compra se ha realizado correctamente por el método más seguro: un servidor con Helios.</p>\n\n<!--more-->\n\n<p>He de reconocer que a medida que he ido avanzando en el análisis de Helios he ido apreciando la bien que esta planteado y lo que puede suponer para un desarrollador que se quiera aventurar en la creación de su propio backend. Cierto es que la primera parte, la que replica el modelo Core Data en el servidor me parece que está todavía un poco floja, así como la sincronización entre los dispositivos y el backend. El soporte para notificaciones push está bien, todavía le queda camino que recorrer pero es un buen punto de partida si quieres tener tu propio gestor de notificaciones. Pero con CargoBay y Venice, la gestión de las compras dentro de la aplicación se simplifican una barbaridad. </p>\n\n<p>CargoBay es una pequeña librería de Mattt Thompson (del que no hemos hablado prácticamente nada en este blog) que facilita la gestión de estas transacciones al reducir a unos pocos métodos con bloques la recuperación de productos, comprobación del estado de la compra así como la verificación del recibo siguiendo las recomendaciones de Apple para evitar los fraudes en este tipo de compras. </p>\n\n<p>Venice, es la gema que incluye Helios para realizar la verificación del recibo en servidor (otra recomendación de Apple para evitar fraudes). La otra funcionalidad que ofrece esta gema es devolver un listado de identificadores de IAP, esto será muy útil cuando queramos cambiar la oferta de productos en nuestra aplicación sin tener que actualizar la aplicación vía iTunes Connect. Para poder utilizar esta funcionalidad, nuestra aplicación debe estar preparada para trabajar con todos los productos que le vayan a llegar por este servicio.</p>\n\n<p>Con todo lo que ya sabemos gracias a Rafa, vamos a crear una aplicación que nos permita contratar los servicios de los piratas y cazarecompensas que habitan Mos Eisley. Sabemos que nadie es de fiar en este lugar así que mejor que incluyamos un sistema de verificación de las compras o nuestro jefe nos terminará dando de comer a un sarlacc (algo muy doloroso ya que recordemos que su digestión dura más de mil años).</p>\n\n<p>Para probar algunas bondades de CargoBay vamos a hacer lo siguiente: En iTunes Connect vamos a crear las siguientes IAP tal y como nos ha <a href=\"\">contado Rafa</a>:</p>\n\n<p>Producto          | Identificador                             |\n----------------- | ----------------------------------------- |\nHan Solo          | com.cytdevteam.MosEisley.HanSolo\nChewbacca         | com.cytdevteam.MosEisley.Chewbacca\nMillennium Falcon | com.cytdevteam.MosEisley.MillenniumFalcon\nModal Nodes       | com.cytdevteam.MosEisley.ModalNodes          </p>\n\n<p>En nuestro repositorio de productos de Helios vamos a crear estos cuatro productos y dos más:      </p>\n\n<p>Producto          | Identificador                             |\n----------------- | ----------------------------------------- |\nHan Solo          | com.cytdevteam.MosEisley.HanSolo\nChewbacca         | com.cytdevteam.MosEisley.Chewbacca\nMillennium Falcon | com.cytdevteam.MosEisley.MillenniumFalcon\nModal Nodes       | com.cytdevteam.MosEisley.ModalNodes\nGreedo            | com.cytdevteam.MosEisley.Greedo\nBoba Fett         | com.cytdevteam.MosEisley.BobaFett         </p>\n\n<p>Si echamos un vistazo a la documentación de Helios, veremos que los únicos métodos que ofrece para In-App Purchases son un GET de productos y un POST para comprobar recibos... ¿Cómo grabamos entonces los productos en la tabla? pues como graban los hombres, con SQL directamente sobre la base de datos.</p>\n\n<p>Creamos un nuevo fichero <em>HeliosTasks.rake</em> en nuestro proyecto para poder lanzarlo tanto en local como en servidor de forma manual y escribimos lo siguiente:</p>\n\n<p>{% codeblock lang:ruby %}\nnamespace :HeliosTasks do\n  desc &quot;TODO&quot;\n  task :loadIdentifiers =&gt; :environment do\n    require &#39;pg&#39;</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">def connect(db, user, pw)\n  PGconn.new(&#39;localhost&#39;, 5432, &#39;&#39;, &#39;&#39;, db, user, pw) \nend\n\ndef populate_products(conn)\n  sql = &quot;DELETE FROM in_app_purchase_products;  -- empty contents of table\n         INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) \n                       VALUES (1, &#39;com.cytdevteam.MosEisley.HanSolo&#39;, &#39;Consumable&#39;, &#39;Han Solo&#39;, &#39;Han Solo The One And Only&#39;, 0.99, &#39;USD&#39;, &#39;t&#39;);\n         INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) \n                       VALUES (2, &#39;com.cytdevteam.MosEisley.Chewbacca&#39;, &#39;Consumable&#39;, &#39;Chewbacca&#39;, &#39;Chewbacca&#39;, 0.99, &#39;USD&#39;, &#39;t&#39;);\n         INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) \n                       VALUES (3, &#39;com.cytdevteam.MosEisley.MillenniumFalcon&#39;, &#39;Consumable&#39;, &#39;Millennium Falcon&#39;, &#39;Millennium Falcon&#39;, 4.99, &#39;USD&#39;, &#39;t&#39;);\n         INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) \n                       VALUES (4, &#39;com.cytdevteam.MosEisley.ModalNodes&#39;, &#39;Consumable&#39;, &#39;Modal Nodes&#39;, &#39;A real Modal Nodes` gig&#39;, 4.99, &#39;USD&#39;, &#39;t&#39;);\n         INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) \n                       VALUES (5, &#39;com.cytdevteam.MosEisley.Greedo&#39;, &#39;Consumable&#39;, &#39;Greedo&#39;, &#39;A coward that shot first&#39;, 4.99, &#39;USD&#39;, &#39;t&#39;);\n         INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) \n                       VALUES (6, &#39;com.cytdevteam.MosEisley.BobaFett&#39;, &#39;Consumable&#39;, &#39;Boba Fett&#39;, &#39;He is no good to me dead&#39;, 4.99, &#39;USD&#39;, &#39;t&#39;);&quot;\n  conn.exec(sql)\nend\n\nbegin\n  conn = connect(&#39;databaseName&#39;,&#39;username&#39;,&#39;password&#39;)\n  puts &quot;Connected to #{conn.db} at #{conn.host}&quot;\n  populate_products(conn)  \nrescue PGError=&gt;e \n  puts &quot;Oh Oh!&quot;, e\nensure\n  conn.close unless conn.nil?\n  puts &quot;Connection closed&quot; \nend\n</code></pre></div>\n<p>end\nend\n{% endcodeblock %}</p>\n\n<p>No creo que os cueste mucho ver lo que hace: establece una conexión con la base de datos y a continuación borra e inserta seis registros. Si hubiera algún error saldría por la consola.</p>\n\n<p>Si ahora escribimos en un navegador <a href=\"http://localhost:3000/products/identifiers\">http://localhost:3000/products/identifiers</a></p>\n\n<p>veríamos algo como esto:</p>\n\n<p><img src=\"%7B%7B%20site.url%20%7D%7D/assets/photos/2013/jsonResponse.png\" alt=\"\"></p>\n\n<p>Ya hemos creado todas las IAP en iTunes Connect (que coñazo) y hemos insertado los productos que vamos a ofrecer en nuestro servidor. Es el momento de liarnos la manta a la cabeza con la aplicación.</p>\n\n<p>Nos vamos a basar en la plantilla de Master-Detail con ARC, Storyboards y Core Data. La primera lista serán las compras que hayamos realizado. En Storyboard añadiremos un nuevo navigation controller con un UITableViewController donde mostraremos los productos que se pueden comprar a través del App Store. </p>\n\n<p>Si a estas alturas todavía no usas CocoaPods deberías hacerlo, es la forma más fácil de gestionar las librerías de terceros que usas en tus aplicaciones. En este caso, nuestro podfile incluirá AFNetworking, CargoBay y NSData+Base64:</p>\n\n<p>{% codeblock %}\nplatform :ios, &#39;5.0&#39;\npod &#39;AFNetworking&#39;, &#39;~&gt; 1.2&#39;\npod &#39;CargoBay&#39;, &#39;~&gt; 0.3.2&#39;\npod &#39;NSData+Base64&#39;, &#39;~&gt; 1.0.0&#39;\n{% endcodeblock %}</p>\n\n<h2>Un pequeño expositor.</h2>\n\n<p>Ya sabemos que lo primero que hay que hacer es comprobar si nuestra aplicación tiene permiso para hacer compras dentro de la aplicación. En caso afirmativo podremos acceder a nuestros servidores para recuperar la información de los productos que tenemos a la venta:</p>\n\n<p>{% codeblock lang:objc %}\n- (void)viewDidLoad\n{\n    [super viewDidLoad];</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">// Comprobamos si hay alguna restricción configurada en el device respecto a las In-App Purchases.\nif ([SKPaymentQueue canMakePayments]) {\n    NSLog(@&quot;Puedo hacer pagos In-App&quot;);\n    [self getProductsInStoreKitDirectlyFromHelios];\n}\nelse {\n    NSLog(@&quot;Control parental activado&quot;);\n}\n</code></pre></div>\n<p>}\n{% endcodeblock %}</p>\n\n<p>Para cargar el UITableView del viewController de productos necesitamos un array de productos. Toda la información del producto tal y como está en iTunes Connect la podemos obtener a través de StoreKit pero CargoBay nos proporciona unos métodos con bloques que recuperan está información. Podemos hacerlo de dos formas: recuperando primero la lista de identificadores y después pasándole esta lista al método correspondiente:</p>\n\n<p>{% codeblock lang:objc %}\n- (void)getProductsIdentifiersInHelios\n{\n    NSURL *url = [NSURL URLWithString:@&quot;http://localhost:3000/products/identifiers/&quot;];\n    NSURLRequest *request = [NSURLRequest requestWithURL:url];</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">[AFJSONRequestOperation JSONRequestOperationWithRequest:request success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) {\n    [self getProductsInStoreKitFromArray:JSON];\n} failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError *error, id JSON) {\n    NSLog(@&quot;Error: %@&quot;, [error description]);\n}];\n</code></pre></div>\n<p>}</p>\n\n<ul>\n<li>(void)getProductsInStoreKitFromArray:(NSArray *)array\n{\n[[CargoBay sharedManager] productsWithIdentifiers:[NSSet setWithArray:array] success:^(NSArray *products, NSArray *invalidIdentifiers) {\n    if (!_productsArray) {\n        _productsArray = [[NSMutableArray alloc] initWithCapacity:0];\n    }\n    NSLog(@&quot;Products: %@&quot;, products);\n    NSLog(@&quot;Invalid Identifiers: %@&quot;, invalidIdentifiers);\n    _productsArray = [NSMutableArray arrayWithArray:products];\n    [self.tableView reloadData];\n} failure:^(NSError *error) {\n    NSLog(@&quot;Error: %@&quot;, error);\n}];\n}\n{% endcodeblock %}</li>\n</ul>\n\n<p>O bien, si tenemos la certeza que el servicio ya nos devuelve los datos en una array únicamente con los identificadores (que es como espera CargoBay que se lo pasemos), podemos hacerlo todo en un único método:</p>\n\n<p>{% codeblock lang:objc %}\n- (void)getProductsInStoreKitDirectlyFromHelios\n{</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">NSURL *url = [NSURL URLWithString:@&quot;http://localhost:3000/products/identifiers/&quot;];\nNSURLRequest *request = [NSURLRequest requestWithURL:url];\n[[CargoBay sharedManager] productsWithRequest:request success:^(NSArray *products, NSArray *invalidIdentifiers) {\n    NSLog(@&quot;Products: %@&quot;, products);\n    NSLog(@&quot;Invalid Identifiers: %@&quot;, invalidIdentifiers);\n    _productsArray = [NSMutableArray arrayWithArray:products];\n    [self.tableView reloadData];\n} failure:^(NSError *error) {\n    NSLog(@&quot;Error: %@&quot;, [error description]);\n}];\n</code></pre></div>\n<p>}\n{% endcodeblock %}</p>\n\n<p>En cualquiera de los dos casos, el resultado del log será el siguiente:</p>\n\n<p>{% codeblock %}\n2013-05-15 16:14:48.275 MosEisley[3242:c07] Products: (\n    &quot;<SKProduct: 0x77ad230>&quot;,\n    &quot;<SKProduct: 0x82a5ab0>&quot;,\n    &quot;<SKProduct: 0x8267f70>&quot;,\n    &quot;<SKProduct: 0x8263400>&quot;\n)\n2013-05-15 16:14:48.275 MosEisley[3242:c07] Invalid Identifiers: (\n    &quot;com.cytdevteam.MosEisley.Greedo&quot;,\n    &quot;com.cytdevteam.MosEisley.BobaFett&quot;\n)\n{% endcodeblock %}</p>\n\n<p>Es decir, hemos recuperado seis registros de nuestro servidor de los cuales cuatro son productos correctos en iTunes Connect y dos no lo son. Solo mostraremos los productos correctos:</p>\n\n<p>{% codeblock lang:objc %}</p>\n\n<h1>pragma mark - Table view data source</h1>\n\n<ul>\n<li><p>(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView\n{\n // Return the number of sections.\n return 1;\n}</p></li>\n<li><p>(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\n{\n // Return the number of rows in the section.\n return [_productsArray count];\n}</p></li>\n<li><p>(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n static NSString *CellIdentifier = @&quot;Cell&quot;;\n UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier forIndexPath:indexPath];</p>\n\n<p>// Configure the cell...\n SKProduct *product = [_productsArray objectAtIndex:indexPath.row];</p>\n\n<p>cell.textLabel.text = product.localizedTitle;\n cell.detailTextLabel.text = product.localizedDescription;\n return cell;\n}\n{% endcodeblock %}</p></li>\n</ul>\n\n<p>Esta será, más o menos, la imagen de nuestro expositor:</p>\n\n<p><img src=\"%7B%7B%20site.url%20%7D%7D/assets/photos/2013/productsViewController.png\" alt=\"\"></p>\n\n<p>Para realizar las compras, CargoBay no tiene ninguna utilidad desarrollada por el momento, la única diferencia con el tutorial de Rafa es que el observer no es necesario incluirlo aquí ya que lo vamos a hacer en el <code>(BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</code> para que gestiones no solo estas compras si no también las compras que pudieran haber quedado pendientes al cerrar la aplicación:</p>\n\n<p>{% codeblock lang:objc %}</p>\n\n<h1>pragma mark - Table view delegate</h1>\n\n<ul>\n<li>(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath\n{\n // Añadimos el producto que recibimos en el método delegado productsRequest:didReceiveResponse:\n SKPayment *pago = [SKPayment paymentWithProduct:[_productsArray objectAtIndex:indexPath.row]];\n // Nos añadimos a nosotros mismos como observadores de la transacción.\n//    [[SKPaymentQueue defaultQueue] addTransactionObserver:self];\n [[SKPaymentQueue defaultQueue] addPayment:pago];\n}\n{% endcodeblock %}</li>\n</ul>\n\n<h2>Que no se pierda ni un recibo.</h2>\n\n<p>Tal y como acabamos de comentar, el <em>observer</em> de la cola de pagos lo vamos a incluir en <code>(BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</code> para que no se pierda ni una sola operación. Además incluimos el bloque que se llamará cada vez que haya alguna actualización de una transacción:</p>\n\n<p>{% codeblock lang:objc %}\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n    // Payment Queue Observation with CargoBay\n    [[CargoBay sharedManager] setPaymentQueueUpdatedTransactionsBlock:^(SKPaymentQueue *queue, NSArray *transactions) {\n        NSLog(@&quot;Updated Transactions: %@&quot;, transactions);\n        for (SKPaymentTransaction *transaction in transactions)\n        {\n            switch (transaction.transactionState)\n            {\n                case SKPaymentTransactionStatePurchased:\n                    [self oneStepVerification:transaction];\n                    break;\n                case SKPaymentTransactionStateFailed:\n                         // TODO\n                    break;\n                case SKPaymentTransactionStateRestored:\n                         // TODO\n                    break;\n                default:\n                    break;\n            }\n        }\n    }];</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">[[SKPaymentQueue defaultQueue] addTransactionObserver:[CargoBay sharedManager]];\n\n// Override point for customization after application launch.\n...\n</code></pre></div>\n<p>}\n{% endcodeblock %}</p>\n\n<p>Cuando la transacción pase a un estado de <em>purchased</em> es cuando deberemos realizar las acciones derivadas de la compra, antes de hacer nada es cuando deberíamos asegurarnos de que el recibo es verdadero. Las dos opciones que tenemos son verificar dentro de la propia aplicación accediendo a un servicio de Apple o llamar a un servicio nuestro que realice ese mismo acceso. Para el primer caso, CargoBay ya nos proporciona un método que realiza esa verificación:</p>\n\n<p>{% codeblock lang:objc %}\n- (void)oneStepVerification:(SKPaymentTransaction *)transaction\n{\n    [[CargoBay sharedManager] verifyTransaction:transaction password:nil success:^(NSDictionary *receipt) {\n        NSLog(@&quot;Receipt: %@&quot;, receipt);\n        [self serverSideVerification:transaction];\n    } failure:^(NSError *error) {\n        NSLog(@&quot;Error %d (%@)&quot;, [error code], [error localizedDescription]);\n    }];\n}\n{% endcodeblock %}</p>\n\n<p>Es de sobra conocido que tanto las IAP son fácilmente <em>pirateables</em> y aunque la verificación desde la propia aplicación aumenta la seguridad de nuestras ventas, también son conocidos los casos en los que esta verificación también ha sido <em>hackeada</em>. La otra utilidad de Venice es la realización de esta misma verificación en nuestro servidor:</p>\n\n<p>{% codeblock lang:objc %}\n- (void)serverSideVerification:(SKPaymentTransaction *)transaction\n{\n    NSURL *url = [NSURL URLWithString:@&quot;http://localhost:3000/receipts/verify&quot;];\n    NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:url];\n    [request setHTTPMethod:@&quot;POST&quot;];</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\nNSString *documentsDirectory = [paths objectAtIndex:0];\nNSString *appFile = [documentsDirectory stringByAppendingPathComponent:@&quot;TransactionReceipt&quot;];\n[transaction.transactionReceipt writeToFile:appFile atomically:YES];\n\nNSString *params = [NSString stringWithFormat:@&quot;receipt-data=%@&quot;, [transaction.transactionReceipt base64EncodedString]];\nNSData *httpBody = [params dataUsingEncoding:NSUTF8StringEncoding];\n[request setHTTPBody:httpBody];\n\n[NSURLConnection sendAsynchronousRequest:request queue:[NSOperationQueue mainQueue] completionHandler:^(NSURLResponse *response, NSData *data, NSError *error) {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *)response;\n    if (httpResponse.statusCode == 200 || httpResponse.statusCode == 203) {\n        id receipt = [NSJSONSerialization JSONObjectWithData:data\n                                                     options:0\n                                                       error:nil];\n        NSLog(@&quot;Received receipt: %@&quot;, receipt);\n        [[SKPaymentQueue defaultQueue] finishTransaction: transaction];\n    } else {\n        NSLog(@&quot;Body: %@&quot;, [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding]);\n        NSLog(@&quot;ERROR: %@&quot;, error);\n    }\n}];\n</code></pre></div>\n<p>}\n{% endcodeblock %}</p>\n\n<p>En el ejemplo de nuestra aplicación realizamos primero la verificación desde nuestra aplicación y posteriormente nos aseguramos repitiendo la verificación en nuestro servidor. Quizá sería más práctico hacerlo al revés: primero en nuestro servidor y si, por algún motivo, no hemos podido realizar la verificación hacerla desde nuestra aplicación como segunda opción.</p>\n\n<p>Ah, podemos dormir tranquilos. La verificación desde nuestro servidor deja registro para que podamos hacernos una idea del volumen de nuestras compras... y a lo mejor sorprender a algún tunante:</p>\n\n<p><img src=\"%7B%7B%20site.url%20%7D%7D/assets/photos/2013/helios-panel-admin.png\" alt=\"\"></p>\n\n<p>A partir de aquí, si la compra ha sido correcta, podemos insertar el registro en nuestra base de datos que le informa a la aplicación que la compra ha sido registrada con éxito. En el ejemplo de Rafa, en este momento habría que descargar la canción.</p>\n\n<p>Por esta vez nada más, si habéis leído los anteriores notaréis que esta vez estoy más entusiasmado con la funcionalidad de Helios. No me he pegado mucho con StoreKit, tan solo con la versión pro de una aplicación, pero la verdad es que ahora si que tengo claro que usaré CargoBay y con toda seguridad haré la verificación en servidor con Venice... aunque haya que tocar algo el código base.</p>\n\n<blockquote>\n<p>Ojito con las dependencias. No se que versión de Helios, CargoBay y AFNetworking estaréis utilizando pero se nota que estos frameworks se están tocando bastante estos días. Yo he tenido algún problemita que otro a la hora de preparar esta entrada. Nada que un par de horas de cabezazos en la pared no solucionen... ;-)</p>\n</blockquote>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1369198440000,"created_by":1,"updated_at":1369198440000,"updated_by":1,"published_at":1369198440000,"published_by":1},{"id":25,"title":"Markdown","slug":"markdown","markdown":"Hay dos cosas que recomendaría a todo el mundo que tuviera que escribir *frecuentemente* en un ordenador:     \n\n1. Aprender mecanografía.    \n2. Aprender [markdown](http://daringfireball.net/projects/markdown/).     \n\n<!--more-->\n\nYo aprendí mecanografía con 18 o 19 años… cuando empecé con memorias, prácticas y otros trabajos universitarios. Markdown lo aprendí hace poco, con 34 años, y creo que no he aprendido nada que me ayude a ganar tanto tiempo en mi día a día entre medias. Markdown te permite confeccionar un documento con títulos, negritas, cursivas, listas, listas numéricas, tablas, citas, hipervínculos,… sin levantar las manos del teclado para ir al trackpad (o al ratón, el que lo use ;-P).\n\nPrincipalmente lo utilizo en cuatro escenarios.       \n\n1. En el trabajo. Los documentos funcionales, inventarios, y otros documentos que haría con un procesador de texto los hago en markdown.    \n2. En este blog. Todas las entradas de este blog están escritas en markdown.    \n3. En los proyectos de desarrollo *caseros*. Intento siempre tener un readme.md tanto si voy a colgar el proyecto en Github como si no.    \n4. En mis notas. Cualquier nota, Tanto si es para acordarme de como se hace un enlace simbólico como si es para tener un inventario de cuentas y tarjetas las escribo en markdown.    \n\nDesde mi punto de vista, para utilizar markdown solo necesitas dos cosas: un editor de texto y un programa que transforme markdown en formato enriquecido para ver cual será el resultado final. \n\nEn el trabajo, donde tengo que lidiar con Windows, uso [MarkdownPad](http://markdownpad.com), un programa que tiene dos ventanas: una para escribir en markdown y otra para visualizar lo que estas escribiendo en formato enriquecido.\n\nEn casa tengo algo más de lío. Inicialmente, todo lo hacía con [Sublime Text](http://www.sublimetext.com). Cuando empece a preocuparme por previsualizar los documentos descubrí Mou, un programa muy semejante a MarkdownPad pero para Mac. Con [Mou](http://mouapp.com) me empece a interesar por la previsualización y así es como descubrí [Marked](http://markedapp.com), un programa dedicado a la previsualización de documentos en markdown y con utilidades para la exportación a HTML, RTF, pdf, etc.    \n\nSiguiendo el rastro a Marked, descubrí que su desarrollador también tenía un programita para escribir en markdown basado en [Notational Velocity](http://notational.net) (un programa del que había oído maravillas en 85% Cocoa): [nvALT](http://brettterpstra.com/projects/nvalt/). La integración de nvALT con Marked fue lo que me animó a probarlo. nvALT trae su propio visualizador (bastante bueno y configurable, por cierto) pero yo prefiero usar Marked (no solo porque lo haya comprado, es que es realmente bueno).\n\nCualquiera que me conozca sabrá que no me canso de probar herramientas y aunque la combinación nvALT + Marked sigue siendo para mi la mejor, ahora estoy usando también [iA Writer](http://www.iawriter.com/mac/). Aunque iA Writer tiene su propio visualizador (nvALT también tiene el suyo), con automator y preferencias de teclado se puede hacer que el documento se previsualice en Marked (algo que, como ya he dejado claro antes, para mi es imprescindible).\n\nTanto las notas, como las entradas del blog, son documentos que quiero tener disponibles cuando estoy en casa y también en el iPhone y en el iPad. Si tienes iA Writer para iOS y para Mac puedes beneficiarte de la sincronización con iCloud aunque existiendo Dropbox y los enlaces simbólicos cualquier aplicación es válida. \n\n## Bueno, con tanta herramienta, ¿cuál es mi forma de trabajar?    \nActualmente, las notas las escribo en nvALT. Tengo todas las notas metidas en la misma carpeta porque la búsqueda de este programa es genial y además las etiquetas me permiten clasificar las notas. Esta carpeta es un enlace simbólico a la carpeta de iCloud de iA Writer. De esta forma, puedo consultar y editar las notas en la versión para iOS que tengo en el iPhone y en el iPad de esta aplicación. nvALT soporta sincronización con Simplenote por lo que sí activas esta opción podrás tener la sincronización con iPhone y iPad sin tener que comprar iA Writer.  Si la carpeta donde nvALT va a buscar las notas está en Dropbox también... mejor que mejor.\n\nLas entradas del blog y los readme de los proyectos también las solía escribir con nvALT cuando estaba en casa pero ahora estoy usando iA Writer. La experiencia de escribir es mucho mejor en iA Writer ya que da la sensación de que estas solo con tu teclado frente a una hoja en blanco pero nvALT tiene unos atajos de teclado mucho más útiles, creo yo, sobre todo para dar formato al texto.      \nCuando termino de escribir los readme, copio el texto y lo pego en el fichero correspondiente. A partir de ahí, la edición la haré desde el editor o IDE que toque en función del proyecto: Sublime, Xcode o RubyMine.    \n\nLas entradas del blog las termino de editar en Sublime. El motivo es que Octopress tiene unas convenciones propias para imágenes o código fuente embebido que no me gusta como se previsualizan así que prefiero dejar esa edición para el momento previo a la publicación. \n\nY ya esta, llamadme enrevesado pero esta es la forma más cómoda que tengo de trabajar. ;-)","html":"<p>Hay dos cosas que recomendaría a todo el mundo que tuviera que escribir <em>frecuentemente</em> en un ordenador:     </p>\n\n<ol>\n<li>Aprender mecanografía.<br></li>\n<li>Aprender <a href=\"http://daringfireball.net/projects/markdown/\">markdown</a>.<br></li>\n</ol>\n\n<!--more-->\n\n<p>Yo aprendí mecanografía con 18 o 19 años… cuando empecé con memorias, prácticas y otros trabajos universitarios. Markdown lo aprendí hace poco, con 34 años, y creo que no he aprendido nada que me ayude a ganar tanto tiempo en mi día a día entre medias. Markdown te permite confeccionar un documento con títulos, negritas, cursivas, listas, listas numéricas, tablas, citas, hipervínculos,… sin levantar las manos del teclado para ir al trackpad (o al ratón, el que lo use ;-P).</p>\n\n<p>Principalmente lo utilizo en cuatro escenarios.       </p>\n\n<ol>\n<li>En el trabajo. Los documentos funcionales, inventarios, y otros documentos que haría con un procesador de texto los hago en markdown.<br></li>\n<li>En este blog. Todas las entradas de este blog están escritas en markdown.<br></li>\n<li>En los proyectos de desarrollo <em>caseros</em>. Intento siempre tener un readme.md tanto si voy a colgar el proyecto en Github como si no.<br></li>\n<li>En mis notas. Cualquier nota, Tanto si es para acordarme de como se hace un enlace simbólico como si es para tener un inventario de cuentas y tarjetas las escribo en markdown.<br></li>\n</ol>\n\n<p>Desde mi punto de vista, para utilizar markdown solo necesitas dos cosas: un editor de texto y un programa que transforme markdown en formato enriquecido para ver cual será el resultado final. </p>\n\n<p>En el trabajo, donde tengo que lidiar con Windows, uso <a href=\"http://markdownpad.com\">MarkdownPad</a>, un programa que tiene dos ventanas: una para escribir en markdown y otra para visualizar lo que estas escribiendo en formato enriquecido.</p>\n\n<p>En casa tengo algo más de lío. Inicialmente, todo lo hacía con <a href=\"http://www.sublimetext.com\">Sublime Text</a>. Cuando empece a preocuparme por previsualizar los documentos descubrí Mou, un programa muy semejante a MarkdownPad pero para Mac. Con <a href=\"http://mouapp.com\">Mou</a> me empece a interesar por la previsualización y así es como descubrí <a href=\"http://markedapp.com\">Marked</a>, un programa dedicado a la previsualización de documentos en markdown y con utilidades para la exportación a HTML, RTF, pdf, etc.    </p>\n\n<p>Siguiendo el rastro a Marked, descubrí que su desarrollador también tenía un programita para escribir en markdown basado en <a href=\"http://notational.net\">Notational Velocity</a> (un programa del que había oído maravillas en 85% Cocoa): <a href=\"http://brettterpstra.com/projects/nvalt/\">nvALT</a>. La integración de nvALT con Marked fue lo que me animó a probarlo. nvALT trae su propio visualizador (bastante bueno y configurable, por cierto) pero yo prefiero usar Marked (no solo porque lo haya comprado, es que es realmente bueno).</p>\n\n<p>Cualquiera que me conozca sabrá que no me canso de probar herramientas y aunque la combinación nvALT + Marked sigue siendo para mi la mejor, ahora estoy usando también <a href=\"http://www.iawriter.com/mac/\">iA Writer</a>. Aunque iA Writer tiene su propio visualizador (nvALT también tiene el suyo), con automator y preferencias de teclado se puede hacer que el documento se previsualice en Marked (algo que, como ya he dejado claro antes, para mi es imprescindible).</p>\n\n<p>Tanto las notas, como las entradas del blog, son documentos que quiero tener disponibles cuando estoy en casa y también en el iPhone y en el iPad. Si tienes iA Writer para iOS y para Mac puedes beneficiarte de la sincronización con iCloud aunque existiendo Dropbox y los enlaces simbólicos cualquier aplicación es válida. </p>\n\n<h2>Bueno, con tanta herramienta, ¿cuál es mi forma de trabajar?</h2>\n\n<p>Actualmente, las notas las escribo en nvALT. Tengo todas las notas metidas en la misma carpeta porque la búsqueda de este programa es genial y además las etiquetas me permiten clasificar las notas. Esta carpeta es un enlace simbólico a la carpeta de iCloud de iA Writer. De esta forma, puedo consultar y editar las notas en la versión para iOS que tengo en el iPhone y en el iPad de esta aplicación. nvALT soporta sincronización con Simplenote por lo que sí activas esta opción podrás tener la sincronización con iPhone y iPad sin tener que comprar iA Writer.  Si la carpeta donde nvALT va a buscar las notas está en Dropbox también... mejor que mejor.</p>\n\n<p>Las entradas del blog y los readme de los proyectos también las solía escribir con nvALT cuando estaba en casa pero ahora estoy usando iA Writer. La experiencia de escribir es mucho mejor en iA Writer ya que da la sensación de que estas solo con tu teclado frente a una hoja en blanco pero nvALT tiene unos atajos de teclado mucho más útiles, creo yo, sobre todo para dar formato al texto.<br>\nCuando termino de escribir los readme, copio el texto y lo pego en el fichero correspondiente. A partir de ahí, la edición la haré desde el editor o IDE que toque en función del proyecto: Sublime, Xcode o RubyMine.    </p>\n\n<p>Las entradas del blog las termino de editar en Sublime. El motivo es que Octopress tiene unas convenciones propias para imágenes o código fuente embebido que no me gusta como se previsualizan así que prefiero dejar esa edición para el momento previo a la publicación. </p>\n\n<p>Y ya esta, llamadme enrevesado pero esta es la forma más cómoda que tengo de trabajar. ;-)</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1373119800000,"created_by":1,"updated_at":1373119800000,"updated_by":1,"published_at":1373119800000,"published_by":1},{"id":26,"title":"Adios Keynote, Hola reveal.js","slug":"adios-keynote","markdown":"El día que empecé a preparar la presentación [Helios y su integración en iOS](http://slides.helios.javimoreno.me) me pregunté si habría alguna forma de utilizar markdown con Keynote. Iban a ser unas cuantas diapositivas de texto y manejar títulos, negritas, cursivas, listas, links,... con markdown me parecía triunfal. Después de una búsqueda rápida en Google y ver un par de enlaces descubrí [reveal.js](https://github.com/hakimel/reveal.js)... y decidí no volver a abrir Keynote nunca más.\n\n<!--more-->\n\nLa [presentación de ejemplo](http://lab.hakim.se/reveal-js/#/) ya te da una idea general de toda la potencia de este framework. Inicialmente, a mi me bastaba con poder reutilizar un fichero en markdown en la presentación y al ver que dentro de cada `section`, que es como se identifican las *slides*, se podía introducir texto en markdown me daba por satisfecho. Luego seguí navegando y vi que, en realidad, podía utilizar un texto entero en markdown ya que con una seríe de convenciones en la escritura y arrancando reveal.js como una aplicación node.js, esta aplicación se encargaba de generar la presentación completa... reveal.js FTW!    \n\n## Atajos de teclado\n\nUn poco más adelante explicaré como hacer que reveal.js lea de un fichero `.md` pero antes quiero destacar la funcionalidad de reveal.js accesible a través de teclado.\n\n* Avance de diapositivas. Una característica muy llamativa de reveal.js es que las presentaciones tienen dos dimensiones. Estamos acostumbrados a avanzar y a retroceder pero con este framework también podemos subir y bajar. Esto, desde mi punto de vista, es muy útil cuando quieres ampliar la información de una diapositiva en varias diapositivas más. En el eje horizontal (avance-retroceso) estarían las diapositivas principales y algunas de ellas podrían tener un eje vertical (arriba-abajo). La navegación se controla con las teclas de cursor pero si la presentación se visualiza en un dispositivo táctil el control de la navegación se hace con el dedo. Impresionante, no?\n* Vistazo general. Pulsando la tecla *escape* se hace un zoom y puedes ver todas las diapositivas en miniatura lo que te permite navegar más rápidamente a una en concreto. Además, en caso de que tengas secciones de diapositivas (grupos en vertical) puedes ver la diapositiva que se mostraría en un flujo de navegación horizontal.\n* Modo Pausa. Pulsando la tecla \"b\" se hace un fundido a negro, de esta forma puedes forzar al público a centrar su atención en ti en lugar de hacerlo sobre la presentación. Para salir de la *pausa* hay que volver a pulsar la \"b\".\n* Pantalla completa. Pulsando la tecla \"f\"\n\nNada que envidiar a los programas típicos de presentaciones como Powerpoint (perdón por ponerlo en primer lugar) o Keynote.\n\n## Funcionalidad avanzada\n\nTener reveal.js dentro de una aplicación node.js también te permite visualizar las notas del presentador y alguna otra funcionalidad más sofisticada como sincronizar la presentación con todos los que la estén viendo al mismo tiempo que tu en sus dispositivos, actualizar el contenido de las diapositivas en tiempo real, etc..\nLa verdad es que toda esas funcionalidades pintan muy bien pero yo lo único que quería era:\n\n## ¡Una presentación hecha con markdown!\n\nHay que destacar que, al combinar reveal.js con un fichero .md donde están recogidas todas las diapositivas no se explota toda la potencia del framework como las diferentes transiciones, enlaces internos, colores de fondo diferentes, imágenes de fondo diferentes, vistas fragmentadas, etc. En mi humilde opinión, abusar de las transiciones, cambios de colores o de imágenes suele cargar bastante una presentación, pero vamos, que eso es cuestión de gustos.   \nSi que eché de menos el no poder hacer vistas fragmentadas. Espero que en alguna próxima versión den con la forma de hacerlo. Al menos la agrupación de diapositivas y las notas si que está disponibles y eso es para mí algo digno de mención. Para que os hagáis una idea, este es el corazón de mi presentación: el fichero [presentation.md](https://github.com/jmoreno/HeliosTalk/blob/master/presentation.md).\n\n## ¿Cómo hice mi presentación?\n\nLo primero que hice fue clonar el repositorio original de [reveal.js](https://github.com/hakimel/reveal.js) y cambiar el fichero index.html. La mayor parte de la presentación estaría en el fichero markdown pero en la primera diapositiva quería usar una vista fragmentada (de esas en las que las frases o las palabras van apareciendo poco a poco). Debido a esto, el código de mi presentación quedaría así:\n\n``` html Fragmento HTML para definir la presentación\n<div class=\"reveal\">\n\n    <!-- Any section element inside of this container is displayed as a slide -->\n    <div class=\"slides\">\n\n\n        <section>\n            <h1>Helios</h1>\n            <h2>y su integración en iOS</h2>\n            <h3 class=\"fragment fade-in\">¿Es <a href=\"http://twitter.com/mattt\">@mattt</a></small> una persona o una legión?</h3>\n            <p>\n                <small>Created by <a href=\"http://javimoreno.me\">Javier Moreno</a> / <a href=\"http://twitter.com/jmoreno78\">@jmoreno78</a></small>\n            </p>\n        </section>\n\n        <section data-markdown=\"presentation.md\" data-separator=\"^\\n\\n\\n\" data-vertical=\"^\\n\\n\" data-notes=\"^Note:\" data-charset=\"UTF-8\"></section>\n\n        <section>\n            <h1>THE END</h1>\n            <h3>BY Javier Moreno / javimoreno.me</h3>\n            <p class=\"fragment fade-in\">\n                <small>Created by <a href=\"http://javimoreno.me\">Javier Moreno</a> / <a href=\"http://twitter.com/jmoreno78\">@jmoreno</a></small>\n            </p>\n        </section>\n\n    </div>\n\n</div>\n```\n    \nEso es todo, aparentemente tres diapositivas. La sección que se nutre de un fichero markdown tiene los siguientes atributos:\n\n* `data-markdown`: La ubicación del fichero\n* `data-separator`: Lo que vaya a identificar la separación entre diapositivas horizontales. En mi caso, tres líneas en blanco.\n* `data-vertical`: Lo que vaya a identificar la separación entre diapositivas verticales. En mi caso, dos líneas en blanco.\n* `data-notes`: Lo que identifique que el texto a continuación no es parte visual de la diapositivas si no de las notas.\n* `data-charset`: Muy importante para nosotros, que usamos muchos caracteres especiales como tildes, eñes, signos de interrogación y admiración el poner UTF-8.\n\nY eso es todo, si echáis un vistazo al fichero [presentation.md](https://github.com/jmoreno/HeliosTalk/blob/master/presentation.md) comprobaréis lo que acabo de comentar.\n\nUna vez hecho esto, para probarlo en local hay que tener instalado [node.js](http://nodejs.org) y [grunt](http://gruntjs.com/getting-started#installing-the-cli). Si ya tenemos estos servicios instalados lo único que hay que hacer es ir hasta la carpeta donde está reveal, instalar las dependencias con `$ npm install` y arrancar la presentación con `$ grunt serve`. La presentación se verá en [http://localhost:8000](http://localhost:8000). \n\n## Despliegue en Heroku.\n\nSi hacer lo anterior me llevo un rato de nada, conseguir desplegar en Heroku me llevó un mes: subí con éxito el martes y la presentación a los asistentes de la NSCoderMAD fue el miércoles.    \nLo primero que probé fue desplegar tal y como estaba la aplicación: fue un fracaso. Por lo visto *grunt* está muy bien para entornos de desarrollo pero los hosting de node.js prefieren otras cosas. Búsquedas en Google hablan de versiones diferentes de la Heroku Toolbet para desplegar aplicaciones node.js con grub pero a mi no me funcionó ninguna de las recomendaciones que encontré.\n\nA última hora encontré este [fork de reveal.js](https://github.com/willy-vvu/reveal.js) que se podía previsualizar en Heroku y de ahí tomé las configuraciones que necesitaba para que funcionará mi presentación en Heroku.\n\nLo primero fue crear un fichero llamado `server.js` con el siguiente contenido:\n\n``` javascript Fichero server.js\nvar app = require('http').createServer(handler)\n  , fs = require('fs')\n  , path = require('path')\n  , url = require('url')\n  ,mime=require('mime')\n\napp.listen(process.env.PORT||5000);\nfunction handler (req, res) {\n\tvar uri = url.parse(req.url).pathname;\n\tif(uri=='/'){\n\t\turi='/index.html'\n\t}\n\turi=uri.replace(/%20/g,' ')\n\tconsole.log(uri)\n\tvar filename = path.join(__dirname, uri);\n\tfs.readFile(filename,\n\t\tfunction (err, data) {\n\t\tif (err) {\n\t\t\tres.writeHead(404);\n\t\t\treturn res.end('Error loading file...');\t\t\t  \n\t\t}\n\t\tres.setHeader('Content-type',mime.lookup(uri));\n\t\tres.writeHead(200);\n\t\tres.end(data);\n\t})\n}\n```\n\nEste fichero contiene la información mínima que node.js necesita para arrancar la aplicación. Para que lea de este fichero, hubo que modificar el fichero `Procfile`\n\n``` bash Fichero Procfile\nweb: node server.js\n```\n\nY por último, cambiar el fichero de dependencias `package.json`:\n\n``` json Fichero package.json\n{\n\t\"author\": \"Javi Moreno featuring (reveal.js by Hakim El Hattab)\",\n\t\"name\": \"revealjs\",\n\t\"description\": \"Helios y su integración con iOS\",\n\t\"version\": \"2.5.1\",\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"git@github.com:jmoreno/HeliosTalk.git\"\n\t},\n\t\"engines\": {\n\t\t\"node\": \"0.8.x\"\n\t},\n\t\"dependencies\": {\n\t\t\"mime\":\"1.2.7\",\n\t\t\"npm\":\"1.2.x\"\n\t}\n}\n```\n\nYa solo quedaba hacer commit y seguir los pasos para desplegar en Heroku:\n\n1. `$ heroku create`\n2. `$ git push heroku master`\n3. `$ heroku open`\n\nNo os podéis hacer a la idea de la alegría que me llevé.\n\n## Para acabar\n\nCreo que, en su momento, este tweet no se entendió:\n\n{% tweet https://twitter.com/jmoreno78/statuses/377465465054191616 %}\n\nComo al final no me faltó el valor, ahí está la presentación: en [slideshare](http://www.slideshare.net/jmoreno78/helios-y-su-integracin-en-i-os), [Github](https://github.com/jmoreno/HeliosTalk) y [Heroku](http://slides.helios.javimoreno.me/#/). \\o/\n","html":"<p>El día que empecé a preparar la presentación <a href=\"http://slides.helios.javimoreno.me\">Helios y su integración en iOS</a> me pregunté si habría alguna forma de utilizar markdown con Keynote. Iban a ser unas cuantas diapositivas de texto y manejar títulos, negritas, cursivas, listas, links,... con markdown me parecía triunfal. Después de una búsqueda rápida en Google y ver un par de enlaces descubrí <a href=\"https://github.com/hakimel/reveal.js\">reveal.js</a>... y decidí no volver a abrir Keynote nunca más.</p>\n\n<!--more-->\n\n<p>La <a href=\"http://lab.hakim.se/reveal-js/#/\">presentación de ejemplo</a> ya te da una idea general de toda la potencia de este framework. Inicialmente, a mi me bastaba con poder reutilizar un fichero en markdown en la presentación y al ver que dentro de cada <code>section</code>, que es como se identifican las <em>slides</em>, se podía introducir texto en markdown me daba por satisfecho. Luego seguí navegando y vi que, en realidad, podía utilizar un texto entero en markdown ya que con una seríe de convenciones en la escritura y arrancando reveal.js como una aplicación node.js, esta aplicación se encargaba de generar la presentación completa... reveal.js FTW!    </p>\n\n<h2>Atajos de teclado</h2>\n\n<p>Un poco más adelante explicaré como hacer que reveal.js lea de un fichero <code>.md</code> pero antes quiero destacar la funcionalidad de reveal.js accesible a través de teclado.</p>\n\n<ul>\n<li>Avance de diapositivas. Una característica muy llamativa de reveal.js es que las presentaciones tienen dos dimensiones. Estamos acostumbrados a avanzar y a retroceder pero con este framework también podemos subir y bajar. Esto, desde mi punto de vista, es muy útil cuando quieres ampliar la información de una diapositiva en varias diapositivas más. En el eje horizontal (avance-retroceso) estarían las diapositivas principales y algunas de ellas podrían tener un eje vertical (arriba-abajo). La navegación se controla con las teclas de cursor pero si la presentación se visualiza en un dispositivo táctil el control de la navegación se hace con el dedo. Impresionante, no?</li>\n<li>Vistazo general. Pulsando la tecla <em>escape</em> se hace un zoom y puedes ver todas las diapositivas en miniatura lo que te permite navegar más rápidamente a una en concreto. Además, en caso de que tengas secciones de diapositivas (grupos en vertical) puedes ver la diapositiva que se mostraría en un flujo de navegación horizontal.</li>\n<li>Modo Pausa. Pulsando la tecla &quot;b&quot; se hace un fundido a negro, de esta forma puedes forzar al público a centrar su atención en ti en lugar de hacerlo sobre la presentación. Para salir de la <em>pausa</em> hay que volver a pulsar la &quot;b&quot;.</li>\n<li>Pantalla completa. Pulsando la tecla &quot;f&quot;</li>\n</ul>\n\n<p>Nada que envidiar a los programas típicos de presentaciones como Powerpoint (perdón por ponerlo en primer lugar) o Keynote.</p>\n\n<h2>Funcionalidad avanzada</h2>\n\n<p>Tener reveal.js dentro de una aplicación node.js también te permite visualizar las notas del presentador y alguna otra funcionalidad más sofisticada como sincronizar la presentación con todos los que la estén viendo al mismo tiempo que tu en sus dispositivos, actualizar el contenido de las diapositivas en tiempo real, etc..\nLa verdad es que toda esas funcionalidades pintan muy bien pero yo lo único que quería era:</p>\n\n<h2>¡Una presentación hecha con markdown!</h2>\n\n<p>Hay que destacar que, al combinar reveal.js con un fichero .md donde están recogidas todas las diapositivas no se explota toda la potencia del framework como las diferentes transiciones, enlaces internos, colores de fondo diferentes, imágenes de fondo diferentes, vistas fragmentadas, etc. En mi humilde opinión, abusar de las transiciones, cambios de colores o de imágenes suele cargar bastante una presentación, pero vamos, que eso es cuestión de gustos.<br>\nSi que eché de menos el no poder hacer vistas fragmentadas. Espero que en alguna próxima versión den con la forma de hacerlo. Al menos la agrupación de diapositivas y las notas si que está disponibles y eso es para mí algo digno de mención. Para que os hagáis una idea, este es el corazón de mi presentación: el fichero <a href=\"https://github.com/jmoreno/HeliosTalk/blob/master/presentation.md\">presentation.md</a>.</p>\n\n<h2>¿Cómo hice mi presentación?</h2>\n\n<p>Lo primero que hice fue clonar el repositorio original de <a href=\"https://github.com/hakimel/reveal.js\">reveal.js</a> y cambiar el fichero index.html. La mayor parte de la presentación estaría en el fichero markdown pero en la primera diapositiva quería usar una vista fragmentada (de esas en las que las frases o las palabras van apareciendo poco a poco). Debido a esto, el código de mi presentación quedaría así:</p>\n\n<p>``` html Fragmento HTML para definir la presentación\n<div class=\"reveal\"></p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">&lt;!-- Any section element inside of this container is displayed as a slide --&gt;\n&lt;div class=&quot;slides&quot;&gt;\n\n\n    &lt;section&gt;\n        &lt;h1&gt;Helios&lt;/h1&gt;\n        &lt;h2&gt;y su integración en iOS&lt;/h2&gt;\n        &lt;h3 class=&quot;fragment fade-in&quot;&gt;¿Es &lt;a href=&quot;http://twitter.com/mattt&quot;&gt;@mattt&lt;/a&gt;&lt;/small&gt; una persona o una legión?&lt;/h3&gt;\n        &lt;p&gt;\n            &lt;small&gt;Created by &lt;a href=&quot;http://javimoreno.me&quot;&gt;Javier Moreno&lt;/a&gt; / &lt;a href=&quot;http://twitter.com/jmoreno78&quot;&gt;@jmoreno78&lt;/a&gt;&lt;/small&gt;\n        &lt;/p&gt;\n    &lt;/section&gt;\n\n    &lt;section data-markdown=&quot;presentation.md&quot; data-separator=&quot;^\\n\\n\\n&quot; data-vertical=&quot;^\\n\\n&quot; data-notes=&quot;^Note:&quot; data-charset=&quot;UTF-8&quot;&gt;&lt;/section&gt;\n\n    &lt;section&gt;\n        &lt;h1&gt;THE END&lt;/h1&gt;\n        &lt;h3&gt;BY Javier Moreno / javimoreno.me&lt;/h3&gt;\n        &lt;p class=&quot;fragment fade-in&quot;&gt;\n            &lt;small&gt;Created by &lt;a href=&quot;http://javimoreno.me&quot;&gt;Javier Moreno&lt;/a&gt; / &lt;a href=&quot;http://twitter.com/jmoreno78&quot;&gt;@jmoreno&lt;/a&gt;&lt;/small&gt;\n        &lt;/p&gt;\n    &lt;/section&gt;\n\n&lt;/div&gt;\n</code></pre></div>\n<p></div>\n```</p>\n\n<p>Eso es todo, aparentemente tres diapositivas. La sección que se nutre de un fichero markdown tiene los siguientes atributos:</p>\n\n<ul>\n<li><code>data-markdown</code>: La ubicación del fichero</li>\n<li><code>data-separator</code>: Lo que vaya a identificar la separación entre diapositivas horizontales. En mi caso, tres líneas en blanco.</li>\n<li><code>data-vertical</code>: Lo que vaya a identificar la separación entre diapositivas verticales. En mi caso, dos líneas en blanco.</li>\n<li><code>data-notes</code>: Lo que identifique que el texto a continuación no es parte visual de la diapositivas si no de las notas.</li>\n<li><code>data-charset</code>: Muy importante para nosotros, que usamos muchos caracteres especiales como tildes, eñes, signos de interrogación y admiración el poner UTF-8.</li>\n</ul>\n\n<p>Y eso es todo, si echáis un vistazo al fichero <a href=\"https://github.com/jmoreno/HeliosTalk/blob/master/presentation.md\">presentation.md</a> comprobaréis lo que acabo de comentar.</p>\n\n<p>Una vez hecho esto, para probarlo en local hay que tener instalado <a href=\"http://nodejs.org\">node.js</a> y <a href=\"http://gruntjs.com/getting-started#installing-the-cli\">grunt</a>. Si ya tenemos estos servicios instalados lo único que hay que hacer es ir hasta la carpeta donde está reveal, instalar las dependencias con <code>$ npm install</code> y arrancar la presentación con <code>$ grunt serve</code>. La presentación se verá en <a href=\"http://localhost:8000\">http://localhost:8000</a>. </p>\n\n<h2>Despliegue en Heroku.</h2>\n\n<p>Si hacer lo anterior me llevo un rato de nada, conseguir desplegar en Heroku me llevó un mes: subí con éxito el martes y la presentación a los asistentes de la NSCoderMAD fue el miércoles.<br>\nLo primero que probé fue desplegar tal y como estaba la aplicación: fue un fracaso. Por lo visto <em>grunt</em> está muy bien para entornos de desarrollo pero los hosting de node.js prefieren otras cosas. Búsquedas en Google hablan de versiones diferentes de la Heroku Toolbet para desplegar aplicaciones node.js con grub pero a mi no me funcionó ninguna de las recomendaciones que encontré.</p>\n\n<p>A última hora encontré este <a href=\"https://github.com/willy-vvu/reveal.js\">fork de reveal.js</a> que se podía previsualizar en Heroku y de ahí tomé las configuraciones que necesitaba para que funcionará mi presentación en Heroku.</p>\n\n<p>Lo primero fue crear un fichero llamado <code>server.js</code> con el siguiente contenido:</p>\n\n<p>``` javascript Fichero server.js\nvar app = require(&#39;http&#39;).createServer(handler)\n  , fs = require(&#39;fs&#39;)\n  , path = require(&#39;path&#39;)\n  , url = require(&#39;url&#39;)\n  ,mime=require(&#39;mime&#39;)</p>\n\n<p>app.listen(process.env.PORT||5000);\nfunction handler (req, res) {\n    var uri = url.parse(req.url).pathname;\n    if(uri==&#39;/&#39;){\n        uri=&#39;/index.html&#39;\n    }\n    uri=uri.replace(/%20/g,&#39; &#39;)\n    console.log(uri)\n    var filename = path.join(__dirname, uri);\n    fs.readFile(filename,\n        function (err, data) {\n        if (err) {\n            res.writeHead(404);\n            return res.end(&#39;Error loading file...&#39;);<br>\n        }\n        res.setHeader(&#39;Content-type&#39;,mime.lookup(uri));\n        res.writeHead(200);\n        res.end(data);\n    })\n}\n```</p>\n\n<p>Este fichero contiene la información mínima que node.js necesita para arrancar la aplicación. Para que lea de este fichero, hubo que modificar el fichero <code>Procfile</code></p>\n\n<p><code>bash Fichero Procfile\nweb: node server.js\n</code></p>\n\n<p>Y por último, cambiar el fichero de dependencias <code>package.json</code>:</p>\n\n<p><code>json Fichero package.json\n{\n    &quot;author&quot;: &quot;Javi Moreno featuring (reveal.js by Hakim El Hattab)&quot;,\n    &quot;name&quot;: &quot;revealjs&quot;,\n    &quot;description&quot;: &quot;Helios y su integración con iOS&quot;,\n    &quot;version&quot;: &quot;2.5.1&quot;,\n    &quot;repository&quot;: {\n        &quot;type&quot;: &quot;git&quot;,\n        &quot;url&quot;: &quot;git@github.com:jmoreno/HeliosTalk.git&quot;\n    },\n    &quot;engines&quot;: {\n        &quot;node&quot;: &quot;0.8.x&quot;\n    },\n    &quot;dependencies&quot;: {\n        &quot;mime&quot;:&quot;1.2.7&quot;,\n        &quot;npm&quot;:&quot;1.2.x&quot;\n    }\n}\n</code></p>\n\n<p>Ya solo quedaba hacer commit y seguir los pasos para desplegar en Heroku:</p>\n\n<ol>\n<li><code>$ heroku create</code></li>\n<li><code>$ git push heroku master</code></li>\n<li><code>$ heroku open</code></li>\n</ol>\n\n<p>No os podéis hacer a la idea de la alegría que me llevé.</p>\n\n<h2>Para acabar</h2>\n\n<p>Creo que, en su momento, este tweet no se entendió:</p>\n\n<p>{% tweet https://twitter.com/jmoreno78/statuses/377465465054191616 %}</p>\n\n<p>Como al final no me faltó el valor, ahí está la presentación: en <a href=\"http://www.slideshare.net/jmoreno78/helios-y-su-integracin-en-i-os\">slideshare</a>, <a href=\"https://github.com/jmoreno/HeliosTalk\">Github</a> y <a href=\"http://slides.helios.javimoreno.me/#/\">Heroku</a>. \\o/</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1380935220000,"created_by":1,"updated_at":1380935220000,"updated_by":1,"published_at":1380935220000,"published_by":1},{"id":27,"title":"Padrinos Y Vacunas","slug":"padrinos-y-vacunas","markdown":"{% quote author:\"Vito Corleone \" title:\"El Padrino\" %}\nLe haré una oferta que no podrá rechazar.\n{% endquote %}\n\nEn la misma película de la que he sacado esta cita se dice que los italianos piensan que el mundo es tan duro que hay que tener dos padres y por eso todos tienen un padrino. Quizá esto es lo que pensaron los desarrolladores del nuevo framework del que me he hecho fan, Padrino, por que el nombre le viene que ni pintado. \n\n<!--more-->\n\nCreo que mi búsqueda del backend perfecto empieza a ser preocupante y enfermiza. Vaya por delante que lo que yo busco es algo que me sirva para aplicaciones móviles, que pueda tener una pequeña interfaz web y que me deje ver la base de datos, que a mi me gusta mucho el SQL, para que nos vamos a engañar. \n\nRuby on Rails siempre me ha parecido una buena opción ya que es relativamente sencillo y con pocos pasos puedes tener mucho del desarrollo hecho. Si a eso le añades la versatilidad que tiene para mostrar los datos en HTML, XML o json tienes un gran complemento para dispositivos móviles. Sin embargo reconozco que para devolver un pequeño json no es necesario montar el pifostio que se monta con Rails. \n\nEn el otro extremo está Sinatra. Es sencillo, mucho más orientado a montar API's pero también te permite crear interfaces. La principal ventaja es que reduce a la mínima expresión lo que hay que escribir para que un servicio funcione. Sin embargo, puede llegar un momento en el que te canses de tanta sencillez y manualidad. \n\nPadrino está justo en el medio de Rails y Sinatra. Esta construido sobre Sinatra pero incorpora utilidades que hacen más eficiente el desarrollo. Sólo una curiosidad, este post hacia bastante tiempo que pensaba escribirlo. Incialmente iba a hacerlo en Rails (hace año y pico), luego pensé en hacerlo en Sinatra (hace meses). Descubrí Padrino la semana pasada y aquí esta terminado. De la noche a la mañana he encontrado el framework que mejor se adapta a mis necesidades particulares. \n\nBueno, después del coñazo que he soltado vamos a ver si hacemos algo más interesante como, por ejemplo, resolver uno de los problemas más graves de la paternidad: saber que vacuna le toca a tu hijo/a en la próxima revisión.\n\n## Calendario de vacunaciones. \n\nPor sí no lo sabéis, el calendario de vacunación infantil se basa en recomendaciones de la OMS que el Ministerio de Sanidad en colaboración con la Asociación Nacional de Pediatría estudia y presenta para que, posteriormente, las consejerías de sanidad de cada comunidad autónoma organicen como les de la gana. Esto hace que en España haya 19 calendarios diferentes que, además, suelen cambiar cada tres cuatro años. \n\nEl objetivo de nuestra aplicación web será devolver un json con los 19 calendarios actualizados. Para ellos, nuestra aplicación necesitará de un panel de administración con el que actualizáremos las cinco tablas que forman el modelo de datos. \n\n![]({{ site.url }}/assets/photos/2013/diagram.png)\n\nNo voy a entrar en muchos detalles sobre el modelo. La primera tabla es la de países, inicialmente solo esta España pero creo que el modelo es extensible a cualquier país. Un país puede tener varios calendarios... como en España, que es una locura. Cada calendario tendrá una serie de eventos y cada evento tendrá, entre otros datos, una edad, una vacuna. Edades y Vacunas también son entidades del modelo de datos.\n\n### Creación del proyecto\n\nSiguiendo la estela de Rails, Padrino tiene generadores que nos vendrán muy bien en diferentes fases del desarrollo. El primero que utilizaremos es el que permite crear el proyecto. \n\n{% codeblock lang:bash %}\n$ padrino g project VacScheduler -t shoulda -e haml -c sass -s jquery -d activerecord -b\n{% endcodeblock %}\n    \nLa mejor forma de saber que significan todos estos términos es mirar la [documentación de Padrino sobre los generadores](http://www.padrinorb.com/guides/generators). Yo he puesto todo esto, no porque sea un listillo, sino porque para hacer está aplicación me he fusilado el [tutorial sobre como hacer un blog](http://www.padrinorb.com/guides/blog-tutorial).    \nBasicamente, hemos creado un proyecto llamado VacScheduler que usa shoulda para el testing, haml para el renderizado de las páginas, sass para los estilos, jquery para la parte de scripting y activerecord para el orm. Además, cuando termine la creación del proyecto, forzaremos una instalación de las gemas que nos faltan con Bundle.\n    \n### Creación del panel de administración (esto hará las delicias de más de uno)\n\nUna gran diferencia con respecto a Rails es que, en Padrino han pensado que la existencia de un grupo de usuarios encargados de mantener las tablas que forman el modelo de la aplicación es un escenario lo suficientemente habitual como para crear una funcionalidad de Administración. A nosotros esto nos viene genial porque lo que queremos es tener una aplicación que devuelva una versión actualizada de los diferentes calendarios de vacunación y para actualizar esos datos tendremos a un usuario responsable de dicho mantenimiento. Las instrucciones para crear el panel de administración son las siguientes:\n\n{% codeblock lang:bash %}\n$ padrino g admin --theme warehouse\n$ bundle install\n\n$ padrino rake ar:create\n$ padrino rake ar:migrate\n$ padrino rake seed\n{% endcodeblock %}\n\nEste último paso nos pedirá un correo electrónico y una contraseña para poder acceder al panel de administración. Si después de hacer esto, arrancamos la aplicación podremos ver el bonito panel de administración.\n\n{% codeblock lang:bash %}\n$ padrino start\n{% endcodeblock %}\n\n### Creación de los modelos\n\nSi estuviéramos en Rails, generaríamos un scaffold. Padrino no tiene scaffold... o si? igual nos llevamos una sorpresa más adelante.    \nDe momento vamos a crear los modelos de las cinco tablas que forman nuestro modelo de datos.\n\n{% codeblock lang:bash %}\n$ padrino g model age short_name:string name:string months:integer -a app\n$ padrino g model calendar name:string country_id:integer -a app\n$ padrino g model country name:string -a app\n$ padrino g model event notes:text calendar_id:integer age_id:integer vaccine_id:integer -a app\n$ padrino g model vaccine short_name:string name:string description:text link_info:string -a app\n{% endcodeblock %}\n\ny hacemos la migración correspondiente para crear las entidades en la base de datos:\n\n{% codeblock lang:bash %}\n$ padrino rake ar:migrate\n{% endcodeblock %}\n\n### Modificación de los modelos para incluir las relaciones y validaciones\n\nSobre los modelos que nos ha creado Padrino, hacemos las modificaciones oportunas para indicar las relaciones entre las entidades así como los campos que son obligatorios:\n\n{% codeblock lang:ruby Age.rb %}\nclass Age < ActiveRecord::Base\n    has_many :events\n    validates_presence_of :short_name\n    validates_presence_of :name\n    validates_presence_of :months\nend\n{% endcodeblock %}\n\n{% codeblock lang:ruby Calendar.rb %}\nclass Calendar < ActiveRecord::Base\n    has_many :events\n    belongs_to :country\n    validates_presence_of :name\nend\n{% endcodeblock %}    \n\n{% codeblock lang:ruby Country.rb %}\nclass Country < ActiveRecord::Base\n    has_many :calendars\n    validates_presence_of :name\nend\n{% endcodeblock %}    \n\n{% codeblock lang:ruby Event.rb %}\nclass Event < ActiveRecord::Base\n    belongs_to :calendar\n    belongs_to :age\n    belongs_to :vaccine\nend\n{% endcodeblock %}    \n\n{% codeblock lang:ruby Vaccine.rb %}\nclass Vaccine < ActiveRecord::Base\n    has_many :events\n    validates_presence_of :short_name\n    validates_presence_of :name\nend\n{% endcodeblock %}\n\n### Creación de los paneles de administración de cada uno de los modelos anteriores\n\nEsto es lo que me ha ganado de Padrino. Las admin_page son unas pantallas de mantenimiento de datos semejantes a las creadas al hacer un scaffold de Rails pero vinculadas al panel de administración. Es decir, que solo serán visibles si estás autenticado en el sistema. Parece una chorrada, pero para hacer esto en Rails hay que picar un poquito.\n\n{% codeblock lang:bash %}\n$ padrino g admin_page age\n$ padrino g admin_page calendar\n$ padrino g admin_page country\n$ padrino g admin_page event\n$ padrino g admin_page vaccine\n{% endcodeblock %}\n\nCuando refresquemos, veremos algo tan bonito como esto:\n\n![]({{ site.url }}/assets/photos/2013/padrino-admin-1.png)\n\n![]({{ site.url }}/assets/photos/2013/padrino-admin-2.png)\n\n![]({{ site.url }}/assets/photos/2013/padrino-admin-3.png)\n\n### Un JSON con todos los calendarios.\n\nEl objetivo de la aplicación es enviar un JSON con la versión más actual de todos y cada uno de los calendarios para que una aplicación móvil refresque su base de datos y pueda informar a sus usuarios de cuales son las próximas vacunas que tienen que poner a sus criaturas.   \nAhora es cuando nos aprovechamos de que Padrino está montado sobre Sinatra y escribimos el siguiente trozo de código en app.rb:\n\n{% codeblock lang:ruby %}\nget \"/\" do\n    Country.all.to_json(:include => { :calendars => {\n                            :include => { :events => {\n                                :include => [\n                                    { :vaccine => { :only => [:short_name, :name, :description, :link_info]}}, \n                                    { :age => { :only => [:months, :name, :short_name]}}],\n                                :only => :notes}},\n                            :only => [:id, :name] }}, \n                        :only => [:id, :name])\n\nend\n{% endcodeblock %}\n\nY listo, con este *sencillo* fragmento de código toda la funcionalidad *publica* de nuestra aplicación web está construida. Ya podemos llamar desde la aplicación.\n\nSi queréis echar un vistazo, en Heroku (como no) está instalada está misma aplicación: [VacScheduler](http://vacscheduler.herokuapp.com). He tenido algunos problemitas con la codificación en la base de datos así que, si no lo he arreglado antes, veréis algunos *código extraños* donde debería haber tildes.\n\nEl código fuente de dicha aplicación lo podéis ver en [GitHub](https://github.com/jmoreno/VacScheduler).\n    \n\n    ","html":"<p>{% quote author:&quot;Vito Corleone &quot; title:&quot;El Padrino&quot; %}\nLe haré una oferta que no podrá rechazar.\n{% endquote %}</p>\n\n<p>En la misma película de la que he sacado esta cita se dice que los italianos piensan que el mundo es tan duro que hay que tener dos padres y por eso todos tienen un padrino. Quizá esto es lo que pensaron los desarrolladores del nuevo framework del que me he hecho fan, Padrino, por que el nombre le viene que ni pintado. </p>\n\n<!--more-->\n\n<p>Creo que mi búsqueda del backend perfecto empieza a ser preocupante y enfermiza. Vaya por delante que lo que yo busco es algo que me sirva para aplicaciones móviles, que pueda tener una pequeña interfaz web y que me deje ver la base de datos, que a mi me gusta mucho el SQL, para que nos vamos a engañar. </p>\n\n<p>Ruby on Rails siempre me ha parecido una buena opción ya que es relativamente sencillo y con pocos pasos puedes tener mucho del desarrollo hecho. Si a eso le añades la versatilidad que tiene para mostrar los datos en HTML, XML o json tienes un gran complemento para dispositivos móviles. Sin embargo reconozco que para devolver un pequeño json no es necesario montar el pifostio que se monta con Rails. </p>\n\n<p>En el otro extremo está Sinatra. Es sencillo, mucho más orientado a montar API&#39;s pero también te permite crear interfaces. La principal ventaja es que reduce a la mínima expresión lo que hay que escribir para que un servicio funcione. Sin embargo, puede llegar un momento en el que te canses de tanta sencillez y manualidad. </p>\n\n<p>Padrino está justo en el medio de Rails y Sinatra. Esta construido sobre Sinatra pero incorpora utilidades que hacen más eficiente el desarrollo. Sólo una curiosidad, este post hacia bastante tiempo que pensaba escribirlo. Incialmente iba a hacerlo en Rails (hace año y pico), luego pensé en hacerlo en Sinatra (hace meses). Descubrí Padrino la semana pasada y aquí esta terminado. De la noche a la mañana he encontrado el framework que mejor se adapta a mis necesidades particulares. </p>\n\n<p>Bueno, después del coñazo que he soltado vamos a ver si hacemos algo más interesante como, por ejemplo, resolver uno de los problemas más graves de la paternidad: saber que vacuna le toca a tu hijo/a en la próxima revisión.</p>\n\n<h2>Calendario de vacunaciones.</h2>\n\n<p>Por sí no lo sabéis, el calendario de vacunación infantil se basa en recomendaciones de la OMS que el Ministerio de Sanidad en colaboración con la Asociación Nacional de Pediatría estudia y presenta para que, posteriormente, las consejerías de sanidad de cada comunidad autónoma organicen como les de la gana. Esto hace que en España haya 19 calendarios diferentes que, además, suelen cambiar cada tres cuatro años. </p>\n\n<p>El objetivo de nuestra aplicación web será devolver un json con los 19 calendarios actualizados. Para ellos, nuestra aplicación necesitará de un panel de administración con el que actualizáremos las cinco tablas que forman el modelo de datos. </p>\n\n<p><img src=\"%7B%7B%20site.url%20%7D%7D/assets/photos/2013/diagram.png\" alt=\"\"></p>\n\n<p>No voy a entrar en muchos detalles sobre el modelo. La primera tabla es la de países, inicialmente solo esta España pero creo que el modelo es extensible a cualquier país. Un país puede tener varios calendarios... como en España, que es una locura. Cada calendario tendrá una serie de eventos y cada evento tendrá, entre otros datos, una edad, una vacuna. Edades y Vacunas también son entidades del modelo de datos.</p>\n\n<h3>Creación del proyecto</h3>\n\n<p>Siguiendo la estela de Rails, Padrino tiene generadores que nos vendrán muy bien en diferentes fases del desarrollo. El primero que utilizaremos es el que permite crear el proyecto. </p>\n\n<p>{% codeblock lang:bash %}\n$ padrino g project VacScheduler -t shoulda -e haml -c sass -s jquery -d activerecord -b\n{% endcodeblock %}</p>\n\n<p>La mejor forma de saber que significan todos estos términos es mirar la <a href=\"http://www.padrinorb.com/guides/generators\">documentación de Padrino sobre los generadores</a>. Yo he puesto todo esto, no porque sea un listillo, sino porque para hacer está aplicación me he fusilado el <a href=\"http://www.padrinorb.com/guides/blog-tutorial\">tutorial sobre como hacer un blog</a>.<br>\nBasicamente, hemos creado un proyecto llamado VacScheduler que usa shoulda para el testing, haml para el renderizado de las páginas, sass para los estilos, jquery para la parte de scripting y activerecord para el orm. Además, cuando termine la creación del proyecto, forzaremos una instalación de las gemas que nos faltan con Bundle.</p>\n\n<h3>Creación del panel de administración (esto hará las delicias de más de uno)</h3>\n\n<p>Una gran diferencia con respecto a Rails es que, en Padrino han pensado que la existencia de un grupo de usuarios encargados de mantener las tablas que forman el modelo de la aplicación es un escenario lo suficientemente habitual como para crear una funcionalidad de Administración. A nosotros esto nos viene genial porque lo que queremos es tener una aplicación que devuelva una versión actualizada de los diferentes calendarios de vacunación y para actualizar esos datos tendremos a un usuario responsable de dicho mantenimiento. Las instrucciones para crear el panel de administración son las siguientes:</p>\n\n<p>{% codeblock lang:bash %}\n$ padrino g admin --theme warehouse\n$ bundle install</p>\n\n<p>$ padrino rake ar:create\n$ padrino rake ar:migrate\n$ padrino rake seed\n{% endcodeblock %}</p>\n\n<p>Este último paso nos pedirá un correo electrónico y una contraseña para poder acceder al panel de administración. Si después de hacer esto, arrancamos la aplicación podremos ver el bonito panel de administración.</p>\n\n<p>{% codeblock lang:bash %}\n$ padrino start\n{% endcodeblock %}</p>\n\n<h3>Creación de los modelos</h3>\n\n<p>Si estuviéramos en Rails, generaríamos un scaffold. Padrino no tiene scaffold... o si? igual nos llevamos una sorpresa más adelante.<br>\nDe momento vamos a crear los modelos de las cinco tablas que forman nuestro modelo de datos.</p>\n\n<p>{% codeblock lang:bash %}\n$ padrino g model age short<em>name:string name:string months:integer -a app\n$ padrino g model calendar name:string country</em>id:integer -a app\n$ padrino g model country name:string -a app\n$ padrino g model event notes:text calendar<em>id:integer age</em>id:integer vaccine<em>id:integer -a app\n$ padrino g model vaccine short</em>name:string name:string description:text link_info:string -a app\n{% endcodeblock %}</p>\n\n<p>y hacemos la migración correspondiente para crear las entidades en la base de datos:</p>\n\n<p>{% codeblock lang:bash %}\n$ padrino rake ar:migrate\n{% endcodeblock %}</p>\n\n<h3>Modificación de los modelos para incluir las relaciones y validaciones</h3>\n\n<p>Sobre los modelos que nos ha creado Padrino, hacemos las modificaciones oportunas para indicar las relaciones entre las entidades así como los campos que son obligatorios:</p>\n\n<p>{% codeblock lang:ruby Age.rb %}\nclass Age &lt; ActiveRecord::Base\n    has<em>many :events\n    validates</em>presence<em>of :short</em>name\n    validates<em>presence</em>of :name\n    validates<em>presence</em>of :months\nend\n{% endcodeblock %}</p>\n\n<p>{% codeblock lang:ruby Calendar.rb %}\nclass Calendar &lt; ActiveRecord::Base\n    has<em>many :events\n    belongs</em>to :country\n    validates<em>presence</em>of :name\nend\n{% endcodeblock %}    </p>\n\n<p>{% codeblock lang:ruby Country.rb %}\nclass Country &lt; ActiveRecord::Base\n    has<em>many :calendars\n    validates</em>presence_of :name\nend\n{% endcodeblock %}    </p>\n\n<p>{% codeblock lang:ruby Event.rb %}\nclass Event &lt; ActiveRecord::Base\n    belongs<em>to :calendar\n    belongs</em>to :age\n    belongs_to :vaccine\nend\n{% endcodeblock %}    </p>\n\n<p>{% codeblock lang:ruby Vaccine.rb %}\nclass Vaccine &lt; ActiveRecord::Base\n    has<em>many :events\n    validates</em>presence<em>of :short</em>name\n    validates<em>presence</em>of :name\nend\n{% endcodeblock %}</p>\n\n<h3>Creación de los paneles de administración de cada uno de los modelos anteriores</h3>\n\n<p>Esto es lo que me ha ganado de Padrino. Las admin_page son unas pantallas de mantenimiento de datos semejantes a las creadas al hacer un scaffold de Rails pero vinculadas al panel de administración. Es decir, que solo serán visibles si estás autenticado en el sistema. Parece una chorrada, pero para hacer esto en Rails hay que picar un poquito.</p>\n\n<p>{% codeblock lang:bash %}\n$ padrino g admin<em>page age\n$ padrino g admin</em>page calendar\n$ padrino g admin<em>page country\n$ padrino g admin</em>page event\n$ padrino g admin_page vaccine\n{% endcodeblock %}</p>\n\n<p>Cuando refresquemos, veremos algo tan bonito como esto:</p>\n\n<p><img src=\"%7B%7B%20site.url%20%7D%7D/assets/photos/2013/padrino-admin-1.png\" alt=\"\"></p>\n\n<p><img src=\"%7B%7B%20site.url%20%7D%7D/assets/photos/2013/padrino-admin-2.png\" alt=\"\"></p>\n\n<p><img src=\"%7B%7B%20site.url%20%7D%7D/assets/photos/2013/padrino-admin-3.png\" alt=\"\"></p>\n\n<h3>Un JSON con todos los calendarios.</h3>\n\n<p>El objetivo de la aplicación es enviar un JSON con la versión más actual de todos y cada uno de los calendarios para que una aplicación móvil refresque su base de datos y pueda informar a sus usuarios de cuales son las próximas vacunas que tienen que poner a sus criaturas.<br>\nAhora es cuando nos aprovechamos de que Padrino está montado sobre Sinatra y escribimos el siguiente trozo de código en app.rb:</p>\n\n<p>{% codeblock lang:ruby %}\nget &quot;/&quot; do\n    Country.all.to<em>json(:include =&gt; { :calendars =&gt; {\n                            :include =&gt; { :events =&gt; {\n                                :include =&gt; [\n                                    { :vaccine =&gt; { :only =&gt; [:short</em>name, :name, :description, :link<em>info]}}, \n                                    { :age =&gt; { :only =&gt; [:months, :name, :short</em>name]}}],\n                                :only =&gt; :notes}},\n                            :only =&gt; [:id, :name] }}, \n                        :only =&gt; [:id, :name])</p>\n\n<p>end\n{% endcodeblock %}</p>\n\n<p>Y listo, con este <em>sencillo</em> fragmento de código toda la funcionalidad <em>publica</em> de nuestra aplicación web está construida. Ya podemos llamar desde la aplicación.</p>\n\n<p>Si queréis echar un vistazo, en Heroku (como no) está instalada está misma aplicación: <a href=\"http://vacscheduler.herokuapp.com\">VacScheduler</a>. He tenido algunos problemitas con la codificación en la base de datos así que, si no lo he arreglado antes, veréis algunos <em>código extraños</em> donde debería haber tildes.</p>\n\n<p>El código fuente de dicha aplicación lo podéis ver en <a href=\"https://github.com/jmoreno/VacScheduler\">GitHub</a>.</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1384129860000,"created_by":1,"updated_at":1384129860000,"updated_by":1,"published_at":1384129860000,"published_by":1},{"id":28,"title":"Workflows De Editorial Para Octopress","slug":"workflows-de-editorial-para-octopress","markdown":"He estado creando una serie de workflows en [Editorial](\nhttps://itunes.apple.com/es/app/editorial/id673907758?mt=8) que creo serán de gran ayuda a todos los que usen esta fantástica herramienta de edición para iPad al escribir las entradas de su blog Octopress.    \n\n<!--more-->\n\nAunque Octopress se basta y se sobra con textos en markdown, tiene una serie de plugins muy potentes que son de gran ayuda para insertar citas, vídeos, imágenes, tweets embebidos o código fuente.    \nYo me he centrado en lo que me hacían falta para los *posts* que suelo escribir pero como podréis ver, una vez hecho el primero, el resto son sota, caballo y rey. \n\nOs dejo los enlaces por sí les queréis echar un ojo. \n\n- [Creacion de fichero *octopress* a partir de fichero *markdown*](http://editorial-app.appspot.com/workflow/5252485694357504/5M7iTYKP5ak)\n- [Marca de continuación. (\"Seguir leyendo\")](http://editorial-app.appspot.com/workflow/5309436960702464/jobUl19TzXk)\n- [Texto seleccionado como cita](http://editorial-app.appspot.com/workflow/6341637861015552/zFyzbnTW9QY)\n- [Texto seleccionado como código fuente](http://editorial-app.appspot.com/workflow/5269098627858432/7jGKDINoyJQ)\n- [Texto seleccionado como gist embebido](http://editorial-app.appspot.com/workflow/5877028700028928/9eyEep5t6f4)\n- [URL seleccionada como tweet embebido](http://editorial-app.appspot.com/workflow/5795046364282880/fc1_oaplErs)\n\n## ¿Cómo se usan?\n\nPues para empezar, hay que escribir todo el post en markdown en un fichero sin extensión cuyo nombre sea el título que va a tener el post. ¿Un poco cutre? Es mi workflow, ¿qué pasa? \nSi se hace de esta forma, el primer workflow creara un fichero octopress a la primera. \n\nEl segundo workflow no tiene mucho misterio, inserta el *excerp* donde le digamos. \n\nEl resto transforma esto:\n\nLas rosas son rosas, el cielo es azul y tú eres tú. \n\nputs \"Hello, world!\"\n\t\n5467313\n\nhttps://twitter.com/jmoreno78/statuses/427223495794520064\n\nEn esto otro:\n\n{% blockquote Un poeta urbano  %}\nLas rosas son rosas, el cielo es azul y tú eres tú. \n{% endblockquote %}\n\n{% codeblock lang:ruby Hola mundo en COBOL.   %}\nputs \"Hello, world!\"\n{% endcodeblock %}\n\n{% gist 5467313 %}\n\n{% tweet https://twitter.com/jmoreno78/statuses/427223495794520064 %}\n\n\n\nMola, ¿eh?\n","html":"<p>He estado creando una serie de workflows en <a href=\"https://itunes.apple.com/es/app/editorial/id673907758?mt=8\">Editorial</a> que creo serán de gran ayuda a todos los que usen esta fantástica herramienta de edición para iPad al escribir las entradas de su blog Octopress.    </p>\n\n<!--more-->\n\n<p>Aunque Octopress se basta y se sobra con textos en markdown, tiene una serie de plugins muy potentes que son de gran ayuda para insertar citas, vídeos, imágenes, tweets embebidos o código fuente.<br>\nYo me he centrado en lo que me hacían falta para los <em>posts</em> que suelo escribir pero como podréis ver, una vez hecho el primero, el resto son sota, caballo y rey. </p>\n\n<p>Os dejo los enlaces por sí les queréis echar un ojo. </p>\n\n<ul>\n<li><a href=\"http://editorial-app.appspot.com/workflow/5252485694357504/5M7iTYKP5ak\">Creacion de fichero <em>octopress</em> a partir de fichero <em>markdown</em></a></li>\n<li><a href=\"http://editorial-app.appspot.com/workflow/5309436960702464/jobUl19TzXk\">Marca de continuación. (&quot;Seguir leyendo&quot;)</a></li>\n<li><a href=\"http://editorial-app.appspot.com/workflow/6341637861015552/zFyzbnTW9QY\">Texto seleccionado como cita</a></li>\n<li><a href=\"http://editorial-app.appspot.com/workflow/5269098627858432/7jGKDINoyJQ\">Texto seleccionado como código fuente</a></li>\n<li><a href=\"http://editorial-app.appspot.com/workflow/5877028700028928/9eyEep5t6f4\">Texto seleccionado como gist embebido</a></li>\n<li><a href=\"http://editorial-app.appspot.com/workflow/5795046364282880/fc1_oaplErs\">URL seleccionada como tweet embebido</a></li>\n</ul>\n\n<h2>¿Cómo se usan?</h2>\n\n<p>Pues para empezar, hay que escribir todo el post en markdown en un fichero sin extensión cuyo nombre sea el título que va a tener el post. ¿Un poco cutre? Es mi workflow, ¿qué pasa? \nSi se hace de esta forma, el primer workflow creara un fichero octopress a la primera. </p>\n\n<p>El segundo workflow no tiene mucho misterio, inserta el <em>excerp</em> donde le digamos. </p>\n\n<p>El resto transforma esto:</p>\n\n<p>Las rosas son rosas, el cielo es azul y tú eres tú. </p>\n\n<p>puts &quot;Hello, world!&quot;</p>\n\n<p>5467313</p>\n\n<p>https://twitter.com/jmoreno78/statuses/427223495794520064</p>\n\n<p>En esto otro:</p>\n\n<p>{% blockquote Un poeta urbano  %}\nLas rosas son rosas, el cielo es azul y tú eres tú. \n{% endblockquote %}</p>\n\n<p>{% codeblock lang:ruby Hola mundo en COBOL.   %}\nputs &quot;Hello, world!&quot;\n{% endcodeblock %}</p>\n\n<p>{% gist 5467313 %}</p>\n\n<p>{% tweet https://twitter.com/jmoreno78/statuses/427223495794520064 %}</p>\n\n<p>Mola, ¿eh?</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1390694340000,"created_by":1,"updated_at":1390694340000,"updated_by":1,"published_at":1390694340000,"published_by":1},{"id":29,"title":"Jugando a Ser John Gruber","slug":"jugando-a-ser-john-gruber","markdown":"En el fondo, una parte de mi desea ser un guru. Por eso estoy haciendo experimentos con Octopress para poder publicar enlaces al más puro estilo [Marco Arment](http://www.marco.org) o [Daring Fireball](http://daringfireball.net).    \nMi única duda es si usar un signo de infinito, una estrella negra de cinco puntas o un caracter emoji para los permalinks. Creo que ese simbolo debe representar el tipo de contenido que genera el autor. 😜\n\n","html":"<p>En el fondo, una parte de mi desea ser un guru. Por eso estoy haciendo experimentos con Octopress para poder publicar enlaces al más puro estilo <a href=\"http://www.marco.org\">Marco Arment</a> o <a href=\"http://daringfireball.net\">Daring Fireball</a>.<br>\nMi única duda es si usar un signo de infinito, una estrella negra de cinco puntas o un caracter emoji para los permalinks. Creo que ese simbolo debe representar el tipo de contenido que genera el autor. 😜</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1393288200000,"created_by":1,"updated_at":1393288200000,"updated_by":1,"published_at":1393288200000,"published_by":1},{"id":30,"title":"Pow!! Es Poderoso!","slug":"pow-es-poderoso","markdown":"Pow!! es la típica cosa que nunca has necesitado pero que una vez la has probado ya no puedes vivir sin ella. No hay nada malo en escribir http://localhost seguido del puerto por donde sirve tu aplicación pero... ¿a qué sería todo más fácil si pudieras llamar a tus proyectos web también por su nombre en tu máquina local? Pues bien, Pow!! se encarga de eso. \n\n<!--more-->\n\nLa instalación es super sencilla: `$ curl get.pow.cx | sh` en tu terminal y ya esta listo para funcionar. A continuación entras en el directorio de pow con `$ cd ~/.pow` y generas un enlace simbolico a la carpeta donde se encuentra tu aplicación: `$ ln -s /path/to/myapp`. A partir de este momento ya podrás acceder a tu aplicación simplemente escribiendo `http://myapp.dev` en tu navegador.    \n\nFunciona sin problemas con Rails, Sinatra o Padrino. Con Octopress tienes que tener la precaución de regenerar los contenidos cada vez que haces algún cambio pero por lo demás va estupendamente. \n\nEso sí, no te dejes engañar por su aparente sencillez, Pow!! tiene muchisimas opciones que seguro cubrirán tu necesidad.","html":"<p>Pow!! es la típica cosa que nunca has necesitado pero que una vez la has probado ya no puedes vivir sin ella. No hay nada malo en escribir http://localhost seguido del puerto por donde sirve tu aplicación pero... ¿a qué sería todo más fácil si pudieras llamar a tus proyectos web también por su nombre en tu máquina local? Pues bien, Pow!! se encarga de eso. </p>\n\n<!--more-->\n\n<p>La instalación es super sencilla: <code>$ curl get.pow.cx | sh</code> en tu terminal y ya esta listo para funcionar. A continuación entras en el directorio de pow con <code>$ cd ~/.pow</code> y generas un enlace simbolico a la carpeta donde se encuentra tu aplicación: <code>$ ln -s /path/to/myapp</code>. A partir de este momento ya podrás acceder a tu aplicación simplemente escribiendo <code>http://myapp.dev</code> en tu navegador.    </p>\n\n<p>Funciona sin problemas con Rails, Sinatra o Padrino. Con Octopress tienes que tener la precaución de regenerar los contenidos cada vez que haces algún cambio pero por lo demás va estupendamente. </p>\n\n<p>Eso sí, no te dejes engañar por su aparente sencillez, Pow!! tiene muchisimas opciones que seguro cubrirán tu necesidad.</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1393290780000,"created_by":1,"updated_at":1393290780000,"updated_by":1,"published_at":1393290780000,"published_by":1},{"id":31,"title":"Tweets Automáticos Con Octopress","slug":"tweets-automaticos-con-octopress","markdown":"Ultimamente estoy dedicando mi tiempo libre (cada día más escaso) a automatizar ciertas tareas que Octopress, por su naturaleza estática, no permite realizar. En este post explico como acabar con una de mis mayores frustraciones: poner un tweet automáticamente cada vez que publico un artículo usando Karmacracy como acortador.\n\n<!--more-->\n\nA mi me gusta mucho Karmacracy. No es que tenga una especial fijación por controlar el número de clicks que se hacen a los enlaces que comparto pero si se trata de enlaces a este blog me gusta tener un \"pequeño control\" del número de clicks. \n\nHasta ahora lo que hacía era compartir mediante el botón de Karmacracy la entrada que acababa de publicar. Me ha estado funcionando muy bien todo este tiempo pero llevo dandole vueltas a una automatización del proceso de publicación y estar pendiente para darle a un botón no es lo más automático del mundo.\n\nEmpecé a estudiar otras posibilidades como IFTTT que automatizan la publicación de un tweet cuando detectan cambios en un rss. Eso habría estado fantástico si IFTTT permitiera configurar que \"acortador\" quieres usar pero los enlaces compartidos de esta manera ya están acortados por IFTTT... una pena.\n\nFinalmente, después de dar muchas vueltas he decidido tirar por la via dura y crear una tarea en el `rakefile` de Octopress que se encargue de la publicación del tweet. Para no publicar un tweet por cada post cada vez que desplegaba el blog añado a un `hash` cada enlace que se ha publicado.\n\nLa primera versión de esta tarea es la siguiente:\n\n{% codeblock lang:ruby Task para compartir un enlace por Twitter %}\ndesc \"set permalinks, get the short url from karmacracy and share it with Twitter\"\ntask :share_with_twitter do\n  \n  # Twitter config (for tweeting posts)\n  client = Twitter::REST::Client.new do |config|\n    config.consumer_key        = \"TU_CONSUMER_KEY\"\n    config.consumer_secret     = \"TU_CONSUMER_SECRET\"\n    config.access_token        = \"TU_ACCESS_TOKEN\"\n    config.access_token_secret = \"TU_ACCESS_TOKEN_SECRET\"\n  end\n\n  if File.exists? \"#{source_dir}/tweets.info\"\n    File.open(\"#{source_dir}/tweets.info\", 'rb') {|f| @tweets = Marshal::load(f)}\n    puts @tweets\n  else\n    @tweets = []\n  end\n  \n  Dir.glob( \"#{source_dir}/#{posts_dir}/**\" ).each{ |post|\n    \n    tweet_posted = @tweets.detect {|tweet| tweet[\"post\"] == post }\n    \n    if !(tweet_posted)\n\n      #get frontmatter\n      stream = File.open( post )\n      frontmatter = YAML::load( stream )\n      stream.close\n      \n      #get permalink\n      post_time_frontmatter = Date._strptime(frontmatter[\"date\"], '%Y-%m-%d %H:%M')\n      post_time = Date.new(post_time_frontmatter[:year],post_time_frontmatter[:mon],post_time_frontmatter[:mday])\n      post_title = frontmatter[\"title\"]\n      post_link = post.to_s.gsub(/\\d{4}-\\d{2}-\\d{2}-/, \"\").gsub(\".markdown\", \"\").gsub(\"#{source_dir}/#{posts_dir}/\", \"\")\n      permalink = \"#{blog_url}blog/#{post_time.strftime('%Y/%m/%d')}/#{post_title.to_url}/\"\n      \n      #short permalink with karmacracy\n      kcyshorter = \"http://kcy.me/api/?u=TU_USUARIO_DE_KARMACRACY78&key=TU_KEY_DE_KARMACRACY&url=#{CGI.escape(permalink)}\"\n      result = Net::HTTP.get(URI.parse(kcyshorter))\n      \n      # Tweet\n      tweet_response = client.update(\"He escrito \\\"#{post_title}\\\": #{result}\")\n      \n      #\n      tweet = {\"post\" => post, \"title\" => post_title, \"klink\" => result, \"tweet\" => tweet_response[\"uri\"]}\n      @tweets << tweet\n    \n    end\n      \n  }\n  \n  File.open(\"#{source_dir}/tweets.info\", 'wb') {|f| f.write(Marshal.dump(@tweets)) }\n\nend\n{% endcodeblock %}\n\nSi queremos que esta tarea se ejecuta cada vez que desplegamos el blog, lo único que hay que hacer es incluir al final de la tarea `:deploy` lo siguiente:\n\n{% codeblock lang:ruby %}\nRake::Task[:share_with_twitter].execute\n{% endcodeblock %}\n\nY ya está, si todo ha funcionado perfectamente, al publicar esta entrada automáticamente se ha publicado también un tweet. ;-)\n\n","html":"<p>Ultimamente estoy dedicando mi tiempo libre (cada día más escaso) a automatizar ciertas tareas que Octopress, por su naturaleza estática, no permite realizar. En este post explico como acabar con una de mis mayores frustraciones: poner un tweet automáticamente cada vez que publico un artículo usando Karmacracy como acortador.</p>\n\n<!--more-->\n\n<p>A mi me gusta mucho Karmacracy. No es que tenga una especial fijación por controlar el número de clicks que se hacen a los enlaces que comparto pero si se trata de enlaces a este blog me gusta tener un &quot;pequeño control&quot; del número de clicks. </p>\n\n<p>Hasta ahora lo que hacía era compartir mediante el botón de Karmacracy la entrada que acababa de publicar. Me ha estado funcionando muy bien todo este tiempo pero llevo dandole vueltas a una automatización del proceso de publicación y estar pendiente para darle a un botón no es lo más automático del mundo.</p>\n\n<p>Empecé a estudiar otras posibilidades como IFTTT que automatizan la publicación de un tweet cuando detectan cambios en un rss. Eso habría estado fantástico si IFTTT permitiera configurar que &quot;acortador&quot; quieres usar pero los enlaces compartidos de esta manera ya están acortados por IFTTT... una pena.</p>\n\n<p>Finalmente, después de dar muchas vueltas he decidido tirar por la via dura y crear una tarea en el <code>rakefile</code> de Octopress que se encargue de la publicación del tweet. Para no publicar un tweet por cada post cada vez que desplegaba el blog añado a un <code>hash</code> cada enlace que se ha publicado.</p>\n\n<p>La primera versión de esta tarea es la siguiente:</p>\n\n<p>{% codeblock lang:ruby Task para compartir un enlace por Twitter %}\ndesc &quot;set permalinks, get the short url from karmacracy and share it with Twitter&quot;\ntask :share<em>with</em>twitter do</p>\n\n<p># Twitter config (for tweeting posts)\n  client = Twitter::REST::Client.new do |config|\n    config.consumer<em>key        = &quot;TU</em>CONSUMER<em>KEY&quot;\n    config.consumer</em>secret     = &quot;TU<em>CONSUMER</em>SECRET&quot;\n    config.access<em>token        = &quot;TU</em>ACCESS<em>TOKEN&quot;\n    config.access</em>token<em>secret = &quot;TU</em>ACCESS<em>TOKEN</em>SECRET&quot;\n  end</p>\n\n<p>if File.exists? &quot;#{source<em>dir}/tweets.info&quot;\n    File.open(&quot;#{source</em>dir}/tweets.info&quot;, &#39;rb&#39;) {|f| @tweets = Marshal::load(f)}\n    puts @tweets\n  else\n    @tweets = []\n  end</p>\n\n<p>Dir.glob( &quot;#{source<em>dir}/#{posts</em>dir}/**&quot; ).each{ |post|</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">tweet_posted = @tweets.detect {|tweet| tweet[&quot;post&quot;] == post }\n\nif !(tweet_posted)\n\n  #get frontmatter\n  stream = File.open( post )\n  frontmatter = YAML::load( stream )\n  stream.close\n\n  #get permalink\n  post_time_frontmatter = Date._strptime(frontmatter[&quot;date&quot;], &#39;%Y-%m-%d %H:%M&#39;)\n  post_time = Date.new(post_time_frontmatter[:year],post_time_frontmatter[:mon],post_time_frontmatter[:mday])\n  post_title = frontmatter[&quot;title&quot;]\n  post_link = post.to_s.gsub(/\\d{4}-\\d{2}-\\d{2}-/, &quot;&quot;).gsub(&quot;.markdown&quot;, &quot;&quot;).gsub(&quot;#{source_dir}/#{posts_dir}/&quot;, &quot;&quot;)\n  permalink = &quot;#{blog_url}blog/#{post_time.strftime(&#39;%Y/%m/%d&#39;)}/#{post_title.to_url}/&quot;\n\n  #short permalink with karmacracy\n  kcyshorter = &quot;http://kcy.me/api/?u=TU_USUARIO_DE_KARMACRACY78&amp;key=TU_KEY_DE_KARMACRACY&amp;url=#{CGI.escape(permalink)}&quot;\n  result = Net::HTTP.get(URI.parse(kcyshorter))\n\n  # Tweet\n  tweet_response = client.update(&quot;He escrito \\&quot;#{post_title}\\&quot;: #{result}&quot;)\n\n  #\n  tweet = {&quot;post&quot; =&gt; post, &quot;title&quot; =&gt; post_title, &quot;klink&quot; =&gt; result, &quot;tweet&quot; =&gt; tweet_response[&quot;uri&quot;]}\n  @tweets &lt;&lt; tweet\n\nend\n</code></pre></div>\n<p>}</p>\n\n<p>File.open(&quot;#{source_dir}/tweets.info&quot;, &#39;wb&#39;) {|f| f.write(Marshal.dump(@tweets)) }</p>\n\n<p>end\n{% endcodeblock %}</p>\n\n<p>Si queremos que esta tarea se ejecuta cada vez que desplegamos el blog, lo único que hay que hacer es incluir al final de la tarea <code>:deploy</code> lo siguiente:</p>\n\n<p>{% codeblock lang:ruby %}\nRake::Task[:share<em>with</em>twitter].execute\n{% endcodeblock %}</p>\n\n<p>Y ya está, si todo ha funcionado perfectamente, al publicar esta entrada automáticamente se ha publicado también un tweet. ;-)</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1396567260000,"created_by":1,"updated_at":1396567260000,"updated_by":1,"published_at":1396567260000,"published_by":1},{"id":32,"title":"Octoberry Pi","slug":"octoberry-pi","markdown":"Octopress mola pero también tiene sus limitaciones. No es que yo sea un gran comunicador que está publicando artículos continuamente pero a veces he echado de menos no poder publicar algo más rápidamente o a una hora concreta.   \nOctopress es un blog estático que se genera mediante unos scripts desarrollados en Ruby y que usa git para publicar en GitHub Pages, Heroku o sitios similares. Por eso normalmente se necesita un PC/mac.    \nQuizá haya que ser muy friky para preferir hacer todo lo que voy a contar ahora y no usar wordpress pero, como dijo Steve McQueen en Los Siete Magníficos:\n\n{% blockquote %}\nLo nuestro es el plomo.\n{% endblockquote %}\n\nClaro, que un poco más adelante, en la misma película también dijo:\n\n{% blockquote %}\nEn aquel momento parecía una buena idea.\n{% endblockquote %}\n\n<!--more-->\n\nEste año, los Reyes Magos me trajeron una Raspberry Pi. Si ya se que ya no está tan de moda pero después de una conversación con [Jorge Ortiz](http://twitter.com/jdortiz) allá por Octubre me picó el gusanillo de usar este dispositivo para hacer pruebas de configuración de un servidor Rails. Después, pensando en lo poco que consume, que puede estar siempre encendido, que soporta ssh,… pensé que a lo mejor esta era la forma de poder publicar cosas en el blog cuando no estuviera en casa. \n\n## Organización: Borradores y Blog.\n\nSupongo que ya lo sabréis pero Octopress se apoya mucho en git. Inicialmente pensé en tener toda la carpeta del proyecto en Dropbox para que estuviera sincronizado el contenido tanto en la Raspberry, como en el Mac, el iPhone o el iPad. Si esto funcionaba, lo único que tendría que hacer cuando hubiera terminado de escribir algo sería entrar en la RPi y hacer el **deploy** desde allí.    \nNo fue una buena idea, primero porque la RPi no es el más rápido de los dispositivos y segundo porque la carpeta de un proyecto Octopress con la rama **source** tiene un número de ficheros que tiende a infinito y Dropbox es genial excepto cuando tienes un número muy grande de ficheros.    \nEl plan B fue tener una carpeta en Dropbox para los borradores, tener el repositorio del blog sincronizado también con la Raspberry y mover los **borradores** al proyecto cuando fuera a publicar algo.\n\n## Crear una carpeta de borradores en Dropbox. \n\nPrácticamente todos los editores markdown que hay tanto para iPhone, como para iPad como para Mac permiten guardar en Dropbox. En mi caso particular uso iA Writer en el iPhone, Editorial en el iPad y nvAlt, iA Writer o Textmate en el Mac (según me de). En todos estos editores puedo escribir los artículos, en el iPad y en el Mac además puedo hacer la **postprodución** del post, es decir la maquetación y uso de los plugins que aporta Octopress para que las entradas queden más vitaminadas. Además, el tener todo en Dropbox me permite empezar a escribir en el Mac, seguir escribiendo en el iPhone mientras voy en el Metro y terminar de maquetar en el iPad (porque mola mucho usar Editorial).\n\nPara poder usar Dropbox en la Raspberry me basé en [esta entrada](http://raspi.tv/2013/how-to-use-dropbox-with-raspberry-pi). Es importante destacar que Dropbox en la Raspberry todavía no funciona (y no se si algún día funcionará) como funciona en nuestros dispositivos habituales: no hay sincronización. [Dropbox Uploader](https://github.com/andreafabrizi/Dropbox-Uploader) lo que permite es descargar, subir, borrar, crear directorios y demás historias pero la sincronización es algo que, si lo quieres, te lo tienes que currar tu. En mi caso, con la descarga de Dropbox a la Raspberry es suficiente.\n\n## GitHub, Bitbucket y ramas remotas.\n\nAunque este blog está hospedado en GitHub, el repositorio completo (Octopress consta de dos ramas: **master** y **source**) está alojado en Bitbucket. No es que tenga nada que ocultar, simplemente que tengo cosas a medio escribir que no me apetece que se vean hasta que estén terminadas. \nPara poder usar Octopress en la Raspberry Pi si ya tienes el blog en algún repositorio remoto, lo único que hay que hacer es crear una clave ssh en la Raspberry ([en GitHub tienen muy buenos tutoriales de como hacerlo](https://help.github.com/articles/generating-ssh-keys)), vincular esta clave tanto al repositorio de Bitbucket como al de GitHub y disfrutar: ya podemos clonar, hacer pull, hacer push y todas esas cosas que hacen que Octopress mole tanto. Como a todos los efectos es una nueva instalación. Cuando clonamos el proyecto tenemos que hacer el \"bundle install\" y volver a configurar el sistema de despliegue. Con las [instrucciones del sitio de Octopress](http://octopress.org/docs/deploying/) es más que suficiente.\n\n## El proceso de publicación.\n\nCreo que todavía no lo había dicho pero en todo momento he estado accediendo a la Raspberry vía ssh. Si usas git y octopress no deberías tenerle ningún miedo al terminal por lo que acceder vía ssh al dispositivo no será tampoco un problema. Para facilitarme un poco la tarea me he creado una serie de scripts para las situaciones que me puedo encontrar con más frecuencia:\n\n1. Descargar los borradores y previsualizar\n2. Publicar lo que haya en la Raspberry\n3. Descargar los borradores y publicar\n4. Descargar el repositorio y previsualizar\n5. Descargar el repositorio y publicar\n\nEn todos los casos, después de publicar se hace commit en el repositorio y se suben los cambios a los servidores remotos.\n\n{% codeblock lang:bash quickpost.sh %}\n./Dropbox-Uploader/dropbox_uploader.sh download ./drafts/\nmv ./drafts/*.markdown ./blog/source/_posts\nset -e\ncd blog\nrake generate\nrake deploy\ngit add .\ngit commit -m \"Nuevo publicación con quickpost.sh\"\ngit push origin source\n{% endcodeblock %}\n\nEl script anterior descarga los ficheros que estén en la carpeta de *borradores*. A continuación, mueve los ficheros con extensión _markdown_ a la carpeta donde se guardan los artículos en Octopress. Acto seguido genera la nueva versión del blog y lo publica. Para que los cambios sean accesibles desde cualquier lugar hace `commit`en la rama source y la sube al repositorio remoto. Por supuesto, cualquiera de estos pasos puede fallar. Si eso sucede el script se detiene y aquí no ha pasado nada.\n\nEl resto de scripts, giran sobre la misma idea, en algunos casos se detienen en la generación y hacen un preview, en otros casos lo que hacen es hacer un `pulo` al repositorio remoto,…\n\n{% codeblock lang:bash gitpost.sh %}\nset -e\ncd blog\ngit pull origin source\nrake generate\nrake deploy\ngit add .\ngit commit -m \"Nuevo publicación con gitpost.sh”\ngit push origin source\n{% endcodeblock %}\n\n{% codeblock lang:bash quickpreview.sh %}\nset -e\n./Dropbox-Uploader/dropbox_uploader.sh download ./drafts/\nmv ./drafts/*.markdown ./blog/source/_posts\ncd blog\nrake generate\nrake preview\n{% endcodeblock %}\n\n{% codeblock lang:bash quickdeploy.sh %}\nset -e\ncd blog\nrake generate\nrake deploy\ngit add .\ngit commit -m \"Nuevo publicación con quickdeploy.sh\"\ngit push origin source\n{% endcodeblock %}\n\n{% codeblock lang:bash gitpreview.sh %}\nset -e\ncd blog\ngit pull origin source\nrake generate\nrake preview\n{% endcodeblock %}\n\n## Wherever I may roam\n\nY aquí llega el punto por el que decidí montar todo este tinglado: tenemos el repositorio del blog clonado en la Raspberry Pi, hemos creado una serie de scripts para facilitar el proceso de descarga y publicación. Para poder publicar en cualquier momento y allá donde nos encontremos solo nos faltan dos cosas: poder acceder a la Raspberry desde fuera de la red local y tener una aplicación en el iPhone o en el iPad que permitan hacer un ssh.\n\nLo primero lo he resuelto con [no-ip](http://www.noip.com) un servicio gratuito que mediante la instalación de un paquete en la Raspberry y la configuración de una cuenta nos permite acceder a nuestra red como si de un servicio web se tratara. Ya no recuerdo cual es el tutorial que usé yo para configurarlo pero cualquiera que aparece al buscar “no-ip raspberry” en Google valdrá. Es algo extremadamente sencillo.\n\nY para lo segundo, hacía ya bastante tiempo que le había echado el ojo a [Prompt](https://itunes.apple.com/es/app/prompt/id421507115?mt=8) de la gente de [Panic](http://www.panic.com). Quizá sea una aplicación cara (cuesta 7€) pero cumple su cometido a la perfección.\n\n## Conclusión.\n\nPuede parecer una solución muy rebuscada pero cualquiera que se anime a repetir mis pasos encontrará que el proceso es muy sencillo.    \nSobre el exceso de “ingeniería” para publicar el blog, la única disculpa que puedo poner es que Octopress/Jekyll me gusta mucho y quiero que sea mi sistema de blogging durante mucho tiempo. No le hago ascos a otros sistemas como Tumblr (y algún proyecto tengo por ahí que saldrá mediante ese servicio) o Medium (bastante de moda ahora) pero Octopress sigue siendo mi favorito. Además, llevo tiempo pensado en darle un giro al blog y tener una manera de publicar artículos esté donde esté o de forma “programada” mediante `crontab` me daría mucha agilidad.","html":"<p>Octopress mola pero también tiene sus limitaciones. No es que yo sea un gran comunicador que está publicando artículos continuamente pero a veces he echado de menos no poder publicar algo más rápidamente o a una hora concreta.<br>\nOctopress es un blog estático que se genera mediante unos scripts desarrollados en Ruby y que usa git para publicar en GitHub Pages, Heroku o sitios similares. Por eso normalmente se necesita un PC/mac.<br>\nQuizá haya que ser muy friky para preferir hacer todo lo que voy a contar ahora y no usar wordpress pero, como dijo Steve McQueen en Los Siete Magníficos:</p>\n\n<p>{% blockquote %}\nLo nuestro es el plomo.\n{% endblockquote %}</p>\n\n<p>Claro, que un poco más adelante, en la misma película también dijo:</p>\n\n<p>{% blockquote %}\nEn aquel momento parecía una buena idea.\n{% endblockquote %}</p>\n\n<!--more-->\n\n<p>Este año, los Reyes Magos me trajeron una Raspberry Pi. Si ya se que ya no está tan de moda pero después de una conversación con <a href=\"http://twitter.com/jdortiz\">Jorge Ortiz</a> allá por Octubre me picó el gusanillo de usar este dispositivo para hacer pruebas de configuración de un servidor Rails. Después, pensando en lo poco que consume, que puede estar siempre encendido, que soporta ssh,… pensé que a lo mejor esta era la forma de poder publicar cosas en el blog cuando no estuviera en casa. </p>\n\n<h2>Organización: Borradores y Blog.</h2>\n\n<p>Supongo que ya lo sabréis pero Octopress se apoya mucho en git. Inicialmente pensé en tener toda la carpeta del proyecto en Dropbox para que estuviera sincronizado el contenido tanto en la Raspberry, como en el Mac, el iPhone o el iPad. Si esto funcionaba, lo único que tendría que hacer cuando hubiera terminado de escribir algo sería entrar en la RPi y hacer el <strong>deploy</strong> desde allí.<br>\nNo fue una buena idea, primero porque la RPi no es el más rápido de los dispositivos y segundo porque la carpeta de un proyecto Octopress con la rama <strong>source</strong> tiene un número de ficheros que tiende a infinito y Dropbox es genial excepto cuando tienes un número muy grande de ficheros.<br>\nEl plan B fue tener una carpeta en Dropbox para los borradores, tener el repositorio del blog sincronizado también con la Raspberry y mover los <strong>borradores</strong> al proyecto cuando fuera a publicar algo.</p>\n\n<h2>Crear una carpeta de borradores en Dropbox.</h2>\n\n<p>Prácticamente todos los editores markdown que hay tanto para iPhone, como para iPad como para Mac permiten guardar en Dropbox. En mi caso particular uso iA Writer en el iPhone, Editorial en el iPad y nvAlt, iA Writer o Textmate en el Mac (según me de). En todos estos editores puedo escribir los artículos, en el iPad y en el Mac además puedo hacer la <strong>postprodución</strong> del post, es decir la maquetación y uso de los plugins que aporta Octopress para que las entradas queden más vitaminadas. Además, el tener todo en Dropbox me permite empezar a escribir en el Mac, seguir escribiendo en el iPhone mientras voy en el Metro y terminar de maquetar en el iPad (porque mola mucho usar Editorial).</p>\n\n<p>Para poder usar Dropbox en la Raspberry me basé en <a href=\"http://raspi.tv/2013/how-to-use-dropbox-with-raspberry-pi\">esta entrada</a>. Es importante destacar que Dropbox en la Raspberry todavía no funciona (y no se si algún día funcionará) como funciona en nuestros dispositivos habituales: no hay sincronización. <a href=\"https://github.com/andreafabrizi/Dropbox-Uploader\">Dropbox Uploader</a> lo que permite es descargar, subir, borrar, crear directorios y demás historias pero la sincronización es algo que, si lo quieres, te lo tienes que currar tu. En mi caso, con la descarga de Dropbox a la Raspberry es suficiente.</p>\n\n<h2>GitHub, Bitbucket y ramas remotas.</h2>\n\n<p>Aunque este blog está hospedado en GitHub, el repositorio completo (Octopress consta de dos ramas: <strong>master</strong> y <strong>source</strong>) está alojado en Bitbucket. No es que tenga nada que ocultar, simplemente que tengo cosas a medio escribir que no me apetece que se vean hasta que estén terminadas. \nPara poder usar Octopress en la Raspberry Pi si ya tienes el blog en algún repositorio remoto, lo único que hay que hacer es crear una clave ssh en la Raspberry (<a href=\"https://help.github.com/articles/generating-ssh-keys\">en GitHub tienen muy buenos tutoriales de como hacerlo</a>), vincular esta clave tanto al repositorio de Bitbucket como al de GitHub y disfrutar: ya podemos clonar, hacer pull, hacer push y todas esas cosas que hacen que Octopress mole tanto. Como a todos los efectos es una nueva instalación. Cuando clonamos el proyecto tenemos que hacer el &quot;bundle install&quot; y volver a configurar el sistema de despliegue. Con las <a href=\"http://octopress.org/docs/deploying/\">instrucciones del sitio de Octopress</a> es más que suficiente.</p>\n\n<h2>El proceso de publicación.</h2>\n\n<p>Creo que todavía no lo había dicho pero en todo momento he estado accediendo a la Raspberry vía ssh. Si usas git y octopress no deberías tenerle ningún miedo al terminal por lo que acceder vía ssh al dispositivo no será tampoco un problema. Para facilitarme un poco la tarea me he creado una serie de scripts para las situaciones que me puedo encontrar con más frecuencia:</p>\n\n<ol>\n<li>Descargar los borradores y previsualizar</li>\n<li>Publicar lo que haya en la Raspberry</li>\n<li>Descargar los borradores y publicar</li>\n<li>Descargar el repositorio y previsualizar</li>\n<li>Descargar el repositorio y publicar</li>\n</ol>\n\n<p>En todos los casos, después de publicar se hace commit en el repositorio y se suben los cambios a los servidores remotos.</p>\n\n<p>{% codeblock lang:bash quickpost.sh %}\n./Dropbox-Uploader/dropbox<em>uploader.sh download ./drafts/\nmv ./drafts/*.markdown ./blog/source/</em>posts\nset -e\ncd blog\nrake generate\nrake deploy\ngit add .\ngit commit -m &quot;Nuevo publicación con quickpost.sh&quot;\ngit push origin source\n{% endcodeblock %}</p>\n\n<p>El script anterior descarga los ficheros que estén en la carpeta de <em>borradores</em>. A continuación, mueve los ficheros con extensión <em>markdown</em> a la carpeta donde se guardan los artículos en Octopress. Acto seguido genera la nueva versión del blog y lo publica. Para que los cambios sean accesibles desde cualquier lugar hace <code>commit</code>en la rama source y la sube al repositorio remoto. Por supuesto, cualquiera de estos pasos puede fallar. Si eso sucede el script se detiene y aquí no ha pasado nada.</p>\n\n<p>El resto de scripts, giran sobre la misma idea, en algunos casos se detienen en la generación y hacen un preview, en otros casos lo que hacen es hacer un <code>pulo</code> al repositorio remoto,…</p>\n\n<p>{% codeblock lang:bash gitpost.sh %}\nset -e\ncd blog\ngit pull origin source\nrake generate\nrake deploy\ngit add .\ngit commit -m &quot;Nuevo publicación con gitpost.sh”\ngit push origin source\n{% endcodeblock %}</p>\n\n<p>{% codeblock lang:bash quickpreview.sh %}\nset -e\n./Dropbox-Uploader/dropbox<em>uploader.sh download ./drafts/\nmv ./drafts/*.markdown ./blog/source/</em>posts\ncd blog\nrake generate\nrake preview\n{% endcodeblock %}</p>\n\n<p>{% codeblock lang:bash quickdeploy.sh %}\nset -e\ncd blog\nrake generate\nrake deploy\ngit add .\ngit commit -m &quot;Nuevo publicación con quickdeploy.sh&quot;\ngit push origin source\n{% endcodeblock %}</p>\n\n<p>{% codeblock lang:bash gitpreview.sh %}\nset -e\ncd blog\ngit pull origin source\nrake generate\nrake preview\n{% endcodeblock %}</p>\n\n<h2>Wherever I may roam</h2>\n\n<p>Y aquí llega el punto por el que decidí montar todo este tinglado: tenemos el repositorio del blog clonado en la Raspberry Pi, hemos creado una serie de scripts para facilitar el proceso de descarga y publicación. Para poder publicar en cualquier momento y allá donde nos encontremos solo nos faltan dos cosas: poder acceder a la Raspberry desde fuera de la red local y tener una aplicación en el iPhone o en el iPad que permitan hacer un ssh.</p>\n\n<p>Lo primero lo he resuelto con <a href=\"http://www.noip.com\">no-ip</a> un servicio gratuito que mediante la instalación de un paquete en la Raspberry y la configuración de una cuenta nos permite acceder a nuestra red como si de un servicio web se tratara. Ya no recuerdo cual es el tutorial que usé yo para configurarlo pero cualquiera que aparece al buscar “no-ip raspberry” en Google valdrá. Es algo extremadamente sencillo.</p>\n\n<p>Y para lo segundo, hacía ya bastante tiempo que le había echado el ojo a <a href=\"https://itunes.apple.com/es/app/prompt/id421507115?mt=8\">Prompt</a> de la gente de <a href=\"http://www.panic.com\">Panic</a>. Quizá sea una aplicación cara (cuesta 7€) pero cumple su cometido a la perfección.</p>\n\n<h2>Conclusión.</h2>\n\n<p>Puede parecer una solución muy rebuscada pero cualquiera que se anime a repetir mis pasos encontrará que el proceso es muy sencillo.<br>\nSobre el exceso de “ingeniería” para publicar el blog, la única disculpa que puedo poner es que Octopress/Jekyll me gusta mucho y quiero que sea mi sistema de blogging durante mucho tiempo. No le hago ascos a otros sistemas como Tumblr (y algún proyecto tengo por ahí que saldrá mediante ese servicio) o Medium (bastante de moda ahora) pero Octopress sigue siendo mi favorito. Además, llevo tiempo pensado en darle un giro al blog y tener una manera de publicar artículos esté donde esté o de forma “programada” mediante <code>crontab</code> me daría mucha agilidad.</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1396855800000,"created_by":1,"updated_at":1396855800000,"updated_by":1,"published_at":1396855800000,"published_by":1},{"id":33,"title":"Motivación Al Poder","slug":"motivacion-al-poder","markdown":"[![](http://assets.amuniversal.com/69cc4730a085012f2fe600163e41dd5b)](http://dilbert.com/strip/1997-11-05)\n","html":"<p><a href=\"http://dilbert.com/strip/1997-11-05\"><img src=\"http://assets.amuniversal.com/69cc4730a085012f2fe600163e41dd5b\" alt=\"\"></a></p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1416430200000,"created_by":1,"updated_at":1416430200000,"updated_by":1,"published_at":1416430200000,"published_by":1},{"id":34,"title":"Bullet With Butterfly Wings","slug":"bullet-with-butterfly-wings","markdown":"{% blockquote The Smashing Pumpkins - Bullet with butterfly wings %}\nDespite all my rage I'm still just a rat in a cage.\n{% endblockquote %}\n\nSiempre es bueno pararse a pensar que estamos haciendo, como lo estamos haciendo y ver si hay alguna forma de mejorar. En esta época del año, bien sea por las Navidades o porque precisamente se acaba un año y empieza otro, es un momento habitual para hacer uno de estos *puntos de situación*.   \nEn mi caso no ha sido al llegar el final de año. Llevo bastante tiempo dandole vueltas a como me encuentro.\n\n<!--more-->\n\n2014 ha sido un año raro, muy raro y tengo ganas de que acabe. No porque piense que un nuevo año va a hacer que todo mejore o empiece a tener sentido si no porque, esta vez, el cambio de año llega al mismo tiempo que en mi cabeza empiezan a encajar muchas de las piezas sobre las que quiero asentar mi futuro próximo.\n\nA nivel laboral llevo un par de años *trepidantes*. Estoy metido en un proyecto bastante complicado que me absorbe mucho tiempo y que además me deja agotado. Parte de como enfoco las cosas ahora (o como las quiero enfocar) están influidas por este proyecto en el que estoy aprendiendo de todo: lo que se debe hacer, lo que no se debe hacer,  lo que quiero hacer, lo que no quiero hacer, lo que quiero ser, lo que no quiero ser... En muchos aspectos me estoy sorpendiendo a mi mismo ya que he descubierto facetas de mi personalidad que no sabía ni que tenía. Otros aspectos me han causado una gran decepción y tengo claro que he de acabar con ellos. Confio en que la finalización de este proyecto (que debería tener lugar en torno a Semana Santa) vaya unida a la finalización de mis objetivos personales en terreno laboral.\n\n{% blockquote The Smashing Pumpkins - Bullet with butterfly wings %}\nThe world is a vampire,  sent to drain\n{% endblockquote %}\n\nPara recuperar la energía que me *chupan los vampiros* nada mejor que mi familia. En los últimos meses ha sido una gran fuente de inspiración para diseñar esas piezas de las que hablaba al principio. Mi mujer me ha ayudado mucho en lo que ella llama \"madurar\" (aunque a mi me duela esa expresión, se que tiene razón) y mis hijos Entropía (la mayor) y Entalpía (el enano) me ayudan a olvidar las mordeduras con las que llego todos los días a casa.\n\nPoco a poco, durante el 2015, me gustaría ir retomando algunas aficiones que también me hacen sentir bien: escribir más en el blog, volver a aprender a hacer aplicaciones iOS (entre Swift y las últimas versiones del sistema operativo me he quedado más obsoleto que un Samsung Galaxy Ace con Froyo) y seguir aprendiendo a hacer aplicaciones web con frameworks basados en Ruby como Rails, Sinatra o Padrino. Además, no quiero que se me escape el tren de los *wearables* así que tengo que sacar tiempo para hacer cosicas con el Pebble y, si me dejan darme el capricho, con el Apple Watch.\n\nTambién quiero volver a frecuentar la NSCoderMAD. Con todo el ajetreo del último año y pico  no he ido prácticamente a ninguna. Solo he ido a las cenas y aunque es una buena forma de mantener el contacto con toda esa buena gente, las reuniones y las charlas aportan mucho a todos los niveles: personal, profesional, técnico...\n\n{% blockquote The Smashing Pumpkins - Bullet with butterfly wings %}\nAnd I still believe that I cannot be saved\n{% endblockquote %}\n\nY no, en esta última cita ya no estoy de acuerdo con Billy Corgan. Creo que me puedo salvar, tengo muchas ganas de 2015, 2016, 2017,... estoy seguro de que muchas cosas buenas están por pasar y que todo lo que tengo en mente me va a ayudar a que suceda... cuanto antes.\n\n\n*Imagen de cabecera obtenida de [**re**:splashed](http://www.resplashed.com/)*\n","html":"<p>{% blockquote The Smashing Pumpkins - Bullet with butterfly wings %}\nDespite all my rage I&#39;m still just a rat in a cage.\n{% endblockquote %}</p>\n\n<p>Siempre es bueno pararse a pensar que estamos haciendo, como lo estamos haciendo y ver si hay alguna forma de mejorar. En esta época del año, bien sea por las Navidades o porque precisamente se acaba un año y empieza otro, es un momento habitual para hacer uno de estos <em>puntos de situación</em>.<br>\nEn mi caso no ha sido al llegar el final de año. Llevo bastante tiempo dandole vueltas a como me encuentro.</p>\n\n<!--more-->\n\n<p>2014 ha sido un año raro, muy raro y tengo ganas de que acabe. No porque piense que un nuevo año va a hacer que todo mejore o empiece a tener sentido si no porque, esta vez, el cambio de año llega al mismo tiempo que en mi cabeza empiezan a encajar muchas de las piezas sobre las que quiero asentar mi futuro próximo.</p>\n\n<p>A nivel laboral llevo un par de años <em>trepidantes</em>. Estoy metido en un proyecto bastante complicado que me absorbe mucho tiempo y que además me deja agotado. Parte de como enfoco las cosas ahora (o como las quiero enfocar) están influidas por este proyecto en el que estoy aprendiendo de todo: lo que se debe hacer, lo que no se debe hacer,  lo que quiero hacer, lo que no quiero hacer, lo que quiero ser, lo que no quiero ser... En muchos aspectos me estoy sorpendiendo a mi mismo ya que he descubierto facetas de mi personalidad que no sabía ni que tenía. Otros aspectos me han causado una gran decepción y tengo claro que he de acabar con ellos. Confio en que la finalización de este proyecto (que debería tener lugar en torno a Semana Santa) vaya unida a la finalización de mis objetivos personales en terreno laboral.</p>\n\n<p>{% blockquote The Smashing Pumpkins - Bullet with butterfly wings %}\nThe world is a vampire,  sent to drain\n{% endblockquote %}</p>\n\n<p>Para recuperar la energía que me <em>chupan los vampiros</em> nada mejor que mi familia. En los últimos meses ha sido una gran fuente de inspiración para diseñar esas piezas de las que hablaba al principio. Mi mujer me ha ayudado mucho en lo que ella llama &quot;madurar&quot; (aunque a mi me duela esa expresión, se que tiene razón) y mis hijos Entropía (la mayor) y Entalpía (el enano) me ayudan a olvidar las mordeduras con las que llego todos los días a casa.</p>\n\n<p>Poco a poco, durante el 2015, me gustaría ir retomando algunas aficiones que también me hacen sentir bien: escribir más en el blog, volver a aprender a hacer aplicaciones iOS (entre Swift y las últimas versiones del sistema operativo me he quedado más obsoleto que un Samsung Galaxy Ace con Froyo) y seguir aprendiendo a hacer aplicaciones web con frameworks basados en Ruby como Rails, Sinatra o Padrino. Además, no quiero que se me escape el tren de los <em>wearables</em> así que tengo que sacar tiempo para hacer cosicas con el Pebble y, si me dejan darme el capricho, con el Apple Watch.</p>\n\n<p>También quiero volver a frecuentar la NSCoderMAD. Con todo el ajetreo del último año y pico  no he ido prácticamente a ninguna. Solo he ido a las cenas y aunque es una buena forma de mantener el contacto con toda esa buena gente, las reuniones y las charlas aportan mucho a todos los niveles: personal, profesional, técnico...</p>\n\n<p>{% blockquote The Smashing Pumpkins - Bullet with butterfly wings %}\nAnd I still believe that I cannot be saved\n{% endblockquote %}</p>\n\n<p>Y no, en esta última cita ya no estoy de acuerdo con Billy Corgan. Creo que me puedo salvar, tengo muchas ganas de 2015, 2016, 2017,... estoy seguro de que muchas cosas buenas están por pasar y que todo lo que tengo en mente me va a ayudar a que suceda... cuanto antes.</p>\n\n<p><em>Imagen de cabecera obtenida de <a href=\"http://www.resplashed.com/\"><strong>re</strong>:splashed</a></em></p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1419980400000,"created_by":1,"updated_at":1419980400000,"updated_by":1,"published_at":1419980400000,"published_by":1},{"id":35,"title":"Empatía Por El Diablo","slug":"empatía-por-el-diablo","markdown":"{% blockquote The Rolling Stones - Sympathy for the devil    %}\nPlease allow me to introduce myself\nI´m a man of wealth and taste\n{% endblockquote %}\n\nEn nuestro entorno es habitual hacer chistes sobre el usuario... por lo mal que hace los requisitos (cuando los hace), porque no sabe lo que quiere y cambia continuamente de opinión, porque no tiene ni idea de nada mientras que nosotros tenemos claro que es lo que necesita, etc, etc.\nVaya por delante que yo mismo hago este tipo de comentarios *habitualmente* y que discutir con el usuario es parte principal de mi día a día pero eso no quita para que, a veces, sienta *empatía por el ~~diablo~~ usuario*.\n\n<!--more-->\n\nEl año pasado pudimos leer alguna píldora de un usuario que, cansado de buscar desarrolladores en España que entendieran lo que el necesitaba, había encontrado lo que buscaba en Polonia y a un menor coste. Al margen de temas económicos, que también los hay, lo brutal de ese artículo es concluir que es más fácil encontrar a un técnico que entienda lo que quieres aunque no hable tu mismo idioma. \n\nEl lenguaje si que tiene que ver. En un dialogo usuario-técnico, uno de los principales problemas es que uno no sabe expresar en el lenguaje del otro lo que quiere y el otro no sabe expresar en el lenguaje del uno lo que pretende hacer. Esto no es exclusivo del desarrollo de software, ocurre cuando contratas a un albañil para que te haga una reforma, cuando llevas el coche al taller, cuando vas al médico... En esas situaciones tu tratas de expresar lo que quieres, lo que le pasa al coche, lo que te sucede a tí y al otro lado hay, normalmente, una persona que te mira y en cuyos ojos puedes leer: **_este tío no tiene ni puta idea_**.\n\nUna vez superada la barrera del lenguaje, al problema le añadimos nuestro ego porque, no nos engañemos, tenemos mucho ego. Tenemos claro lo que quiere el usuario, al pobre le cuesta expresarse pero como nosotros somos muy buenos hemos entendido su problema. Habitualmente prestamos mucha atención a lo que hacemos, ya que nuestro trabajo requiere un montón de cualidades: dominio de un lenguaje de programación, conocimientos de base datos, usabilidad de aplicaciones,... pero esta vez, como lo que quiere el usuario es tan sencillo y nosotros lo hemos hecho tantas y tantas veces vamos un poco deprisa y... zas... el usuario nos saca fallos, dice que es una mierda, que si no tenemos sentido común, bla, bla, bla...\n\nSi volvemos a los ejemplos anteriores, nos encontramos con el mismo albañil que nos miraba con aire arrogante y al que ahora le tenemos que decir que ha puesto los azulejos del revés, o al mecánico que nos dice que ha cambiado nosecuantas historias y nosotros le decimos que el coche sigue haciendo el mismo ruido por el que lo habíamos llevado al taller, o al médico que nos pregunta si hemos tenido fiebre mientras nos osculta y nosotros le decimos que si, que ya se lo dijimos cuando nos preguntó que nos pasaba... vamos deprisa, no prestamos atención, somos unos sobradetes... y la cagamos.\n\nY con esto no quiero decir que el usuario sea bueno, joder, estoy hablando del diablo, pero también hay que tener en cuenta que el diablo sabe más por viejo, que por ~~usuario~~ diablo. \n","html":"<p>{% blockquote The Rolling Stones - Sympathy for the devil    %}\nPlease allow me to introduce myself\nI´m a man of wealth and taste\n{% endblockquote %}</p>\n\n<p>En nuestro entorno es habitual hacer chistes sobre el usuario... por lo mal que hace los requisitos (cuando los hace), porque no sabe lo que quiere y cambia continuamente de opinión, porque no tiene ni idea de nada mientras que nosotros tenemos claro que es lo que necesita, etc, etc.\nVaya por delante que yo mismo hago este tipo de comentarios <em>habitualmente</em> y que discutir con el usuario es parte principal de mi día a día pero eso no quita para que, a veces, sienta <em>empatía por el <del>diablo</del> usuario</em>.</p>\n\n<!--more-->\n\n<p>El año pasado pudimos leer alguna píldora de un usuario que, cansado de buscar desarrolladores en España que entendieran lo que el necesitaba, había encontrado lo que buscaba en Polonia y a un menor coste. Al margen de temas económicos, que también los hay, lo brutal de ese artículo es concluir que es más fácil encontrar a un técnico que entienda lo que quieres aunque no hable tu mismo idioma. </p>\n\n<p>El lenguaje si que tiene que ver. En un dialogo usuario-técnico, uno de los principales problemas es que uno no sabe expresar en el lenguaje del otro lo que quiere y el otro no sabe expresar en el lenguaje del uno lo que pretende hacer. Esto no es exclusivo del desarrollo de software, ocurre cuando contratas a un albañil para que te haga una reforma, cuando llevas el coche al taller, cuando vas al médico... En esas situaciones tu tratas de expresar lo que quieres, lo que le pasa al coche, lo que te sucede a tí y al otro lado hay, normalmente, una persona que te mira y en cuyos ojos puedes leer: <strong><em>este tío no tiene ni puta idea</em></strong>.</p>\n\n<p>Una vez superada la barrera del lenguaje, al problema le añadimos nuestro ego porque, no nos engañemos, tenemos mucho ego. Tenemos claro lo que quiere el usuario, al pobre le cuesta expresarse pero como nosotros somos muy buenos hemos entendido su problema. Habitualmente prestamos mucha atención a lo que hacemos, ya que nuestro trabajo requiere un montón de cualidades: dominio de un lenguaje de programación, conocimientos de base datos, usabilidad de aplicaciones,... pero esta vez, como lo que quiere el usuario es tan sencillo y nosotros lo hemos hecho tantas y tantas veces vamos un poco deprisa y... zas... el usuario nos saca fallos, dice que es una mierda, que si no tenemos sentido común, bla, bla, bla...</p>\n\n<p>Si volvemos a los ejemplos anteriores, nos encontramos con el mismo albañil que nos miraba con aire arrogante y al que ahora le tenemos que decir que ha puesto los azulejos del revés, o al mecánico que nos dice que ha cambiado nosecuantas historias y nosotros le decimos que el coche sigue haciendo el mismo ruido por el que lo habíamos llevado al taller, o al médico que nos pregunta si hemos tenido fiebre mientras nos osculta y nosotros le decimos que si, que ya se lo dijimos cuando nos preguntó que nos pasaba... vamos deprisa, no prestamos atención, somos unos sobradetes... y la cagamos.</p>\n\n<p>Y con esto no quiero decir que el usuario sea bueno, joder, estoy hablando del diablo, pero también hay que tener en cuenta que el diablo sabe más por viejo, que por <del>usuario</del> diablo. </p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1420395300000,"created_by":1,"updated_at":1420395300000,"updated_by":1,"published_at":1420395300000,"published_by":1},{"id":36,"title":"Octoberry Pi Reloaded","slug":"octoberry-pi-reloaded","markdown":"Desde que escribí [Octoberry Pi]({% post_url 2014-04-07-octoberry-pi %}) tenía pensado hacer algo para no publicar inmediatamente lo que hubiera escrito  y hacerlo a horas menos intempestivas que lo suele ser habitual ya que suelo terminar de escribir de madrugada. La solución pasaba por usar *cron* pero hasta estas navidades no he terminado de dejarlo listo.\n\n<!--more-->\n\nHace poco migré el blog de [Octopress](http://octopress.org/) a la ultima versión de [Jekyll](http://jekyllrb.com/). Principalmente porque, aunque Octopress es sencillo, creo que viene demasiado cargado de plugins, la organización de las carpetas me parece un poco confusa  y además, la versión 3.0 de Octopress no tendrá nada que ver con la actual ya que se transforma en una serie de plugins *avanzados* para Jekyll así que me pareció conveniente adentrarme en la austeridad del framework original. \n\nPese al cambio, el montaje no ha variado mucho del descrito en el articulo arriba mencionado. Lo resumo a continuación por si no queréis leerlo:\n\n1. Carpeta en Dropbox donde están los borradores de los artículos que voy escribiendo y los que están para publicar. Tanto en el iPad como en el iPhone uso [Editorial](http://omz-software.com/editorial/) para escribir, maquetar, buscar enlaces, fotos,... En el MacBook Pro, si edito algún artículo, ahora mismo usaría Textmate 2 que es el que tengo más preparado\n2. Raspberry Pi. No tiene gran cosa instalada: ruby con [rvm](https://rvm.io/), unas cuantas gemas necesarias para publicar este blog y git para subir los cambios en el proyecto tanto al repositorio de Github que permite que leas esto como al repositorio privado de Bitbucket donde está la chicha que no quiero que se vea... ;-)\n\nLa automatización de la publicación la consigo con dos scripts. El primero es una tarea de Rake en el que se  indican todos los pasos para publicar el blog:\n\n{% highlight ruby  %}\ndesc \"Publicación automática\"\ntask :publicar do\n  puts \"\\n## Generación del sitio estático con Octopress\"\n  status = system(\"jekyll build\")\n  puts status ? \"Todo ha ido bien\" : \"Algo ha salido mal\"\n  puts \"\\n## Despliegue del sitio en Github Pages\"\n  status = system(\"octopress deploy\")\n  puts status ? \"Todo ha ido bien\" : \"Algo ha salido mal\"\n  puts \"\\n## Staging modified files\"\n  status = system(\"git add -A\")\n  puts status ? \"Todo ha ido bien\" : \"Algo ha salido mal\"\n  puts \"\\n## Committing a site build at #{Time.now.utc}\"\n  message = \"Build site at #{Time.now.utc}\"\n  status = system(\"git commit -m \\\"#{message}\\\"\")\n  puts status ? \"Todo ha ido bien\" : \"Algo ha salido mal\"\n  puts \"\\n## Pushing commits to remote\"\n  status = system(\"git push origin source\")\n  puts status ? \"Todo ha ido bien\" : \"Algo ha salido mal\"\n  puts \"\\n## Publicando tweet de último post escrito\"\n  Rake::Task[:share_with_twitter].execute\nend\n\n{% endhighlight %}\nLa mezcla de castellano e ingles se debe a que me base en un Rakefile que ya tenía parte de lo que yo necesitaba. En general no me gusta traducir lo que han escrito otros en ingles y no me gusta escribir en ingles lo que, normalmente, solo voy a ver yo. Sois libres de criticarme por esto, no me vais a quitar el sueño.\n\nAunque está clarito lo que hace este script, un poco más de detalle nunca viene mal:\n\n1. Generación del sitio. Jekyll construye un sitio hmtl completo que guarda en la carpeta _site\n2. Despligue en Github. Un nuevo plugin de Octopress 3.0, Octopress Deploy, hace un push de la carpeta _site a la rama master del repositorio de Github vinculado a Github Pages, que es, por así decirlo, mi hosting.\n3. Commit de los cambios realizados. Siempre, después de publicar en Github Pages hago un commit y subo los cambios al repositorio de Bitbucket. Normalmente, lo único que se añade es el nuevo post y las imágenes que pueda incluir pero a veces realizo modificaciones desde la raspberry.\n4. Publico el tweet de *spam*. Cada vez que escribo un nuevo artículo, publico un tweet para que la gente que me sigue se pueda enterar. Este tweet contiene un enlace acortado con [Karmacracy](https://karmacracy.com/) mediante un plugin de cosecha propia. Es de los poquitos plugins que tiene este blog.\n\nEsta tarea no es exclusiva para la raspberry, la uso también en el Mac cuando publico desde allí.\n\nEl script específico de la Raspberry es el que pongo a continuación. Inicialmente hice unos cuantos más pero con esta versión me es suficiente:\n\n{% highlight bash  %}\n#!/usr/bin/env bash\n\nset -e\n./Dropbox-Uploader/dropbox_uploader.sh download /drafts/Blog ./drafts/\nmv ./drafts/Blog/*.markdown ./blog/_posts\ncd blog\n/home/pi/.rvm/gems/ruby-2.1.0/bin/rake publicar\n{% endhighlight %}\n\nOtro script que no es gran cosa:\n\n1. Descarga de la carpeta de Dropbox donde guardo los post a la Raspberry.\n2. Mueve los ficheros con extensión *markdown* a la carpeta del blog donde se almacenan. Mis borradores no tienen extensión *markdown* sino *md*. Igual esto está un poco cogido con pinzas pero a mi me vale.\n3. Cambia al directorio del blog. Ahora que lo veo, creo que esto no sería necesario. Como no he probado otra cosa, lo dejo. Igual más adelante lo actualizo.\n4. Ejecuta la tarea con rake. He probado de muchas maneras, la única que me ha funcionado es la que, de forma unívoca, dice la versión de *rake* que debe usar.\n\nAunque parezca mentira, la automatización ha llevado más tiempo del que podría pensarse. Para empezar no estoy muy familiarizado con el mundo Linux. Tengo una tarea planificada con *cron* en el Mac, la descarga de los informes de iTunes Connect, lo que no me convierte en ningún experto. Además, cualquiera que haya trabajado con Ruby sabrá el dolor de cabeza que suponen las gemas, las versiones de Ruby y todo lo relacionado. Durante varios días me estuve pegando con esto porque, cuando se ejecutaba la tarea con *cron* se produción errores que cuando ejecutaba el script a mano no se daban.\n\nInicialmente, la tarea en cron era así:\n\n{% highlight bash  %}\n30 9 * * * /home/pi/scripts/publicar.sh\n{% endhighlight %}\n\nY lo único que veía eran los típicos mensajes diciendo que la versión de la gema fulanita en Ruby patatín no  encuentran la dependencia de la gema menganita en Ruby patatán... lógico: patatín y patatán no tendrían que mezclarse.     \nDespués de probar muchas cosas, de buscar mucho en Google y de cargarme la imagen de la Raspberry dos veces encontré las palabrás mágicas en la página de rvm, ese ser tan querido y odiado al mismo tiempo. Decían así:\n\n{% highlight bash  %}\nrvm cron setup\n{% endhighlight %}\n\nA partir de ese momento, mi crontab quedó así:\n\n{% highlight bash  %}\n#sm start rvm\nPATH=\"/home/pi/.rvm/gems/ruby-2.1.0/bin:/home/pi/.rvm/gems/ruby-2.1.0@global/bin:/home/pi/.rvm/rubies/ruby-2.1.0/bin:/home/pi/.rvm/gems/ruby-2.\n1.0/bin:/home/pi/.rvm/gems/ruby-2.1.0@global/bin:/home/pi/.rvm/rubies/ruby-2.1.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/b\nin:/usr/local/games:/usr/games:/opt/node/bin:/home/pi/.rvm/bin:/home/pi/.rvm/bin\"\nGEM_HOME='/home/pi/.rvm/gems/ruby-2.1.0'\nGEM_PATH='/home/pi/.rvm/gems/ruby-2.1.0:/home/pi/.rvm/gems/ruby-2.1.0@global'\nMY_RUBY_HOME='/home/pi/.rvm/rubies/ruby-2.1.0'\nIRBRC='/home/pi/.rvm/rubies/ruby-2.1.0/.irbrc'\n#sm end rvm\n30 9 * * * /home/pi/scripts/publicar.sh\n{% endhighlight %}\n\nAl parecer, no es suficiente con tocar los *.profile* y *.bash_profile* para que coger la versión buena con rvm si no que es necesario informar al inicio del *cron* la ruta que tiene que seguir para encontrar la versión correcta. No es lo más bonito del mundo pero desde entonces, a eso de las nueve y media de la mañana, puedes encontrarte artículos recién publicados, como este.\n\n*Imagen de cabecera obtenida de [**re**:splashed](http://www.resplashed.com/)*\n","html":"<p>Desde que escribí <a href=\"%7B%%20post_url%202014-04-07-octoberry-pi%20%%7D\">Octoberry Pi</a> tenía pensado hacer algo para no publicar inmediatamente lo que hubiera escrito  y hacerlo a horas menos intempestivas que lo suele ser habitual ya que suelo terminar de escribir de madrugada. La solución pasaba por usar <em>cron</em> pero hasta estas navidades no he terminado de dejarlo listo.</p>\n\n<!--more-->\n\n<p>Hace poco migré el blog de <a href=\"http://octopress.org/\">Octopress</a> a la ultima versión de <a href=\"http://jekyllrb.com/\">Jekyll</a>. Principalmente porque, aunque Octopress es sencillo, creo que viene demasiado cargado de plugins, la organización de las carpetas me parece un poco confusa  y además, la versión 3.0 de Octopress no tendrá nada que ver con la actual ya que se transforma en una serie de plugins <em>avanzados</em> para Jekyll así que me pareció conveniente adentrarme en la austeridad del framework original. </p>\n\n<p>Pese al cambio, el montaje no ha variado mucho del descrito en el articulo arriba mencionado. Lo resumo a continuación por si no queréis leerlo:</p>\n\n<ol>\n<li>Carpeta en Dropbox donde están los borradores de los artículos que voy escribiendo y los que están para publicar. Tanto en el iPad como en el iPhone uso <a href=\"http://omz-software.com/editorial/\">Editorial</a> para escribir, maquetar, buscar enlaces, fotos,... En el MacBook Pro, si edito algún artículo, ahora mismo usaría Textmate 2 que es el que tengo más preparado</li>\n<li>Raspberry Pi. No tiene gran cosa instalada: ruby con <a href=\"https://rvm.io/\">rvm</a>, unas cuantas gemas necesarias para publicar este blog y git para subir los cambios en el proyecto tanto al repositorio de Github que permite que leas esto como al repositorio privado de Bitbucket donde está la chicha que no quiero que se vea... ;-)</li>\n</ol>\n\n<p>La automatización de la publicación la consigo con dos scripts. El primero es una tarea de Rake en el que se  indican todos los pasos para publicar el blog:</p>\n\n<p>{% highlight ruby  %}\ndesc &quot;Publicación automática&quot;\ntask :publicar do\n  puts &quot;\\n## Generación del sitio estático con Octopress&quot;\n  status = system(&quot;jekyll build&quot;)\n  puts status ? &quot;Todo ha ido bien&quot; : &quot;Algo ha salido mal&quot;\n  puts &quot;\\n## Despliegue del sitio en Github Pages&quot;\n  status = system(&quot;octopress deploy&quot;)\n  puts status ? &quot;Todo ha ido bien&quot; : &quot;Algo ha salido mal&quot;\n  puts &quot;\\n## Staging modified files&quot;\n  status = system(&quot;git add -A&quot;)\n  puts status ? &quot;Todo ha ido bien&quot; : &quot;Algo ha salido mal&quot;\n  puts &quot;\\n## Committing a site build at #{Time.now.utc}&quot;\n  message = &quot;Build site at #{Time.now.utc}&quot;\n  status = system(&quot;git commit -m \\&quot;#{message}\\&quot;&quot;)\n  puts status ? &quot;Todo ha ido bien&quot; : &quot;Algo ha salido mal&quot;\n  puts &quot;\\n## Pushing commits to remote&quot;\n  status = system(&quot;git push origin source&quot;)\n  puts status ? &quot;Todo ha ido bien&quot; : &quot;Algo ha salido mal&quot;\n  puts &quot;\\n## Publicando tweet de último post escrito&quot;\n  Rake::Task[:share<em>with</em>twitter].execute\nend</p>\n\n<p>{% endhighlight %}\nLa mezcla de castellano e ingles se debe a que me base en un Rakefile que ya tenía parte de lo que yo necesitaba. En general no me gusta traducir lo que han escrito otros en ingles y no me gusta escribir en ingles lo que, normalmente, solo voy a ver yo. Sois libres de criticarme por esto, no me vais a quitar el sueño.</p>\n\n<p>Aunque está clarito lo que hace este script, un poco más de detalle nunca viene mal:</p>\n\n<ol>\n<li>Generación del sitio. Jekyll construye un sitio hmtl completo que guarda en la carpeta _site</li>\n<li>Despligue en Github. Un nuevo plugin de Octopress 3.0, Octopress Deploy, hace un push de la carpeta _site a la rama master del repositorio de Github vinculado a Github Pages, que es, por así decirlo, mi hosting.</li>\n<li>Commit de los cambios realizados. Siempre, después de publicar en Github Pages hago un commit y subo los cambios al repositorio de Bitbucket. Normalmente, lo único que se añade es el nuevo post y las imágenes que pueda incluir pero a veces realizo modificaciones desde la raspberry.</li>\n<li>Publico el tweet de <em>spam</em>. Cada vez que escribo un nuevo artículo, publico un tweet para que la gente que me sigue se pueda enterar. Este tweet contiene un enlace acortado con <a href=\"https://karmacracy.com/\">Karmacracy</a> mediante un plugin de cosecha propia. Es de los poquitos plugins que tiene este blog.</li>\n</ol>\n\n<p>Esta tarea no es exclusiva para la raspberry, la uso también en el Mac cuando publico desde allí.</p>\n\n<p>El script específico de la Raspberry es el que pongo a continuación. Inicialmente hice unos cuantos más pero con esta versión me es suficiente:</p>\n\n<p>{% highlight bash  %}</p>\n\n<h1>!/usr/bin/env bash</h1>\n\n<p>set -e\n./Dropbox-Uploader/dropbox<em>uploader.sh download /drafts/Blog ./drafts/\nmv ./drafts/Blog/*.markdown ./blog/</em>posts\ncd blog\n/home/pi/.rvm/gems/ruby-2.1.0/bin/rake publicar\n{% endhighlight %}</p>\n\n<p>Otro script que no es gran cosa:</p>\n\n<ol>\n<li>Descarga de la carpeta de Dropbox donde guardo los post a la Raspberry.</li>\n<li>Mueve los ficheros con extensión <em>markdown</em> a la carpeta del blog donde se almacenan. Mis borradores no tienen extensión <em>markdown</em> sino <em>md</em>. Igual esto está un poco cogido con pinzas pero a mi me vale.</li>\n<li>Cambia al directorio del blog. Ahora que lo veo, creo que esto no sería necesario. Como no he probado otra cosa, lo dejo. Igual más adelante lo actualizo.</li>\n<li>Ejecuta la tarea con rake. He probado de muchas maneras, la única que me ha funcionado es la que, de forma unívoca, dice la versión de <em>rake</em> que debe usar.</li>\n</ol>\n\n<p>Aunque parezca mentira, la automatización ha llevado más tiempo del que podría pensarse. Para empezar no estoy muy familiarizado con el mundo Linux. Tengo una tarea planificada con <em>cron</em> en el Mac, la descarga de los informes de iTunes Connect, lo que no me convierte en ningún experto. Además, cualquiera que haya trabajado con Ruby sabrá el dolor de cabeza que suponen las gemas, las versiones de Ruby y todo lo relacionado. Durante varios días me estuve pegando con esto porque, cuando se ejecutaba la tarea con <em>cron</em> se produción errores que cuando ejecutaba el script a mano no se daban.</p>\n\n<p>Inicialmente, la tarea en cron era así:</p>\n\n<p>{% highlight bash  %}\n30 9 * * * /home/pi/scripts/publicar.sh\n{% endhighlight %}</p>\n\n<p>Y lo único que veía eran los típicos mensajes diciendo que la versión de la gema fulanita en Ruby patatín no  encuentran la dependencia de la gema menganita en Ruby patatán... lógico: patatín y patatán no tendrían que mezclarse.<br>\nDespués de probar muchas cosas, de buscar mucho en Google y de cargarme la imagen de la Raspberry dos veces encontré las palabrás mágicas en la página de rvm, ese ser tan querido y odiado al mismo tiempo. Decían así:</p>\n\n<p>{% highlight bash  %}\nrvm cron setup\n{% endhighlight %}</p>\n\n<p>A partir de ese momento, mi crontab quedó así:</p>\n\n<p>{% highlight bash  %}</p>\n\n<h1>sm start rvm</h1>\n\n<p>PATH=&quot;/home/pi/.rvm/gems/ruby-2.1.0/bin:/home/pi/.rvm/gems/ruby-2.1.0@global/bin:/home/pi/.rvm/rubies/ruby-2.1.0/bin:/home/pi/.rvm/gems/ruby-2.\n1.0/bin:/home/pi/.rvm/gems/ruby-2.1.0@global/bin:/home/pi/.rvm/rubies/ruby-2.1.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/b\nin:/usr/local/games:/usr/games:/opt/node/bin:/home/pi/.rvm/bin:/home/pi/.rvm/bin&quot;\nGEM<em>HOME=&#39;/home/pi/.rvm/gems/ruby-2.1.0&#39;\nGEM</em>PATH=&#39;/home/pi/.rvm/gems/ruby-2.1.0:/home/pi/.rvm/gems/ruby-2.1.0@global&#39;\nMY<em>RUBY</em>HOME=&#39;/home/pi/.rvm/rubies/ruby-2.1.0&#39;\nIRBRC=&#39;/home/pi/.rvm/rubies/ruby-2.1.0/.irbrc&#39;</p>\n\n<h1>sm end rvm</h1>\n\n<p>30 9 * * * /home/pi/scripts/publicar.sh\n{% endhighlight %}</p>\n\n<p>Al parecer, no es suficiente con tocar los <em>.profile</em> y <em>.bash_profile</em> para que coger la versión buena con rvm si no que es necesario informar al inicio del <em>cron</em> la ruta que tiene que seguir para encontrar la versión correcta. No es lo más bonito del mundo pero desde entonces, a eso de las nueve y media de la mañana, puedes encontrarte artículos recién publicados, como este.</p>\n\n<p><em>Imagen de cabecera obtenida de <a href=\"http://www.resplashed.com/\"><strong>re</strong>:splashed</a></em></p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1421019060000,"created_by":1,"updated_at":1421019060000,"updated_by":1,"published_at":1421019060000,"published_by":1},{"id":37,"title":"Pebble, Soporte Técnico","slug":"pebble-soporte-tecnico","markdown":"Aunque ha pasado bastante tiempo, voy a contar mi experiencia con el soporte técnico de Pebble. No se que plazos se estarán manejando ahora pero, desde luego, yo no tuve la mala suerte de [@pepeyebra68](https://twitter.com/pepeyebra68):\n\n{% tweet https://twitter.com/pepeyebra68/statuses/562539995287015424 %}\n\n<!--more-->\n\nDecidí comprarme el Pebble Steel nada más verlo en el CES del 2014. No recuerdo cuando abrieron la lista de espera pero me suena que no tardé mucho en apuntarme. El correo electrónico que recibí con la confirmación de la compra es del 1 de febrero de 2014 a las 14:44. \n\nEl reloj se hizo esperar, en principio el tiempo de espera era de un mes pero al llegar el 28 de Febrero ya decían que podría tardar entre 4 y 8 semanas (es lo que tiene ser un caprichoso). El 27 de Marzo recibí un correo electrónico en el que me confirmaban que ya me habían realizado el envío y que estimaban que para el 7 de Abril lo tendría en casa.\nPara mi sorpresa, el 2 de Abril ya lo había recibido. Como un niño con zapatos nuevos, me lo puse con la intención de no quitármelo jamás. La gran desilusión fue que a las pocas horas empecé a ver que hacía cosas un poco extrañas: la pantalla a veces se quedaba en blanco, otras veces el contenido se desplazaba hacia arriba como la imagen de los televisores en los años ochenta,... vamos que aquello tenía mala pinta.\n\nDespués de hacer numerosos *restores*, apagados y demás pruebas sin ningún tipo de éxito decidí ponerme en contacto con Pebble a través del soporte técnico de la app, que no es más que un mail a support@getpebble.com con todo el log que tiene registrado la propia app. Este mail lo mandé el 8 de Abril  a las 23:48. Al minuto (no exagero, lo recibí a las 23:49) recibí una respuesta automática en la que me decían que en poco tiempo alguien del equipo se pondría en contacto conmigo.\n\nEl 13 de Abril (domingo) a las dos de la mañana recibí un correo de un ser humano de nombre Eyad en el que se lamentaba de que tuviera problemas con el Pebble. Me pidió que le enviará unas fotos con el reloj mostrando el problema y que le contara algunas cosillas:\n\n1. Si el reloj ya funcionaba mal nada más sacarlo de la caja o si se estropeó con el uso. En mi caso fue algo gradual.\n2. Si hubo algún indicador que presagiase que el reloj se iba a estropear. En mi caso, de la noche a la mañana empezó a dar estos fallos, no se producían siempre pero cuando se producían eran muy molestos.\n3. Si los botones respondían correctamente cuando fallaba. En mi caso la respuesta fue afirmativa.\n4. Si la caja llegó con algún daño o incluso si el reloj llegó dañado. En mi caso, esta respuesta fue negativa. Tanto la caja como el reloj estaban en perfecto estado.\n\nPor diferentes motivos que no vienen al caso, hasta el 19 de Abril por la noche (21:24) no respondí al mail. Le envié tres fotos y los comentarios oportunos. El 20 de Abril a las 21:36 recibí una respuesta de Eyad en la que me confirmaba que por los problemas que tenía mi Pebble era candidato a un RMA (Autorización para devolución de mercancía). En otro mail me facilitaban un link donde tendría que volver a introducir algunos datos que ya había introducido, volver a adjuntar las fotos, enviar el número de serie del dispositivo... finalizado ese proceso, con el link que me habían facilitado podría volver a consultar el estado en el que se encontraba el proceso de devolución.\n\nEsa misma noche seguí los pasos que me habían indicado. Durante los siguientes días consultaba la web para ver si había algún avance. En las instrucciones que me pasaron decían que, cuando volvieran a enviarme el reloj, me avisarían por mail. Después de estar dos meses esperando para tenerlo no contaba con que fuesen a tardar poco y menos cuando todos los días el estado en el que se encontraba el RMA era el mismo.\n\nPara mi sorpresa, el 8 de Mayo (día de mi cumpleaños, curiosamente) recibí un paquete. Dentro estaba el Pebble Steel que actualmente llevo en la muñeca. No me mandaron ningún mail para avisarme de que me lo habían vuelto a enviar, pero tampoco me hicieron pagar nada (ni siquiera aranceles de aduana) ni devolver el primer reloj que recibí.\n\nY hasta aquí llega mi experiencia. En total: una semana para responder a mi incidencia. A partir de ese momento, las respuestas no tardaban más de 24 horas desde que yo aportaba más información. En volver a enviarme el reloj tardaron algo menos de tres semanas, en una época en la que el plazo estimado de entrega era de cuatro a ocho semanas si lo comprabas nuevo.\n\nEl nuevo Pebble ya no me ha dado ningún problema. De vez en cuando hace algunos *extraños* (notificaciones que se ven mal) pero en general, funciona perfectamente. \n\n\n\n","html":"<p>Aunque ha pasado bastante tiempo, voy a contar mi experiencia con el soporte técnico de Pebble. No se que plazos se estarán manejando ahora pero, desde luego, yo no tuve la mala suerte de <a href=\"https://twitter.com/pepeyebra68\">@pepeyebra68</a>:</p>\n\n<p>{% tweet https://twitter.com/pepeyebra68/statuses/562539995287015424 %}</p>\n\n<!--more-->\n\n<p>Decidí comprarme el Pebble Steel nada más verlo en el CES del 2014. No recuerdo cuando abrieron la lista de espera pero me suena que no tardé mucho en apuntarme. El correo electrónico que recibí con la confirmación de la compra es del 1 de febrero de 2014 a las 14:44. </p>\n\n<p>El reloj se hizo esperar, en principio el tiempo de espera era de un mes pero al llegar el 28 de Febrero ya decían que podría tardar entre 4 y 8 semanas (es lo que tiene ser un caprichoso). El 27 de Marzo recibí un correo electrónico en el que me confirmaban que ya me habían realizado el envío y que estimaban que para el 7 de Abril lo tendría en casa.\nPara mi sorpresa, el 2 de Abril ya lo había recibido. Como un niño con zapatos nuevos, me lo puse con la intención de no quitármelo jamás. La gran desilusión fue que a las pocas horas empecé a ver que hacía cosas un poco extrañas: la pantalla a veces se quedaba en blanco, otras veces el contenido se desplazaba hacia arriba como la imagen de los televisores en los años ochenta,... vamos que aquello tenía mala pinta.</p>\n\n<p>Después de hacer numerosos <em>restores</em>, apagados y demás pruebas sin ningún tipo de éxito decidí ponerme en contacto con Pebble a través del soporte técnico de la app, que no es más que un mail a support@getpebble.com con todo el log que tiene registrado la propia app. Este mail lo mandé el 8 de Abril  a las 23:48. Al minuto (no exagero, lo recibí a las 23:49) recibí una respuesta automática en la que me decían que en poco tiempo alguien del equipo se pondría en contacto conmigo.</p>\n\n<p>El 13 de Abril (domingo) a las dos de la mañana recibí un correo de un ser humano de nombre Eyad en el que se lamentaba de que tuviera problemas con el Pebble. Me pidió que le enviará unas fotos con el reloj mostrando el problema y que le contara algunas cosillas:</p>\n\n<ol>\n<li>Si el reloj ya funcionaba mal nada más sacarlo de la caja o si se estropeó con el uso. En mi caso fue algo gradual.</li>\n<li>Si hubo algún indicador que presagiase que el reloj se iba a estropear. En mi caso, de la noche a la mañana empezó a dar estos fallos, no se producían siempre pero cuando se producían eran muy molestos.</li>\n<li>Si los botones respondían correctamente cuando fallaba. En mi caso la respuesta fue afirmativa.</li>\n<li>Si la caja llegó con algún daño o incluso si el reloj llegó dañado. En mi caso, esta respuesta fue negativa. Tanto la caja como el reloj estaban en perfecto estado.</li>\n</ol>\n\n<p>Por diferentes motivos que no vienen al caso, hasta el 19 de Abril por la noche (21:24) no respondí al mail. Le envié tres fotos y los comentarios oportunos. El 20 de Abril a las 21:36 recibí una respuesta de Eyad en la que me confirmaba que por los problemas que tenía mi Pebble era candidato a un RMA (Autorización para devolución de mercancía). En otro mail me facilitaban un link donde tendría que volver a introducir algunos datos que ya había introducido, volver a adjuntar las fotos, enviar el número de serie del dispositivo... finalizado ese proceso, con el link que me habían facilitado podría volver a consultar el estado en el que se encontraba el proceso de devolución.</p>\n\n<p>Esa misma noche seguí los pasos que me habían indicado. Durante los siguientes días consultaba la web para ver si había algún avance. En las instrucciones que me pasaron decían que, cuando volvieran a enviarme el reloj, me avisarían por mail. Después de estar dos meses esperando para tenerlo no contaba con que fuesen a tardar poco y menos cuando todos los días el estado en el que se encontraba el RMA era el mismo.</p>\n\n<p>Para mi sorpresa, el 8 de Mayo (día de mi cumpleaños, curiosamente) recibí un paquete. Dentro estaba el Pebble Steel que actualmente llevo en la muñeca. No me mandaron ningún mail para avisarme de que me lo habían vuelto a enviar, pero tampoco me hicieron pagar nada (ni siquiera aranceles de aduana) ni devolver el primer reloj que recibí.</p>\n\n<p>Y hasta aquí llega mi experiencia. En total: una semana para responder a mi incidencia. A partir de ese momento, las respuestas no tardaban más de 24 horas desde que yo aportaba más información. En volver a enviarme el reloj tardaron algo menos de tres semanas, en una época en la que el plazo estimado de entrega era de cuatro a ocho semanas si lo comprabas nuevo.</p>\n\n<p>El nuevo Pebble ya no me ha dado ningún problema. De vez en cuando hace algunos <em>extraños</em> (notificaciones que se ven mal) pero en general, funciona perfectamente. </p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1423005060000,"created_by":1,"updated_at":1423005060000,"updated_by":1,"published_at":1423005060000,"published_by":1},{"id":38,"title":"Cuestiona Permanentemente Tus Fortalezas, Por Kim Faura","slug":"cuestiona-permanentemente-tus-fortalezas,-por-kim-faura","markdown":"No me canso de leer este *caso de estudio*. La pena es que no podamos leer la visión de la otra parte. Sería super interesante ver como vivieron la *\"derrota\"*.\n\n","html":"<p>No me canso de leer este <em>caso de estudio</em>. La pena es que no podamos leer la visión de la otra parte. Sería super interesante ver como vivieron la <em>&quot;derrota&quot;</em>.</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1439221980000,"created_by":1,"updated_at":1439221980000,"updated_by":1,"published_at":1439221980000,"published_by":1},{"id":39,"title":"iBooks O Kindle","slug":"ibooks-o-kindle","markdown":"Últimamente me he estado *pegando* con las aplicaciones de iBooks y Kindle para sincronizar los libros que he comprado fuera de las propias tiendas de Apple y Amazon. Es curioso como cada una adolece de las ventajas de la otra. Es como si se hubieran puesto de acuerdo para que no exista la *aplicación con sincronización perfecta*\n\n<!--more-->\n\nSiempre he tenido predilección por la aplicación de Kindle. Me gustan mas las fuentes que incluye (de hecho este blog usa una fuente gratuita que imita a [Caecilia](https://www.myfonts.com/fonts/linotype/pmn-caecilia/)), tengo la sensación de que el código fuente de los ejemplos se ve mejor y en general funciona bien a la hora de sincronizar marcadores, notas y la posición de lectura. No es difícil subir tus propios libros a Kindle Documents pero, desgraciadamente, no puedes subirlo desde la app. El proceso de subida no es complejo: basta con enviar el archivo .mobi o .az1 por correo electrónico a tu cuenta de kindle y listo pero, en estos tiempos que corren esto me parece un coñazo. Problemas del primer mundo, vaya. \n\nUna vez que el archivo esta en Documents ya lo puedes descargar en la aplicación de iPad, iPhone, Mac, Windows, Android, Fire OS,... y todo va como la seda. Sin embargo, si ese mismo archivo lo has abierto desde la propia App de Kindle por un link o por cualquiera de las formas en las que se pueden abrir archivos en los diferentes dispositivos nunca sincronizara. Verás dos archivos idénticos, el abierto desde local y el descargado de los servidores de Amazon. 😢\n\nLa aplicación de iBooks no ofrece sincronización de libros comprados fuera de la iBook Store pero, por esas cosas de iCloud que nunca sabes si son incidencia o característica mágica, los libros abiertos en diferentes dispositivos sincronizan entre si.  Me explico un poco mejor: un ePub descargado desde Dropbox en un iPhone y abierto con la aplicación de iBooks sincronizara sus notas, marcadores y posición con el mismo ePub descargado desde Dropbox en un iPad y abierto con la aplicación de iBooks si ambos dispositivos comparten cuenta de iCloud. De hecho, no es necesario que en ambos dispositivos se descargue el archivo desde Dropbox, basta con que el fichero tenga el mismo nombre, tamaño, metadatos,... **It just works!**\n\nMi problema en este sentido es que las fuentes en la aplicación de Apple me parecen malas... Parece mentira que con lo que era Steve para la tipografía la aplicación de iBooks sea tan parca en ellas.     \nAdemás, al no haber proceso de sincronización de ficheros desde la app tenemos el mismo problema que con la de Kindle: el archivo esta en un dispositivo pero no puede ser descargado desde otro. Solo funciona la sincronización cuando el mismo archivo esta en los dos dispositivos... Escalofriante. \n\nCon todo esto no he terminado de tomar una decisión. Para algunos libros uso iBooks y para otros uso Kindle. Principalmente si tengo el libro ya en formato Kindle uso Kindle. Si solo lo tengo en ePub uso iBooks aunque ya he dicho que, para mi, la experiencia de lectura no es tan placentera. Estoy pensando en hacer algún script que convierta de ePub a Kindle y envíe un mail a mi cuenta de Amazon para cargar Amazon Documents pero de momento es solo una idea. Tendré que seguir *apañandomelas*. \n","html":"<p>Últimamente me he estado <em>pegando</em> con las aplicaciones de iBooks y Kindle para sincronizar los libros que he comprado fuera de las propias tiendas de Apple y Amazon. Es curioso como cada una adolece de las ventajas de la otra. Es como si se hubieran puesto de acuerdo para que no exista la <em>aplicación con sincronización perfecta</em></p>\n\n<!--more-->\n\n<p>Siempre he tenido predilección por la aplicación de Kindle. Me gustan mas las fuentes que incluye (de hecho este blog usa una fuente gratuita que imita a <a href=\"https://www.myfonts.com/fonts/linotype/pmn-caecilia/\">Caecilia</a>), tengo la sensación de que el código fuente de los ejemplos se ve mejor y en general funciona bien a la hora de sincronizar marcadores, notas y la posición de lectura. No es difícil subir tus propios libros a Kindle Documents pero, desgraciadamente, no puedes subirlo desde la app. El proceso de subida no es complejo: basta con enviar el archivo .mobi o .az1 por correo electrónico a tu cuenta de kindle y listo pero, en estos tiempos que corren esto me parece un coñazo. Problemas del primer mundo, vaya. </p>\n\n<p>Una vez que el archivo esta en Documents ya lo puedes descargar en la aplicación de iPad, iPhone, Mac, Windows, Android, Fire OS,... y todo va como la seda. Sin embargo, si ese mismo archivo lo has abierto desde la propia App de Kindle por un link o por cualquiera de las formas en las que se pueden abrir archivos en los diferentes dispositivos nunca sincronizara. Verás dos archivos idénticos, el abierto desde local y el descargado de los servidores de Amazon. 😢</p>\n\n<p>La aplicación de iBooks no ofrece sincronización de libros comprados fuera de la iBook Store pero, por esas cosas de iCloud que nunca sabes si son incidencia o característica mágica, los libros abiertos en diferentes dispositivos sincronizan entre si.  Me explico un poco mejor: un ePub descargado desde Dropbox en un iPhone y abierto con la aplicación de iBooks sincronizara sus notas, marcadores y posición con el mismo ePub descargado desde Dropbox en un iPad y abierto con la aplicación de iBooks si ambos dispositivos comparten cuenta de iCloud. De hecho, no es necesario que en ambos dispositivos se descargue el archivo desde Dropbox, basta con que el fichero tenga el mismo nombre, tamaño, metadatos,... <strong>It just works!</strong></p>\n\n<p>Mi problema en este sentido es que las fuentes en la aplicación de Apple me parecen malas... Parece mentira que con lo que era Steve para la tipografía la aplicación de iBooks sea tan parca en ellas.<br>\nAdemás, al no haber proceso de sincronización de ficheros desde la app tenemos el mismo problema que con la de Kindle: el archivo esta en un dispositivo pero no puede ser descargado desde otro. Solo funciona la sincronización cuando el mismo archivo esta en los dos dispositivos... Escalofriante. </p>\n\n<p>Con todo esto no he terminado de tomar una decisión. Para algunos libros uso iBooks y para otros uso Kindle. Principalmente si tengo el libro ya en formato Kindle uso Kindle. Si solo lo tengo en ePub uso iBooks aunque ya he dicho que, para mi, la experiencia de lectura no es tan placentera. Estoy pensando en hacer algún script que convierta de ePub a Kindle y envíe un mail a mi cuenta de Amazon para cargar Amazon Documents pero de momento es solo una idea. Tendré que seguir <em>apañandomelas</em>. </p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1440972300000,"created_by":1,"updated_at":1440972300000,"updated_by":1,"published_at":1440972300000,"published_by":1}],"tags":[{"id":0,"name":"reveal.js","slug":"reveal.js","description":""},{"id":1,"name":"node.js","slug":"node.js","description":""},{"id":2,"name":"heroku","slug":"heroku","description":""},{"id":3,"name":"helios","slug":"helios","description":""},{"id":4,"name":"in-app purchases","slug":"in-app purchases","description":""},{"id":5,"name":"cargobay","slug":"cargobay","description":""},{"id":6,"name":"ios","slug":"ios","description":""},{"id":7,"name":"apn","slug":"apn","description":""},{"id":8,"name":"reflexiones","slug":"reflexiones","description":""},{"id":9,"name":"icloud","slug":"icloud","description":""},{"id":10,"name":"ruby on rails","slug":"ruby on rails","description":""},{"id":11,"name":"urlhunter","slug":"urlhunter","description":""},{"id":12,"name":"octopress","slug":"octopress","description":""},{"id":13,"name":"plugins","slug":"plugins","description":""},{"id":14,"name":"macnitas","slug":"macnitas","description":""},{"id":15,"name":"nscoder_mad","slug":"nscoder_mad","description":""},{"id":16,"name":"presentaciones","slug":"presentaciones","description":""},{"id":17,"name":"nsjsonserialization","slug":"nsjsonserialization","description":""},{"id":18,"name":"nsurlconnection","slug":"nsurlconnection","description":""},{"id":19,"name":"restapi","slug":"restapi","description":""},{"id":20,"name":"ciball","slug":"ciball","description":""},{"id":21,"name":"collection operators","slug":"collection operators","description":""},{"id":22,"name":"core data","slug":"core data","description":""},{"id":23,"name":"group by","slug":"group by","description":""},{"id":24,"name":"kvc","slug":"kvc","description":""},{"id":25,"name":"fetchrequest","slug":"fetchrequest","description":""},{"id":26,"name":"nscompoundpredicate","slug":"nscompoundpredicate","description":""},{"id":27,"name":"apple developer","slug":"apple developer","description":""},{"id":28,"name":"itunes connect","slug":"itunes connect","description":""},{"id":29,"name":"sales","slug":"sales","description":""},{"id":30,"name":"batiburrillo","slug":"batiburrillo","description":""},{"id":31,"name":"citas","slug":"citas","description":""}],"posts_tags":[{"id":1,"post_id":0,"tag_id":31},{"id":2,"post_id":0,"tag_id":30},{"id":3,"post_id":1,"tag_id":30},{"id":4,"post_id":2,"tag_id":27},{"id":5,"post_id":2,"tag_id":28},{"id":6,"post_id":2,"tag_id":29},{"id":7,"post_id":3,"tag_id":6},{"id":8,"post_id":3,"tag_id":22},{"id":9,"post_id":3,"tag_id":25},{"id":10,"post_id":3,"tag_id":26},{"id":11,"post_id":4,"tag_id":6},{"id":12,"post_id":4,"tag_id":21},{"id":13,"post_id":4,"tag_id":22},{"id":14,"post_id":4,"tag_id":23},{"id":15,"post_id":4,"tag_id":24},{"id":16,"post_id":5,"tag_id":20},{"id":17,"post_id":5,"tag_id":6},{"id":18,"post_id":5,"tag_id":16},{"id":19,"post_id":5,"tag_id":15},{"id":20,"post_id":5,"tag_id":10},{"id":21,"post_id":6,"tag_id":10},{"id":22,"post_id":7,"tag_id":6},{"id":23,"post_id":7,"tag_id":15},{"id":24,"post_id":7,"tag_id":17},{"id":25,"post_id":7,"tag_id":18},{"id":26,"post_id":7,"tag_id":19},{"id":27,"post_id":10,"tag_id":15},{"id":28,"post_id":10,"tag_id":16},{"id":29,"post_id":11,"tag_id":14},{"id":30,"post_id":14,"tag_id":10},{"id":31,"post_id":14,"tag_id":11},{"id":32,"post_id":15,"tag_id":10},{"id":33,"post_id":15,"tag_id":11},{"id":34,"post_id":16,"tag_id":12},{"id":35,"post_id":16,"tag_id":13},{"id":36,"post_id":17,"tag_id":10},{"id":37,"post_id":17,"tag_id":11},{"id":38,"post_id":19,"tag_id":8},{"id":39,"post_id":19,"tag_id":2},{"id":40,"post_id":19,"tag_id":9},{"id":41,"post_id":20,"tag_id":3},{"id":42,"post_id":20,"tag_id":6},{"id":43,"post_id":21,"tag_id":3},{"id":44,"post_id":21,"tag_id":6},{"id":45,"post_id":21,"tag_id":7},{"id":46,"post_id":24,"tag_id":3},{"id":47,"post_id":24,"tag_id":4},{"id":48,"post_id":24,"tag_id":5},{"id":49,"post_id":26,"tag_id":0},{"id":50,"post_id":26,"tag_id":1},{"id":51,"post_id":26,"tag_id":2}]}}