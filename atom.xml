<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Javi Moreno]]></title>
  <link href="http://javimoreno.me/atom.xml" rel="self"/>
  <link href="http://javimoreno.me/"/>
  <updated>2014-03-02T02:46:30+00:00</updated>
  <id>http://javimoreno.me/</id>
  <author>
    <name><![CDATA[Javi Moreno]]></name>
    <email><![CDATA[javi@javimoreno.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
	<entry>
	  
		<title type="html"><![CDATA[Pow!! es poderoso! &rArr;]]></title>
		<link href="http://pow.cx"/>
		
	  <updated>2014-02-25T02:13:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2014/02/25/pow-es-poderoso</id>
	  
	  <content type="html"><![CDATA[<p>Pow!! es la típica cosa que nunca has necesitado pero que una vez la has probado ya no puedes vivir sin ella. No hay nada malo en escribir http://localhost seguido del puerto por donde sirve tu aplicación pero&#8230; ¿a qué sería todo más fácil si pudieras llamar a tus proyectos web también por su nombre en tu máquina local? Pues bien, Pow!! se encarga de eso.</p>

<!--more-->


<p>La instalación es super sencilla: <code>$ curl get.pow.cx | sh</code> en tu terminal y ya esta listo para funcionar. A continuación entras en el directorio de pow con <code>$ cd ~/.pow</code> y generas un enlace simbolico a la carpeta donde se encuentra tu aplicación: <code>$ ln -s /path/to/myapp</code>. A partir de este momento ya podrás acceder a tu aplicación simplemente escribiendo <code>http://myapp.dev</code> en tu navegador.</p>

<p>Funciona sin problemas con Rails, Sinatra o Padrino. Con Octopress tienes que tener la precaución de regenerar los contenidos cada vez que haces algún cambio pero por lo demás va estupendamente.</p>

<p>Eso sí, no te dejes engañar por su aparente sencillez, Pow!! tiene muchisimas opciones que seguro cubrirán tu necesidad.</p>
<a rel="full-article" href="http://javimoreno.me/blog/2014/02/25/pow-es-poderoso/">Permalink</a>]]></content>
		
	</entry>
  
	<entry>
	  
		<title type="html"><![CDATA[Jugando a ser John Gruber &rArr;]]></title>
		<link href="http://octopress.org/docs/blogging/linklog/"/>
		
	  <updated>2014-02-25T01:30:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2014/02/25/prueba-post-linklog</id>
	  
	  <content type="html"><![CDATA[<p>En el fondo, una parte de mi desea ser un guru. Por eso estoy haciendo experimentos con Octopress para poder publicar enlaces al más puro estilo <a href="http://www.marco.org">Marco Arment</a> o <a href="http://daringfireball.net">Daring Fireball</a>.  <br/>
Mi única duda es si usar un signo de infinito, una estrella negra de cinco puntas o un caracter emoji para los permalinks. Creo que ese simbolo debe representar el tipo de contenido que genera el autor. 😜</p>
<a rel="full-article" href="http://javimoreno.me/blog/2014/02/25/prueba-post-linklog/">Permalink</a>]]></content>
		
	</entry>
  
	<entry>
	  
		<title type="html"><![CDATA[Workflows de Editorial para Octopress]]></title>
		<link href="http://javimoreno.me/blog/2014/01/26/workflows-de-editorial-para-octopress/"/>
		
	  <updated>2014-01-26T00:59:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2014/01/26/workflows-de-editorial-para-octopress</id>
	  
	  <content type="html"><![CDATA[<p>He estado creando una serie de workflows en <a href="https://itunes.apple.com/es/app/editorial/id673907758?mt=8">Editorial</a> que creo serán de gran ayuda a todos los que usen esta fantástica herramienta de edición para iPad al escribir las entradas de su blog Octopress.</p>

<!--more-->


<p>Aunque Octopress se basta y se sobra con textos en markdown, tiene una serie de plugins muy potentes que son de gran ayuda para insertar citas, vídeos, imágenes, tweets embebidos o código fuente.  <br/>
Yo me he centrado en lo que me hacían falta para los <em>posts</em> que suelo escribir pero como podréis ver, una vez hecho el primero, el resto son sota, caballo y rey.</p>

<p>Os dejo los enlaces por sí les queréis echar un ojo.</p>

<ul>
<li><a href="http://editorial-app.appspot.com/workflow/5252485694357504/5M7iTYKP5ak">Creacion de fichero <em>octopress</em> a partir de fichero <em>markdown</em></a></li>
<li><a href="http://editorial-app.appspot.com/workflow/5309436960702464/jobUl19TzXk">Marca de continuación. (&#8220;Seguir leyendo&#8221;)</a></li>
<li><a href="http://editorial-app.appspot.com/workflow/6341637861015552/zFyzbnTW9QY">Texto seleccionado como cita</a></li>
<li><a href="http://editorial-app.appspot.com/workflow/5269098627858432/7jGKDINoyJQ">Texto seleccionado como código fuente</a></li>
<li><a href="http://editorial-app.appspot.com/workflow/5877028700028928/9eyEep5t6f4">Texto seleccionado como gist embebido</a></li>
<li><a href="http://editorial-app.appspot.com/workflow/5795046364282880/fc1_oaplErs">URL seleccionada como tweet embebido</a></li>
</ul>


<h2>¿Cómo se usan?</h2>

<p>Pues para empezar, hay que escribir todo el post en markdown en un fichero sin extensión cuyo nombre sea el título que va a tener el post. ¿Un poco cutre? Es mi workflow, ¿qué pasa?
Si se hace de esta forma, el primer workflow creara un fichero octopress a la primera.</p>

<p>El segundo workflow no tiene mucho misterio, inserta el <em>excerp</em> donde le digamos.</p>

<p>El resto transforma esto:</p>

<p>Las rosas son rosas, el cielo es azul y tú eres tú.</p>

<p>puts &#8220;Hello, world!&#8221;</p>

<p>5467313</p>

<p>https://twitter.com/jmoreno78/statuses/427223495794520064</p>

<p>En esto otro:</p>

<blockquote><p>Las rosas son rosas, el cielo es azul y tú eres tú.</p><footer><strong>Un poeta urbano</strong></footer></blockquote>




<figure class='code'><figcaption><span>Hola mundo en COBOL.   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Hello, world!&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<div><script src='https://gist.github.com/5467313.js'></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/5467313&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>




<div class='embed tweet'><blockquote class="twitter-tweet"><p>Después de llevar un tiempo en el dique seco, creo que la semana que viene voy a publicar bastantes posts. Delirios todo, por supuesto. 😄</p>&mdash; Javi Moreno (@jmoreno78) <a href="https://twitter.com/jmoreno78/statuses/427223495794520064">January 25, 2014</a></blockquote>
<script async src="http://javimoreno.me//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>Mola, ¿eh?</p>
]]></content>
		
	</entry>
  
	<entry>
	  
		<title type="html"><![CDATA[Padrinos y vacunas]]></title>
		<link href="http://javimoreno.me/blog/2013/11/11/padrinos-y-vacunas/"/>
		
	  <updated>2013-11-11T01:31:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2013/11/11/padrinos-y-vacunas</id>
	  
	  <content type="html"><![CDATA[<blockquote><p>Le haré una oferta que no podrá rechazar.</p><footer><strong>Vito Corleone</strong> <cite>El Padrino</cite></footer></blockquote>


<p>En la misma película de la que he sacado esta cita se dice que los italianos piensan que el mundo es tan duro que hay que tener dos padres y por eso todos tienen un padrino. Quizá esto es lo que pensaron los desarrolladores del nuevo framework del que me he hecho fan, Padrino, por que el nombre le viene que ni pintado.</p>

<!--more-->


<p>Creo que mi búsqueda del backend perfecto empieza a ser preocupante y enfermiza. Vaya por delante que lo que yo busco es algo que me sirva para aplicaciones móviles, que pueda tener una pequeña interfaz web y que me deje ver la base de datos, que a mi me gusta mucho el SQL, para que nos vamos a engañar.</p>

<p>Ruby on Rails siempre me ha parecido una buena opción ya que es relativamente sencillo y con pocos pasos puedes tener mucho del desarrollo hecho. Si a eso le añades la versatilidad que tiene para mostrar los datos en HTML, XML o json tienes un gran complemento para dispositivos móviles. Sin embargo reconozco que para devolver un pequeño json no es necesario montar el pifostio que se monta con Rails.</p>

<p>En el otro extremo está Sinatra. Es sencillo, mucho más orientado a montar API&#8217;s pero también te permite crear interfaces. La principal ventaja es que reduce a la mínima expresión lo que hay que escribir para que un servicio funcione. Sin embargo, puede llegar un momento en el que te canses de tanta sencillez y manualidad.</p>

<p>Padrino está justo en el medio de Rails y Sinatra. Esta construido sobre Sinatra pero incorpora utilidades que hacen más eficiente el desarrollo. Sólo una curiosidad, este post hacia bastante tiempo que pensaba escribirlo. Incialmente iba a hacerlo en Rails (hace año y pico), luego pensé en hacerlo en Sinatra (hace meses). Descubrí Padrino la semana pasada y aquí esta terminado. De la noche a la mañana he encontrado el framework que mejor se adapta a mis necesidades particulares.</p>

<p>Bueno, después del coñazo que he soltado vamos a ver si hacemos algo más interesante como, por ejemplo, resolver uno de los problemas más graves de la paternidad: saber que vacuna le toca a tu hijo/a en la próxima revisión.</p>

<h2>Calendario de vacunaciones.</h2>

<p>Por sí no lo sabéis, el calendario de vacunación infantil se basa en recomendaciones de la OMS que el Ministerio de Sanidad en colaboración con la Asociación Nacional de Pediatría estudia y presenta para que, posteriormente, las consejerías de sanidad de cada comunidad autónoma organicen como les de la gana. Esto hace que en España haya 19 calendarios diferentes que, además, suelen cambiar cada tres cuatro años.</p>

<p>El objetivo de nuestra aplicación web será devolver un json con los 19 calendarios actualizados. Para ellos, nuestra aplicación necesitará de un panel de administración con el que actualizáremos las cinco tablas que forman el modelo de datos.</p>

<p><img src="http://javimoreno.me/images/photos/2013/diagram.png"></p>

<p>No voy a entrar en muchos detalles sobre el modelo. La primera tabla es la de países, inicialmente solo esta España pero creo que el modelo es extensible a cualquier país. Un país puede tener varios calendarios&#8230; como en España, que es una locura. Cada calendario tendrá una serie de eventos y cada evento tendrá, entre otros datos, una edad, una vacuna. Edades y Vacunas también son entidades del modelo de datos.</p>

<h3>Creación del proyecto</h3>

<p>Siguiendo la estela de Rails, Padrino tiene generadores que nos vendrán muy bien en diferentes fases del desarrollo. El primero que utilizaremos es el que permite crear el proyecto.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>padrino g project VacScheduler -t shoulda -e haml -c sass -s jquery -d activerecord -b
</span></code></pre></td></tr></table></div></figure>


<p>La mejor forma de saber que significan todos estos términos es mirar la <a href="http://www.padrinorb.com/guides/generators">documentación de Padrino sobre los generadores</a>. Yo he puesto todo esto, no porque sea un listillo, sino porque para hacer está aplicación me he fusilado el <a href="http://www.padrinorb.com/guides/blog-tutorial">tutorial sobre como hacer un blog</a>.  <br/>
Basicamente, hemos creado un proyecto llamado VacScheduler que usa shoulda para el testing, haml para el renderizado de las páginas, sass para los estilos, jquery para la parte de scripting y activerecord para el orm. Además, cuando termine la creación del proyecto, forzaremos una instalación de las gemas que nos faltan con Bundle.</p>

<h3>Creación del panel de administración (esto hará las delicias de más de uno)</h3>

<p>Una gran diferencia con respecto a Rails es que, en Padrino han pensado que la existencia de un grupo de usuarios encargados de mantener las tablas que forman el modelo de la aplicación es un escenario lo suficientemente habitual como para crear una funcionalidad de Administración. A nosotros esto nos viene genial porque lo que queremos es tener una aplicación que devuelva una versión actualizada de los diferentes calendarios de vacunación y para actualizar esos datos tendremos a un usuario responsable de dicho mantenimiento. Las instrucciones para crear el panel de administración son las siguientes:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>padrino g admin --theme warehouse
</span><span class='line'><span class="nv">$ </span>bundle install
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>padrino rake ar:create
</span><span class='line'><span class="nv">$ </span>padrino rake ar:migrate
</span><span class='line'><span class="nv">$ </span>padrino rake seed
</span></code></pre></td></tr></table></div></figure>


<p>Este último paso nos pedirá un correo electrónico y una contraseña para poder acceder al panel de administración. Si después de hacer esto, arrancamos la aplicación podremos ver el bonito panel de administración.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>padrino start
</span></code></pre></td></tr></table></div></figure>


<h3>Creación de los modelos</h3>

<p>Si estuviéramos en Rails, generaríamos un scaffold. Padrino no tiene scaffold&#8230; o si? igual nos llevamos una sorpresa más adelante.  <br/>
De momento vamos a crear los modelos de las cinco tablas que forman nuestro modelo de datos.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>padrino g model age short_name:string name:string months:integer -a app
</span><span class='line'><span class="nv">$ </span>padrino g model calendar name:string country_id:integer -a app
</span><span class='line'><span class="nv">$ </span>padrino g model country name:string -a app
</span><span class='line'><span class="nv">$ </span>padrino g model event notes:text calendar_id:integer age_id:integer vaccine_id:integer -a app
</span><span class='line'><span class="nv">$ </span>padrino g model vaccine short_name:string name:string description:text link_info:string -a app
</span></code></pre></td></tr></table></div></figure>


<p>y hacemos la migración correspondiente para crear las entidades en la base de datos:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>padrino rake ar:migrate
</span></code></pre></td></tr></table></div></figure>


<h3>Modificación de los modelos para incluir las relaciones y validaciones</h3>

<p>Sobre los modelos que nos ha creado Padrino, hacemos las modificaciones oportunas para indicar las relaciones entre las entidades así como los campos que son obligatorios:</p>

<figure class='code'><figcaption><span>Age.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Age</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:events</span>
</span><span class='line'>    <span class="n">validates_presence_of</span> <span class="ss">:short_name</span>
</span><span class='line'>    <span class="n">validates_presence_of</span> <span class="ss">:name</span>
</span><span class='line'>    <span class="n">validates_presence_of</span> <span class="ss">:months</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Calendar.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Calendar</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:events</span>
</span><span class='line'>    <span class="n">belongs_to</span> <span class="ss">:country</span>
</span><span class='line'>    <span class="n">validates_presence_of</span> <span class="ss">:name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Country.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Country</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:calendars</span>
</span><span class='line'>    <span class="n">validates_presence_of</span> <span class="ss">:name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Event.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Event</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>    <span class="n">belongs_to</span> <span class="ss">:calendar</span>
</span><span class='line'>    <span class="n">belongs_to</span> <span class="ss">:age</span>
</span><span class='line'>    <span class="n">belongs_to</span> <span class="ss">:vaccine</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Vaccine.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Vaccine</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:events</span>
</span><span class='line'>    <span class="n">validates_presence_of</span> <span class="ss">:short_name</span>
</span><span class='line'>    <span class="n">validates_presence_of</span> <span class="ss">:name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Creación de los paneles de administración de cada uno de los modelos anteriores</h3>

<p>Esto es lo que me ha ganado de Padrino. Las admin_page son unas pantallas de mantenimiento de datos semejantes a las creadas al hacer un scaffold de Rails pero vinculadas al panel de administración. Es decir, que solo serán visibles si estás autenticado en el sistema. Parece una chorrada, pero para hacer esto en Rails hay que picar un poquito.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>padrino g admin_page age
</span><span class='line'><span class="nv">$ </span>padrino g admin_page calendar
</span><span class='line'><span class="nv">$ </span>padrino g admin_page country
</span><span class='line'><span class="nv">$ </span>padrino g admin_page event
</span><span class='line'><span class="nv">$ </span>padrino g admin_page vaccine
</span></code></pre></td></tr></table></div></figure>


<p>Cuando refresquemos, veremos algo tan bonito como esto:</p>

<p><img src="http://javimoreno.me/images/photos/2013/padrino-admin-1.png"></p>

<p><img src="http://javimoreno.me/images/photos/2013/padrino-admin-2.png"></p>

<p><img src="http://javimoreno.me/images/photos/2013/padrino-admin-3.png"></p>

<h3>Un JSON con todos los calendarios.</h3>

<p>El objetivo de la aplicación es enviar un JSON con la versión más actual de todos y cada uno de los calendarios para que una aplicación móvil refresque su base de datos y pueda informar a sus usuarios de cuales son las próximas vacunas que tienen que poner a sus criaturas. <br/>
Ahora es cuando nos aprovechamos de que Padrino está montado sobre Sinatra y escribimos el siguiente trozo de código en app.rb:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s2">&quot;/&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Country</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">to_json</span><span class="p">(</span><span class="ss">:include</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:calendars</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                            <span class="ss">:include</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:events</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                                <span class="ss">:include</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>                                    <span class="p">{</span> <span class="ss">:vaccine</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:short_name</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:link_info</span><span class="o">]</span><span class="p">}},</span>
</span><span class='line'>                                    <span class="p">{</span> <span class="ss">:age</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:months</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:short_name</span><span class="o">]</span><span class="p">}}</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                                <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="ss">:notes</span><span class="p">}},</span>
</span><span class='line'>                            <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="o">]</span> <span class="p">}},</span>
</span><span class='line'>                        <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Y listo, con este <em>sencillo</em> fragmento de código toda la funcionalidad <em>publica</em> de nuestra aplicación web está construida. Ya podemos llamar desde la aplicación.</p>

<p>Si queréis echar un vistazo, en Heroku (como no) está instalada está misma aplicación: <a href="http://vacscheduler.herokuapp.com">VacScheduler</a>. He tenido algunos problemitas con la codificación en la base de datos así que, si no lo he arreglado antes, veréis algunos <em>código extraños</em> donde debería haber tildes.</p>

<p>El código fuente de dicha aplicación lo podéis ver en <a href="https://github.com/jmoreno/VacScheduler">GitHub</a>.</p>
]]></content>
		
	</entry>
  
	<entry>
	  
		<title type="html"><![CDATA[Adios Keynote, hola reveal.js]]></title>
		<link href="http://javimoreno.me/blog/2013/10/05/adios-keynote/"/>
		
	  <updated>2013-10-05T03:07:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2013/10/05/adios-keynote</id>
	  
	  <content type="html"><![CDATA[<p>El día que empecé a preparar la presentación <a href="http://slides.helios.javimoreno.me">Helios y su integración en iOS</a> me pregunté si habría alguna forma de utilizar markdown con Keynote. Iban a ser unas cuantas diapositivas de texto y manejar títulos, negritas, cursivas, listas, links,&#8230; con markdown me parecía triunfal. Después de una búsqueda rápida en Google y ver un par de enlaces descubrí <a href="https://github.com/hakimel/reveal.js">reveal.js</a>&#8230; y decidí no volver a abrir Keynote nunca más.</p>

<!--more-->


<p>La <a href="http://lab.hakim.se/reveal-js/#/">presentación de ejemplo</a> ya te da una idea general de toda la potencia de este framework. Inicialmente, a mi me bastaba con poder reutilizar un fichero en markdown en la presentación y al ver que dentro de cada <code>section</code>, que es como se identifican las <em>slides</em>, se podía introducir texto en markdown me daba por satisfecho. Luego seguí navegando y vi que, en realidad, podía utilizar un texto entero en markdown ya que con una seríe de convenciones en la escritura y arrancando reveal.js como una aplicación node.js, esta aplicación se encargaba de generar la presentación completa&#8230; reveal.js FTW!</p>

<h2>Atajos de teclado</h2>

<p>Un poco más adelante explicaré como hacer que reveal.js lea de un fichero <code>.md</code> pero antes quiero destacar la funcionalidad de reveal.js accesible a través de teclado.</p>

<ul>
<li>Avance de diapositivas. Una característica muy llamativa de reveal.js es que las presentaciones tienen dos dimensiones. Estamos acostumbrados a avanzar y a retroceder pero con este framework también podemos subir y bajar. Esto, desde mi punto de vista, es muy útil cuando quieres ampliar la información de una diapositiva en varias diapositivas más. En el eje horizontal (avance-retroceso) estarían las diapositivas principales y algunas de ellas podrían tener un eje vertical (arriba-abajo). La navegación se controla con las teclas de cursor pero si la presentación se visualiza en un dispositivo táctil el control de la navegación se hace con el dedo. Impresionante, no?</li>
<li>Vistazo general. Pulsando la tecla <em>escape</em> se hace un zoom y puedes ver todas las diapositivas en miniatura lo que te permite navegar más rápidamente a una en concreto. Además, en caso de que tengas secciones de diapositivas (grupos en vertical) puedes ver la diapositiva que se mostraría en un flujo de navegación horizontal.</li>
<li>Modo Pausa. Pulsando la tecla &#8220;b&#8221; se hace un fundido a negro, de esta forma puedes forzar al público a centrar su atención en ti en lugar de hacerlo sobre la presentación. Para salir de la <em>pausa</em> hay que volver a pulsar la &#8220;b&#8221;.</li>
<li>Pantalla completa. Pulsando la tecla &#8220;f&#8221;</li>
</ul>


<p>Nada que envidiar a los programas típicos de presentaciones como Powerpoint (perdón por ponerlo en primer lugar) o Keynote.</p>

<h2>Funcionalidad avanzada</h2>

<p>Tener reveal.js dentro de una aplicación node.js también te permite visualizar las notas del presentador y alguna otra funcionalidad más sofisticada como sincronizar la presentación con todos los que la estén viendo al mismo tiempo que tu en sus dispositivos, actualizar el contenido de las diapositivas en tiempo real, etc..
La verdad es que toda esas funcionalidades pintan muy bien pero yo lo único que quería era:</p>

<h2>¡Una presentación hecha con markdown!</h2>

<p>Hay que destacar que, al combinar reveal.js con un fichero .md donde están recogidas todas las diapositivas no se explota toda la potencia del framework como las diferentes transiciones, enlaces internos, colores de fondo diferentes, imágenes de fondo diferentes, vistas fragmentadas, etc. En mi humilde opinión, abusar de las transiciones, cambios de colores o de imágenes suele cargar bastante una presentación, pero vamos, que eso es cuestión de gustos. <br/>
Si que eché de menos el no poder hacer vistas fragmentadas. Espero que en alguna próxima versión den con la forma de hacerlo. Al menos la agrupación de diapositivas y las notas si que está disponibles y eso es para mí algo digno de mención. Para que os hagáis una idea, este es el corazón de mi presentación: el fichero <a href="https://github.com/jmoreno/HeliosTalk/blob/master/presentation.md">presentation.md</a>.</p>

<h2>¿Cómo hice mi presentación?</h2>

<p>Lo primero que hice fue clonar el repositorio original de <a href="https://github.com/hakimel/reveal.js">reveal.js</a> y cambiar el fichero index.html. La mayor parte de la presentación estaría en el fichero markdown pero en la primera diapositiva quería usar una vista fragmentada (de esas en las que las frases o las palabras van apareciendo poco a poco). Debido a esto, el código de mi presentación quedaría así:</p>

<figure class='code'><figcaption><span>Fragmento HTML para definir la presentación</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;reveal&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Any section element inside of this container is displayed as a slide --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;slides&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;section&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h1&gt;</span>Helios<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h2&gt;</span>y su integración en iOS<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">&quot;fragment fade-in&quot;</span><span class="nt">&gt;</span>¿Es <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://twitter.com/mattt&quot;</span><span class="nt">&gt;</span>@mattt<span class="nt">&lt;/a&gt;&lt;/small&gt;</span> una persona o una legión?<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>            <span class="nt">&lt;p&gt;</span>
</span><span class='line'>                <span class="nt">&lt;small&gt;</span>Created by <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://javimoreno.me&quot;</span><span class="nt">&gt;</span>Javier Moreno<span class="nt">&lt;/a&gt;</span> / <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://twitter.com/jmoreno78&quot;</span><span class="nt">&gt;</span>@jmoreno78<span class="nt">&lt;/a&gt;&lt;/small&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;section</span> <span class="na">data-markdown=</span><span class="s">&quot;presentation.md&quot;</span> <span class="na">data-separator=</span><span class="s">&quot;^\n\n\n&quot;</span> <span class="na">data-vertical=</span><span class="s">&quot;^\n\n&quot;</span> <span class="na">data-notes=</span><span class="s">&quot;^Note:&quot;</span> <span class="na">data-charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;&lt;/section&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;section&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h1&gt;</span>THE END<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h3&gt;</span>BY Javier Moreno / javimoreno.me<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>            <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;fragment fade-in&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;small&gt;</span>Created by <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://javimoreno.me&quot;</span><span class="nt">&gt;</span>Javier Moreno<span class="nt">&lt;/a&gt;</span> / <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://twitter.com/jmoreno78&quot;</span><span class="nt">&gt;</span>@jmoreno<span class="nt">&lt;/a&gt;&lt;/small&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Eso es todo, aparentemente tres diapositivas. La sección que se nutre de un fichero markdown tiene los siguientes atributos:</p>

<ul>
<li><code>data-markdown</code>: La ubicación del fichero</li>
<li><code>data-separator</code>: Lo que vaya a identificar la separación entre diapositivas horizontales. En mi caso, tres líneas en blanco.</li>
<li><code>data-vertical</code>: Lo que vaya a identificar la separación entre diapositivas verticales. En mi caso, dos líneas en blanco.</li>
<li><code>data-notes</code>: Lo que identifique que el texto a continuación no es parte visual de la diapositivas si no de las notas.</li>
<li><code>data-charset</code>: Muy importante para nosotros, que usamos muchos caracteres especiales como tildes, eñes, signos de interrogación y admiración el poner UTF-8.</li>
</ul>


<p>Y eso es todo, si echáis un vistazo al fichero <a href="https://github.com/jmoreno/HeliosTalk/blob/master/presentation.md">presentation.md</a> comprobaréis lo que acabo de comentar.</p>

<p>Una vez hecho esto, para probarlo en local hay que tener instalado <a href="http://nodejs.org">node.js</a> y <a href="http://gruntjs.com/getting-started#installing-the-cli">grunt</a>. Si ya tenemos estos servicios instalados lo único que hay que hacer es ir hasta la carpeta donde está reveal, instalar las dependencias con <code>$ npm install</code> y arrancar la presentación con <code>$ grunt serve</code>. La presentación se verá en <a href="http://localhost:8000">http://localhost:8000</a>.</p>

<h2>Despliegue en Heroku.</h2>

<p>Si hacer lo anterior me llevo un rato de nada, conseguir desplegar en Heroku me llevó un mes: subí con éxito el martes y la presentación a los asistentes de la NSCoderMAD fue el miércoles.  <br/>
Lo primero que probé fue desplegar tal y como estaba la aplicación: fue un fracaso. Por lo visto <em>grunt</em> está muy bien para entornos de desarrollo pero los hosting de node.js prefieren otras cosas. Búsquedas en Google hablan de versiones diferentes de la Heroku Toolbet para desplegar aplicaciones node.js con grub pero a mi no me funcionó ninguna de las recomendaciones que encontré.</p>

<p>A última hora encontré este <a href="https://github.com/willy-vvu/reveal.js">fork de reveal.js</a> que se podía previsualizar en Heroku y de ahí tomé las configuraciones que necesitaba para que funcionará mi presentación en Heroku.</p>

<p>Lo primero fue crear un fichero llamado <code>server.js</code> con el siguiente contenido:</p>

<figure class='code'><figcaption><span>Fichero server.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">).</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">handler</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span><span class="nx">mime</span><span class="o">=</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mime&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span><span class="o">||</span><span class="mi">5000</span><span class="p">);</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">handler</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">uri</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">url</span><span class="p">).</span><span class="nx">pathname</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">uri</span><span class="o">==</span><span class="s1">&#39;/&#39;</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">uri</span><span class="o">=</span><span class="s1">&#39;/index.html&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">uri</span><span class="o">=</span><span class="nx">uri</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/%20/g</span><span class="p">,</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">uri</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">filename</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="nx">uri</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span>
</span><span class='line'>      <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">404</span><span class="p">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Error loading file...&#39;</span><span class="p">);</span>            
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-type&#39;</span><span class="p">,</span><span class="nx">mime</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="nx">uri</span><span class="p">));</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Este fichero contiene la información mínima que node.js necesita para arrancar la aplicación. Para que lea de este fichero, hubo que modificar el fichero <code>Procfile</code></p>

<figure class='code'><figcaption><span>Fichero Procfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>web: node server.js
</span></code></pre></td></tr></table></div></figure>


<p>Y por último, cambiar el fichero de dependencias <code>package.json</code>:</p>

<figure class='code'><figcaption><span>Fichero package.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;author&quot;</span><span class="p">:</span> <span class="s2">&quot;Javi Moreno featuring (reveal.js by Hakim El Hattab)&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;revealjs&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Helios y su integración con iOS&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;2.5.1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;repository&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;git&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;git@github.com:jmoreno/HeliosTalk.git&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;engines&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;node&quot;</span><span class="p">:</span> <span class="s2">&quot;0.8.x&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;mime&quot;</span><span class="p">:</span><span class="s2">&quot;1.2.7&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;npm&quot;</span><span class="p">:</span><span class="s2">&quot;1.2.x&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ya solo quedaba hacer commit y seguir los pasos para desplegar en Heroku:</p>

<ol>
<li><code>$ heroku create</code></li>
<li><code>$ git push heroku master</code></li>
<li><code>$ heroku open</code></li>
</ol>


<p>No os podéis hacer a la idea de la alegría que me llevé.</p>

<h2>Para acabar</h2>

<p>Creo que, en su momento, este tweet no se entendió:</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p>Si no me falla el valor, la presentación que estoy haciendo para la <a href="https://twitter.com/nscoder_mad">@nscoder_mad</a> se podrá ver en slideshare, Github y Heroku…</p>&mdash; Javi Moreno (@jmoreno78) <a href="https://twitter.com/jmoreno78/statuses/377465465054191616">September 10, 2013</a></blockquote>
<script async src="http://javimoreno.me//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>Como al final no me faltó el valor, ahí está la presentación: en <a href="http://www.slideshare.net/jmoreno78/helios-y-su-integracin-en-i-os">slideshare</a>, <a href="https://github.com/jmoreno/HeliosTalk">Github</a> y <a href="http://slides.helios.javimoreno.me/#/">Heroku</a>. \o/</p>
]]></content>
		
	</entry>
  
	<entry>
	  
		<title type="html"><![CDATA[Markdown]]></title>
		<link href="http://javimoreno.me/blog/2013/07/06/markdown/"/>
		
	  <updated>2013-07-06T16:10:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2013/07/06/markdown</id>
	  
	  <content type="html"><![CDATA[<p>Hay dos cosas que recomendaría a todo el mundo que tuviera que escribir <em>frecuentemente</em> en un ordenador:</p>

<ol>
<li>Aprender mecanografía.</li>
<li>Aprender <a href="http://daringfireball.net/projects/markdown/">markdown</a>.</li>
</ol>


<!--more-->


<p>Yo aprendí mecanografía con 18 o 19 años… cuando empecé con memorias, prácticas y otros trabajos universitarios. Markdown lo aprendí hace poco, con 34 años, y creo que no he aprendido nada que me ayude a ganar tanto tiempo en mi día a día entre medias. Markdown te permite confeccionar un documento con títulos, negritas, cursivas, listas, listas numéricas, tablas, citas, hipervínculos,… sin levantar las manos del teclado para ir al trackpad (o al ratón, el que lo use ;-P).</p>

<p>Principalmente lo utilizo en cuatro escenarios.</p>

<ol>
<li>En el trabajo. Los documentos funcionales, inventarios, y otros documentos que haría con un procesador de texto los hago en markdown.</li>
<li>En este blog. Todas las entradas de este blog están escritas en markdown.</li>
<li>En los proyectos de desarrollo <em>caseros</em>. Intento siempre tener un readme.md tanto si voy a colgar el proyecto en Github como si no.</li>
<li>En mis notas. Cualquier nota, Tanto si es para acordarme de como se hace un enlace simbólico como si es para tener un inventario de cuentas y tarjetas las escribo en markdown.</li>
</ol>


<p>Desde mi punto de vista, para utilizar markdown solo necesitas dos cosas: un editor de texto y un programa que transforme markdown en formato enriquecido para ver cual será el resultado final.</p>

<p>En el trabajo, donde tengo que lidiar con Windows, uso <a href="http://markdownpad.com">MarkdownPad</a>, un programa que tiene dos ventanas: una para escribir en markdown y otra para visualizar lo que estas escribiendo en formato enriquecido.</p>

<p>En casa tengo algo más de lío. Inicialmente, todo lo hacía con <a href="http://www.sublimetext.com">Sublime Text</a>. Cuando empece a preocuparme por previsualizar los documentos descubrí Mou, un programa muy semejante a MarkdownPad pero para Mac. Con <a href="http://mouapp.com">Mou</a> me empece a interesar por la previsualización y así es como descubrí <a href="http://markedapp.com">Marked</a>, un programa dedicado a la previsualización de documentos en markdown y con utilidades para la exportación a HTML, RTF, pdf, etc.</p>

<p>Siguiendo el rastro a Marked, descubrí que su desarrollador también tenía un programita para escribir en markdown basado en <a href="http://notational.net">Notational Velocity</a> (un programa del que había oído maravillas en 85% Cocoa): <a href="http://brettterpstra.com/projects/nvalt/">nvALT</a>. La integración de nvALT con Marked fue lo que me animó a probarlo. nvALT trae su propio visualizador (bastante bueno y configurable, por cierto) pero yo prefiero usar Marked (no solo porque lo haya comprado, es que es realmente bueno).</p>

<p>Cualquiera que me conozca sabrá que no me canso de probar herramientas y aunque la combinación nvALT + Marked sigue siendo para mi la mejor, ahora estoy usando también <a href="http://www.iawriter.com/mac/">iA Writer</a>. Aunque iA Writer tiene su propio visualizador (nvALT también tiene el suyo), con automator y preferencias de teclado se puede hacer que el documento se previsualice en Marked (algo que, como ya he dejado claro antes, para mi es imprescindible).</p>

<p>Tanto las notas, como las entradas del blog, son documentos que quiero tener disponibles cuando estoy en casa y también en el iPhone y en el iPad. Si tienes iA Writer para iOS y para Mac puedes beneficiarte de la sincronización con iCloud aunque existiendo Dropbox y los enlaces simbólicos cualquier aplicación es válida.</p>

<h2>Bueno, con tanta herramienta, ¿cuál es mi forma de trabajar?</h2>

<p>Actualmente, las notas las escribo en nvALT. Tengo todas las notas metidas en la misma carpeta porque la búsqueda de este programa es genial y además las etiquetas me permiten clasificar las notas. Esta carpeta es un enlace simbólico a la carpeta de iCloud de iA Writer. De esta forma, puedo consultar y editar las notas en la versión para iOS que tengo en el iPhone y en el iPad de esta aplicación. nvALT soporta sincronización con Simplenote por lo que sí activas esta opción podrás tener la sincronización con iPhone y iPad sin tener que comprar iA Writer.  Si la carpeta donde nvALT va a buscar las notas está en Dropbox también&#8230; mejor que mejor.</p>

<p>Las entradas del blog y los readme de los proyectos también las solía escribir con nvALT cuando estaba en casa pero ahora estoy usando iA Writer. La experiencia de escribir es mucho mejor en iA Writer ya que da la sensación de que estas solo con tu teclado frente a una hoja en blanco pero nvALT tiene unos atajos de teclado mucho más útiles, creo yo, sobre todo para dar formato al texto.    <br/>
Cuando termino de escribir los readme, copio el texto y lo pego en el fichero correspondiente. A partir de ahí, la edición la haré desde el editor o IDE que toque en función del proyecto: Sublime, Xcode o RubyMine.</p>

<p>Las entradas del blog las termino de editar en Sublime. El motivo es que Octopress tiene unas convenciones propias para imágenes o código fuente embebido que no me gusta como se previsualizan así que prefiero dejar esa edición para el momento previo a la publicación.</p>

<p>Y ya esta, llamadme enrevesado pero esta es la forma más cómoda que tengo de trabajar. ;-)</p>
]]></content>
		
	</entry>
  
	<entry>
	  
		<title type="html"><![CDATA[Helios III. Piratas y bucaneros.]]></title>
		<link href="http://javimoreno.me/blog/2013/05/22/helios-iii-piratas-y-bucaneros/"/>
		
	  <updated>2013-05-22T06:54:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2013/05/22/helios-iii-piratas-y-bucaneros</id>
	  
	  <content type="html"><![CDATA[<blockquote><p>El puerto espacial de Mos Eisley. No encontrarás nunca un lugar como éste tan lleno de maldad y vileza. Debemos cuidarnos.</p><footer><strong>Star Wars</strong> <cite>Ben Kenobi Llegando a Mos Eisley Con Luke Skywalker</cite></footer></blockquote>


<p>Para esta tercera entrega volvemos a basarnos en unos artículos de Rafa Aguilar (aka <a href="http://twitter.com/rais38">@rais38</a>), recien publicados en <a href="http://objective-c.es">Objective-C.es</a>, donde primero nos explica las <a href="http://objective-c.es/in-app-purchases-en-ios-parte-1/">categorías y tipos de In-App Purchases</a> y después <a href="http://objective-c.es/in-app-purchases-en-ios-parte-2/">nos enseña con un ejemplo</a> lo sencillo que es incorporar a una aplicación esta excelente fuente de ingresos.    <br/>
Nosotros aquí vamos a ver como simplifica CargoBay el uso de IAP en nuestras aplicaciones y también a verificar si la compra se ha realizado correctamente por el método más seguro: un servidor con Helios.</p>

<!--more-->


<p>He de reconocer que a medida que he ido avanzando en el análisis de Helios he ido apreciando la bien que esta planteado y lo que puede suponer para un desarrollador que se quiera aventurar en la creación de su propio backend. Cierto es que la primera parte, la que replica el modelo Core Data en el servidor me parece que está todavía un poco floja, así como la sincronización entre los dispositivos y el backend. El soporte para notificaciones push está bien, todavía le queda camino que recorrer pero es un buen punto de partida si quieres tener tu propio gestor de notificaciones. Pero con CargoBay y Venice, la gestión de las compras dentro de la aplicación se simplifican una barbaridad.</p>

<p>CargoBay es una pequeña librería de Mattt Thompson (del que no hemos hablado prácticamente nada en este blog) que facilita la gestión de estas transacciones al reducir a unos pocos métodos con bloques la recuperación de productos, comprobación del estado de la compra así como la verificación del recibo siguiendo las recomendaciones de Apple para evitar los fraudes en este tipo de compras.</p>

<p>Venice, es la gema que incluye Helios para realizar la verificación del recibo en servidor (otra recomendación de Apple para evitar fraudes). La otra funcionalidad que ofrece esta gema es devolver un listado de identificadores de IAP, esto será muy útil cuando queramos cambiar la oferta de productos en nuestra aplicación sin tener que actualizar la aplicación vía iTunes Connect. Para poder utilizar esta funcionalidad, nuestra aplicación debe estar preparada para trabajar con todos los productos que le vayan a llegar por este servicio.</p>

<p>Con todo lo que ya sabemos gracias a Rafa, vamos a crear una aplicación que nos permita contratar los servicios de los piratas y cazarecompensas que habitan Mos Eisley. Sabemos que nadie es de fiar en este lugar así que mejor que incluyamos un sistema de verificación de las compras o nuestro jefe nos terminará dando de comer a un sarlacc (algo muy doloroso ya que recordemos que su digestión dura más de mil años).</p>

<p>Para probar algunas bondades de CargoBay vamos a hacer lo siguiente: En iTunes Connect vamos a crear las siguientes IAP tal y como nos ha <a href="">contado Rafa</a>:</p>

<table>
<thead>
<tr>
<th>Producto          </th>
<th> Identificador                             </th>
</tr>
</thead>
<tbody>
<tr>
<td>Han Solo          </td>
<td> com.cytdevteam.MosEisley.HanSolo</td>
</tr>
<tr>
<td>Chewbacca         </td>
<td> com.cytdevteam.MosEisley.Chewbacca</td>
</tr>
<tr>
<td>Millennium Falcon </td>
<td> com.cytdevteam.MosEisley.MillenniumFalcon</td>
</tr>
<tr>
<td>Modal Nodes       </td>
<td> com.cytdevteam.MosEisley.ModalNodes          </td>
</tr>
</tbody>
</table>


<p>En nuestro repositorio de productos de Helios vamos a crear estos cuatro productos y dos más:</p>

<table>
<thead>
<tr>
<th>Producto          </th>
<th> Identificador                             </th>
</tr>
</thead>
<tbody>
<tr>
<td>Han Solo          </td>
<td> com.cytdevteam.MosEisley.HanSolo</td>
</tr>
<tr>
<td>Chewbacca         </td>
<td> com.cytdevteam.MosEisley.Chewbacca</td>
</tr>
<tr>
<td>Millennium Falcon </td>
<td> com.cytdevteam.MosEisley.MillenniumFalcon</td>
</tr>
<tr>
<td>Modal Nodes       </td>
<td> com.cytdevteam.MosEisley.ModalNodes</td>
</tr>
<tr>
<td>Greedo            </td>
<td> com.cytdevteam.MosEisley.Greedo</td>
</tr>
<tr>
<td>Boba Fett         </td>
<td> com.cytdevteam.MosEisley.BobaFett         </td>
</tr>
</tbody>
</table>


<p>Si echamos un vistazo a la documentación de Helios, veremos que los únicos métodos que ofrece para In-App Purchases son un GET de productos y un POST para comprobar recibos&#8230; ¿Cómo grabamos entonces los productos en la tabla? pues como graban los hombres, con SQL directamente sobre la base de datos.</p>

<p>Creamos un nuevo fichero <em>HeliosTasks.rake</em> en nuestro proyecto para poder lanzarlo tanto en local como en servidor de forma manual y escribimos lo siguiente:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:HeliosTasks</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;TODO&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:loadIdentifiers</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">require</span> <span class="s1">&#39;pg&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">connect</span><span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">pw</span><span class="p">)</span>
</span><span class='line'>      <span class="no">PGconn</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">5432</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">db</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">pw</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">populate_products</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sql</span> <span class="o">=</span> <span class="s2">&quot;DELETE FROM in_app_purchase_products;  -- empty contents of table</span>
</span><span class='line'><span class="s2">             INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) </span>
</span><span class='line'><span class="s2">                           VALUES (1, &#39;com.cytdevteam.MosEisley.HanSolo&#39;, &#39;Consumable&#39;, &#39;Han Solo&#39;, &#39;Han Solo The One And Only&#39;, 0.99, &#39;USD&#39;, &#39;t&#39;);</span>
</span><span class='line'><span class="s2">             INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) </span>
</span><span class='line'><span class="s2">                           VALUES (2, &#39;com.cytdevteam.MosEisley.Chewbacca&#39;, &#39;Consumable&#39;, &#39;Chewbacca&#39;, &#39;Chewbacca&#39;, 0.99, &#39;USD&#39;, &#39;t&#39;);</span>
</span><span class='line'><span class="s2">             INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) </span>
</span><span class='line'><span class="s2">                           VALUES (3, &#39;com.cytdevteam.MosEisley.MillenniumFalcon&#39;, &#39;Consumable&#39;, &#39;Millennium Falcon&#39;, &#39;Millennium Falcon&#39;, 4.99, &#39;USD&#39;, &#39;t&#39;);</span>
</span><span class='line'><span class="s2">             INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) </span>
</span><span class='line'><span class="s2">                           VALUES (4, &#39;com.cytdevteam.MosEisley.ModalNodes&#39;, &#39;Consumable&#39;, &#39;Modal Nodes&#39;, &#39;A real Modal Nodes` gig&#39;, 4.99, &#39;USD&#39;, &#39;t&#39;);</span>
</span><span class='line'><span class="s2">             INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) </span>
</span><span class='line'><span class="s2">                           VALUES (5, &#39;com.cytdevteam.MosEisley.Greedo&#39;, &#39;Consumable&#39;, &#39;Greedo&#39;, &#39;A coward that shot first&#39;, 4.99, &#39;USD&#39;, &#39;t&#39;);</span>
</span><span class='line'><span class="s2">             INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) </span>
</span><span class='line'><span class="s2">                           VALUES (6, &#39;com.cytdevteam.MosEisley.BobaFett&#39;, &#39;Consumable&#39;, &#39;Boba Fett&#39;, &#39;He is no good to me dead&#39;, 4.99, &#39;USD&#39;, &#39;t&#39;);&quot;</span>
</span><span class='line'>      <span class="n">conn</span><span class="o">.</span><span class="n">exec</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="n">conn</span> <span class="o">=</span> <span class="n">connect</span><span class="p">(</span><span class="s1">&#39;databaseName&#39;</span><span class="p">,</span><span class="s1">&#39;username&#39;</span><span class="p">,</span><span class="s1">&#39;password&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Connected to </span><span class="si">#{</span><span class="n">conn</span><span class="o">.</span><span class="n">db</span><span class="si">}</span><span class="s2"> at </span><span class="si">#{</span><span class="n">conn</span><span class="o">.</span><span class="n">host</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">populate_products</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="no">PGError</span><span class="o">=&gt;</span><span class="n">e</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Oh Oh!&quot;</span><span class="p">,</span> <span class="n">e</span>
</span><span class='line'>    <span class="k">ensure</span>
</span><span class='line'>      <span class="n">conn</span><span class="o">.</span><span class="n">close</span> <span class="k">unless</span> <span class="n">conn</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Connection closed&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>No creo que os cueste mucho ver lo que hace: establece una conexión con la base de datos y a continuación borra e inserta seis registros. Si hubiera algún error saldría por la consola.</p>

<p>Si ahora escribimos en un navegador <a href="http://localhost:3000/products/identifiers">http://localhost:3000/products/identifiers</a></p>

<p>veríamos algo como esto:</p>

<p><img src="http://javimoreno.me/images/photos/2013/jsonResponse.png"></p>

<p>Ya hemos creado todas las IAP en iTunes Connect (que coñazo) y hemos insertado los productos que vamos a ofrecer en nuestro servidor. Es el momento de liarnos la manta a la cabeza con la aplicación.</p>

<p>Nos vamos a basar en la plantilla de Master-Detail con ARC, Storyboards y Core Data. La primera lista serán las compras que hayamos realizado. En Storyboard añadiremos un nuevo navigation controller con un UITableViewController donde mostraremos los productos que se pueden comprar a través del App Store.</p>

<p>Si a estas alturas todavía no usas CocoaPods deberías hacerlo, es la forma más fácil de gestionar las librerías de terceros que usas en tus aplicaciones. En este caso, nuestro podfile incluirá AFNetworking, CargoBay y NSData+Base64:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>platform :ios, '5.0'
</span><span class='line'>pod 'AFNetworking', '~> 1.2'
</span><span class='line'>pod 'CargoBay', '~> 0.3.2'
</span><span class='line'>pod 'NSData+Base64', '~> 1.0.0'</span></code></pre></td></tr></table></div></figure>


<h2>Un pequeño expositor.</h2>

<p>Ya sabemos que lo primero que hay que hacer es comprobar si nuestra aplicación tiene permiso para hacer compras dentro de la aplicación. En caso afirmativo podremos acceder a nuestros servidores para recuperar la información de los productos que tenemos a la venta:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Comprobamos si hay alguna restricción configurada en el device respecto a las In-App Purchases.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">SKPaymentQueue</span> <span class="n">canMakePayments</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Puedo hacer pagos In-App&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">getProductsInStoreKitDirectlyFromHelios</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Control parental activado&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Para cargar el UITableView del viewController de productos necesitamos un array de productos. Toda la información del producto tal y como está en iTunes Connect la podemos obtener a través de StoreKit pero CargoBay nos proporciona unos métodos con bloques que recuperan está información. Podemos hacerlo de dos formas: recuperando primero la lista de identificadores y después pasándole esta lista al método correspondiente:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">getProductsIdentifiersInHelios</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://localhost:3000/products/identifiers/&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLRequest</span> <span class="nl">requestWithURL:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">AFJSONRequestOperation</span> <span class="nl">JSONRequestOperationWithRequest:</span><span class="n">request</span> <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span><span class="p">,</span> <span class="n">NSHTTPURLResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">,</span> <span class="kt">id</span> <span class="n">JSON</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">getProductsInStoreKitFromArray:</span><span class="n">JSON</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span><span class="p">,</span> <span class="n">NSHTTPURLResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="kt">id</span> <span class="n">JSON</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">description</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">getProductsInStoreKitFromArray:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">array</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">CargoBay</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">productsWithIdentifiers:</span><span class="p">[</span><span class="n">NSSet</span> <span class="nl">setWithArray:</span><span class="n">array</span><span class="p">]</span> <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">products</span><span class="p">,</span> <span class="n">NSArray</span> <span class="o">*</span><span class="n">invalidIdentifiers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_productsArray</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_productsArray</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableArray</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCapacity:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Products: %@&quot;</span><span class="p">,</span> <span class="n">products</span><span class="p">);</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Invalid Identifiers: %@&quot;</span><span class="p">,</span> <span class="n">invalidIdentifiers</span><span class="p">);</span>
</span><span class='line'>        <span class="n">_productsArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="nl">arrayWithArray:</span><span class="n">products</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tableView</span> <span class="n">reloadData</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>O bien, si tenemos la certeza que el servicio ya nos devuelve los datos en una array únicamente con los identificadores (que es como espera CargoBay que se lo pasemos), podemos hacerlo todo en un único método:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">getProductsInStoreKitDirectlyFromHelios</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://localhost:3000/products/identifiers/&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLRequest</span> <span class="nl">requestWithURL:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">CargoBay</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">productsWithRequest:</span><span class="n">request</span> <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">products</span><span class="p">,</span> <span class="n">NSArray</span> <span class="o">*</span><span class="n">invalidIdentifiers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Products: %@&quot;</span><span class="p">,</span> <span class="n">products</span><span class="p">);</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Invalid Identifiers: %@&quot;</span><span class="p">,</span> <span class="n">invalidIdentifiers</span><span class="p">);</span>
</span><span class='line'>        <span class="n">_productsArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="nl">arrayWithArray:</span><span class="n">products</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tableView</span> <span class="n">reloadData</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">description</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>En cualquiera de los dos casos, el resultado del log será el siguiente:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2013-05-15 16:14:48.275 MosEisley[3242:c07] Products: (
</span><span class='line'>    "&lt;SKProduct: 0x77ad230>",
</span><span class='line'>    "&lt;SKProduct: 0x82a5ab0>",
</span><span class='line'>    "&lt;SKProduct: 0x8267f70>",
</span><span class='line'>    "&lt;SKProduct: 0x8263400>"
</span><span class='line'>)
</span><span class='line'>2013-05-15 16:14:48.275 MosEisley[3242:c07] Invalid Identifiers: (
</span><span class='line'>    "com.cytdevteam.MosEisley.Greedo",
</span><span class='line'>    "com.cytdevteam.MosEisley.BobaFett"
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>Es decir, hemos recuperado seis registros de nuestro servidor de los cuales cuatro son productos correctos en iTunes Connect y dos no lo son. Solo mostraremos los productos correctos:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#pragma mark - Table view data source</span>
</span><span class='line'>
</span><span class='line'> <span class="o">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nl">numberOfSectionsInTableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="n">tableView</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>     <span class="c1">// Return the number of sections.</span>
</span><span class='line'>     <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="o">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nl">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="n">tableView</span> <span class="nl">numberOfRowsInSection:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="n">section</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>     <span class="c1">// Return the number of rows in the section.</span>
</span><span class='line'>     <span class="k">return</span> <span class="p">[</span><span class="n">_productsArray</span> <span class="n">count</span><span class="p">];</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="o">-</span> <span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nl">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="n">tableView</span> <span class="nl">cellForRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="n">indexPath</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>     <span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">CellIdentifier</span> <span class="o">=</span> <span class="s">@&quot;Cell&quot;</span><span class="p">;</span>
</span><span class='line'>     <span class="n">UITableViewCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">[</span><span class="n">tableView</span> <span class="nl">dequeueReusableCellWithIdentifier:</span><span class="n">CellIdentifier</span> <span class="nl">forIndexPath:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// Configure the cell...</span>
</span><span class='line'>     <span class="n">SKProduct</span> <span class="o">*</span><span class="n">product</span> <span class="o">=</span> <span class="p">[</span><span class="n">_productsArray</span> <span class="nl">objectAtIndex:</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">cell</span><span class="p">.</span><span class="n">textLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">product</span><span class="p">.</span><span class="n">localizedTitle</span><span class="p">;</span>
</span><span class='line'>     <span class="n">cell</span><span class="p">.</span><span class="n">detailTextLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">product</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">;</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Esta será, más o menos, la imagen de nuestro expositor:</p>

<p><img src="http://javimoreno.me/images/photos/2013/productsViewController.png"></p>

<p>Para realizar las compras, CargoBay no tiene ninguna utilidad desarrollada por el momento, la única diferencia con el tutorial de Rafa es que el observer no es necesario incluirlo aquí ya que lo vamos a hacer en el <code>(BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</code> para que gestiones no solo estas compras si no también las compras que pudieran haber quedado pendientes al cerrar la aplicación:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#pragma mark - Table view delegate</span>
</span><span class='line'>
</span><span class='line'> <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="n">tableView</span> <span class="nl">didSelectRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="n">indexPath</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>     <span class="c1">// Añadimos el producto que recibimos en el método delegado productsRequest:didReceiveResponse:</span>
</span><span class='line'>     <span class="n">SKPayment</span> <span class="o">*</span><span class="n">pago</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKPayment</span> <span class="nl">paymentWithProduct:</span><span class="p">[</span><span class="n">_productsArray</span> <span class="nl">objectAtIndex:</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">]];</span>
</span><span class='line'>     <span class="c1">// Nos añadimos a nosotros mismos como observadores de la transacción.</span>
</span><span class='line'> <span class="c1">//    [[SKPaymentQueue defaultQueue] addTransactionObserver:self];</span>
</span><span class='line'>     <span class="p">[[</span><span class="n">SKPaymentQueue</span> <span class="n">defaultQueue</span><span class="p">]</span> <span class="nl">addPayment:</span><span class="n">pago</span><span class="p">];</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Que no se pierda ni un recibo.</h2>

<p>Tal y como acabamos de comentar, el <em>observer</em> de la cola de pagos lo vamos a incluir en <code>(BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</code> para que no se pierda ni una sola operación. Además incluimos el bloque que se llamará cada vez que haya alguna actualización de una transacción:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Payment Queue Observation with CargoBay</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">CargoBay</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">setPaymentQueueUpdatedTransactionsBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">SKPaymentQueue</span> <span class="o">*</span><span class="n">queue</span><span class="p">,</span> <span class="n">NSArray</span> <span class="o">*</span><span class="n">transactions</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Updated Transactions: %@&quot;</span><span class="p">,</span> <span class="n">transactions</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">SKPaymentTransaction</span> <span class="o">*</span><span class="n">transaction</span> <span class="k">in</span> <span class="n">transactions</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">switch</span> <span class="p">(</span><span class="n">transaction</span><span class="p">.</span><span class="n">transactionState</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">SKPaymentTransactionStatePurchased:</span>
</span><span class='line'>                    <span class="p">[</span><span class="n">self</span> <span class="nl">oneStepVerification:</span><span class="n">transaction</span><span class="p">];</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">SKPaymentTransactionStateFailed:</span>
</span><span class='line'>                         <span class="c1">// TODO</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">SKPaymentTransactionStateRestored:</span>
</span><span class='line'>                         <span class="c1">// TODO</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[[</span><span class="n">SKPaymentQueue</span> <span class="n">defaultQueue</span><span class="p">]</span> <span class="nl">addTransactionObserver:</span><span class="p">[</span><span class="n">CargoBay</span> <span class="n">sharedManager</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Override point for customization after application launch.</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cuando la transacción pase a un estado de <em>purchased</em> es cuando deberemos realizar las acciones derivadas de la compra, antes de hacer nada es cuando deberíamos asegurarnos de que el recibo es verdadero. Las dos opciones que tenemos son verificar dentro de la propia aplicación accediendo a un servicio de Apple o llamar a un servicio nuestro que realice ese mismo acceso. Para el primer caso, CargoBay ya nos proporciona un método que realiza esa verificación:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">oneStepVerification:</span><span class="p">(</span><span class="n">SKPaymentTransaction</span> <span class="o">*</span><span class="p">)</span><span class="nv">transaction</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">CargoBay</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">verifyTransaction:</span><span class="n">transaction</span> <span class="nl">password:</span><span class="nb">nil</span> <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">receipt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Receipt: %@&quot;</span><span class="p">,</span> <span class="n">receipt</span><span class="p">);</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">serverSideVerification:</span><span class="n">transaction</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error %d (%@)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">code</span><span class="p">],</span> <span class="p">[</span><span class="n">error</span> <span class="n">localizedDescription</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Es de sobra conocido que tanto las IAP son fácilmente <em>pirateables</em> y aunque la verificación desde la propia aplicación aumenta la seguridad de nuestras ventas, también son conocidos los casos en los que esta verificación también ha sido <em>hackeada</em>. La otra utilidad de Venice es la realización de esta misma verificación en nuestro servidor:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">serverSideVerification:</span><span class="p">(</span><span class="n">SKPaymentTransaction</span> <span class="o">*</span><span class="p">)</span><span class="nv">transaction</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://localhost:3000/receipts/verify&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSMutableURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableURLRequest</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithURL:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">request</span> <span class="nl">setHTTPMethod:</span><span class="s">@&quot;POST&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSArray</span> <span class="o">*</span><span class="n">paths</span> <span class="o">=</span> <span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span><span class="n">NSDocumentDirectory</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="n">YES</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">documentsDirectory</span> <span class="o">=</span> <span class="p">[</span><span class="n">paths</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">appFile</span> <span class="o">=</span> <span class="p">[</span><span class="n">documentsDirectory</span> <span class="nl">stringByAppendingPathComponent:</span><span class="s">@&quot;TransactionReceipt&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">transaction</span><span class="p">.</span><span class="n">transactionReceipt</span> <span class="nl">writeToFile:</span><span class="n">appFile</span> <span class="nl">atomically:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;receipt-data=%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">transaction</span><span class="p">.</span><span class="n">transactionReceipt</span> <span class="n">base64EncodedString</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">NSData</span> <span class="o">*</span><span class="n">httpBody</span> <span class="o">=</span> <span class="p">[</span><span class="n">params</span> <span class="nl">dataUsingEncoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">request</span> <span class="nl">setHTTPBody:</span><span class="n">httpBody</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">NSURLConnection</span> <span class="nl">sendAsynchronousRequest:</span><span class="n">request</span> <span class="nl">queue:</span><span class="p">[</span><span class="n">NSOperationQueue</span> <span class="n">mainQueue</span><span class="p">]</span> <span class="nl">completionHandler:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURLResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">,</span> <span class="n">NSData</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSHTTPURLResponse</span> <span class="o">*</span><span class="n">httpResponse</span> <span class="o">=</span> <span class="p">(</span><span class="n">NSHTTPURLResponse</span> <span class="o">*</span><span class="p">)</span><span class="n">response</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">httpResponse</span><span class="p">.</span><span class="n">statusCode</span> <span class="o">==</span> <span class="mi">200</span> <span class="o">||</span> <span class="n">httpResponse</span><span class="p">.</span><span class="n">statusCode</span> <span class="o">==</span> <span class="mi">203</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kt">id</span> <span class="n">receipt</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSJSONSerialization</span> <span class="nl">JSONObjectWithData:</span><span class="n">data</span>
</span><span class='line'>                                                         <span class="nl">options:</span><span class="mi">0</span>
</span><span class='line'>                                                           <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Received receipt: %@&quot;</span><span class="p">,</span> <span class="n">receipt</span><span class="p">);</span>
</span><span class='line'>            <span class="p">[[</span><span class="n">SKPaymentQueue</span> <span class="n">defaultQueue</span><span class="p">]</span> <span class="nl">finishTransaction:</span> <span class="n">transaction</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Body: %@&quot;</span><span class="p">,</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithData:</span><span class="n">data</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">]);</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;ERROR: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>En el ejemplo de nuestra aplicación realizamos primero la verificación desde nuestra aplicación y posteriormente nos aseguramos repitiendo la verificación en nuestro servidor. Quizá sería más práctico hacerlo al revés: primero en nuestro servidor y si, por algún motivo, no hemos podido realizar la verificación hacerla desde nuestra aplicación como segunda opción.</p>

<p>Ah, podemos dormir tranquilos. La verificación desde nuestro servidor deja registro para que podamos hacernos una idea del volumen de nuestras compras&#8230; y a lo mejor sorprender a algún tunante:</p>

<p><img src="http://javimoreno.me/images/photos/2013/helios-panel-admin.png"></p>

<p>A partir de aquí, si la compra ha sido correcta, podemos insertar el registro en nuestra base de datos que le informa a la aplicación que la compra ha sido registrada con éxito. En el ejemplo de Rafa, en este momento habría que descargar la canción.</p>

<p>Por esta vez nada más, si habéis leído los anteriores notaréis que esta vez estoy más entusiasmado con la funcionalidad de Helios. No me he pegado mucho con StoreKit, tan solo con la versión pro de una aplicación, pero la verdad es que ahora si que tengo claro que usaré CargoBay y con toda seguridad haré la verificación en servidor con Venice&#8230; aunque haya que tocar algo el código base.</p>

<blockquote><p>Ojito con las dependencias. No se que versión de Helios, CargoBay y AFNetworking estaréis utilizando pero se nota que estos frameworks se están tocando bastante estos días. Yo he tenido algún problemita que otro a la hora de preparar esta entrada. Nada que un par de horas de cabezazos en la pared no solucionen&#8230; ;-)</p></blockquote>
]]></content>
		
	</entry>
  
	<entry>
	  
		<title type="html"><![CDATA[Mamá, salgo en un podcast!]]></title>
		<link href="http://javimoreno.me/blog/2013/05/21/mama-salgo-en-un-podcast/"/>
		
	  <updated>2013-05-21T19:24:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2013/05/21/mama-salgo-en-un-podcast</id>
	  
	  <content type="html"><![CDATA[<p>Aunque el COBOL no esté dentro de la temática habitual de este blog, si habéis leido mi entrada sobre mis diez años como programador, sabréis que los proyectos a los que me dedico durante el día tienen a ese <em>maravilloso</em> lenguaje como base para el desarrollo. Por este motivo, cada vez que se habla de COBOL salto como un resorte y en <a href="https://twitter.com/jmoreno78/statuses/274461772721827840">uno de esos saltos</a>, <a href="http://twitter.com/jablanco">Jose Antonio Blanco</a> cometió la locura de dejarme participar en el podcast <a href="http://wedevelopers.com">We.Developers</a>.    <br/>
Supongo que la audiencia le bajará estrepitosamente. Si queréis echar un vistazo al guión que preparé, es el cuerpo principal de este post.</p>

<!--more-->


<h2>Citas relacionadas con COBOL</h2>

<p>No hay muchas, la verdad. Las mejores son las que hacen un poco de leña con el lenguaje, como la de Dijktstra. Son un <em>poco</em> ofensivas pero la verdad es que son graciosas. Echale un vistazo a estas a ver que te parecen:</p>

<blockquote><p>The use of COBOL cripples the mind; its teaching should, therefore, be regarded as a criminal offence.  <br/>
— Edsger Dijkstra</p>

<p>Cobol has almost no fervent enthusiasts. As a programming tool, it has roughly the sex appeal of a wrench.  <br/>
— Charles Petzold</p>

<p>A computer without COBOL and FORTRAN is like a piece of chocolate cake without ketchup or mustard.  <br/>
— John Krueger</p>

<p>The tree large enough that a stake capable of killing COBOL could be fashioned from its trunk has not yet grown anywhere upon the face of this verdant planet.   <br/>
— Dan Martinez</p></blockquote>

<p>Como puedes ver, las tres primeras son bastante jocosas con el lenguaje&#8230; la última es bastante real y es la que no buscar herir el lenguaje. Vendría a traducirse a algo así como:</p>

<blockquote><p>El árbol lo suficientemente largo como para que una estaca capaz de matar al COBOL pudiera sacarse de su tronco todavía no ha crecido lo suficiente en ningún lugar de este verde planeta.  <br/>
- Dan Martinez</p></blockquote>

<h2>Historia</h2>

<p>A finales de los años 50, con la aparición de las primeras máquinas <em>comerciales</em> los usuarios empazaban a reclamar a los fabricantes una convergencia en los lenguajes de programación ya que por aquel entonces lo habitual era que cada fabricante tuviera su propio lenguaje para comunicarse con sus máquinas.  <br/>
Una comisión formada por fabricantes de ordenadores, usuarios, trabajadores de la Universidad de Pennsylvania y el Departamento de Defensa de los Estados Unidos fue la que, después de tan solo seis meses de trabajo, definió el lenguaje COBOL, siglas de COmmon Bussines Oriented Language. <br/>
Un par de años antes, Grace Hopper había desarrollado FLOW-MATIC, un lenguaje pionero ya que empleaba instrucciones en ingles para comunicarse con la máquina. Precisamente para poder transformar estas instrucciones en lenguaje máquina, Grace Hopper creó el primer compilador. Este lenguaje FLOW-MATIC fue en el que más se basó la comisión por lo que, a modo de atribución, se llama a Grace Hopper la madre de COBOL ya que en realidad no tuvo un papel tan preponderante en la comisión.</p>

<p>Después de la primera definición del lenguaje en el año 59, se realizaron varias revisiones mayores: en el 68, 74, 85 y 2002. La más frecuente suele ser una mejora del año 89 sobre la del 85. La del año 2002 es la que introduce muchos más cambios como orientación a objetos, soporte a mucho más tipos de variables, generación y parseo de XML pero no está muy implementada.</p>

<h2>Características</h2>

<p>La principal característica del COBOL está en su propio nombre: es un lenguaje totalmente orientado a la automatización de procesos de negocio. Quizá ese y no otro sea el principal motivo por el que sigue tan vigente. La mayoría de los lenguajes de programación de los que hablamos hoy en día (C, Java, C++, Objective-C, PHP, Javascript, Python, Ruby, etc) sirven para hacer cualquier tipo de programa. Obviamente están orientados a unas determinadas tecnologías o nichos de mercado: juegos, desarrollo web, drivers, aplicaciones de escritorio, aplicaciones móviles, etc pero no hay ninguno que sirva específicamente para hacer un CRM. COBOL fue diseñado específicamente para dar respuestas a una serie de necesidades que tenían las empresas para automatizar sus procesos. Todos querían un único lenguaje que les permitiera hacer eso, automatizaron sus procesos, procesos que en su mayoría no han cambiado en los últimos 50 o 60 años: emisión de recibos, listados de inventario, contratación de productos, control de actividad de procesos, etc.</p>

<p>Otra característica novedosa para la época era que soportaba nombres de variables y de métodos de hasta 32 caracteres. Por esto se habla a veces de la <em>verbosidad</em> del COBOL. El código es muy legible y casi autodocumentado. Una de las cosas que tuvo muy en cuenta la comisión para el diseño del lenguaje es que un Gerente sin formación técnica pudiera leer el código fuente de un programa y entender que es lo que estaba pasando (luego llego el GOTO y acabo con este sueño dorado). Todos los lenguajes de programación tienen una fuerte influencia de la lengua inglesa pero con pocos tienes la sensación de estar hablando con la máquina como con COBOL: Como programador, escribir i++ y que la variable i aumente su valor en una unidad es una sensación de poder. Para un usuario, leer ADD 1 TO INDEX no deja lugar a dudas.
Eso no quita para que no haya que poner comentarios: la duda que nos surgirá cuando leamos la instrucción anterior en cualquier lenguaje es: ¿por qué cojones aumenta el indice?</p>

<p>Es un lenguaje de tipado débil. Solo hay dos tipos de variables: numéricas y alfanuméricas. Dentro de las numéricas hay bastantes tipos de empaquetamientos: binario, hexadecimal, decimal comprimido, sin comprimir, editados&#8230; un lenguaje dedicado al mundo empresarial tiene que tener una buena gestión de variables numéricas. Es importante destacar que en la definición de la variable se indica explícitamente su longitud, es decir, el número de bytes que necesita. También pueden contruirse arrays.</p>

<p>Las variables pueden agruparse dentro de otras variables (una especie de estructuras de C&#8230; pero solo una especie) identificandose la pertenencia a un grupo mediante la indentación por código de nivel. Un ejemplo sería una cuenta corriente: A nivel 01 estaría la variable CUENTA-CORRIENTE, a nivel 05 tendríamos CODIGO-BANCO, CODIGO-SUCURSAL, PRIMER-DIGITO-CONTROL, SEGUNDO-DIGITO-CONTROL y NUMERO-CUENTA. Si utilizamos numéricos de base decimal solo ocuparíamos 20 bytes, es decir, los 20 bytes estarían divididos en cinco bloques de 4, 4, 1, 1 y 10 bytes.</p>

<pre><code>01  CUENTA-CORRIENTE
    05  CODIGO-BANCO           PIC 9(4).
    05  CODIGO-SUCURSAL        PIC 9(4).
    05  PRIMER-DIGITO-CONTROL  PIC 9.
    05  SEGUNDO-DIGITO-CONTROL PIC 9(1).
    05  NUMERO-CUENTA          PIC 9(10).
</code></pre>

<p>No es necesario definir el tipo y la longitud de la variable de primer nivel. Siempre será alfanumérica y ocupara los mismos bytes que las variables que agrupa. En este caso, si queremos tratarla como numérica tendríamos que redefinirla como numérica. Esto se hace con la instrucción REDEFINES.</p>

<pre><code>01 CUENTA-CORRIENTE-NUMERICA   PIC 9(20).
01 CUENTA-CORRIENTE REDEFINES CUENTA-CORRIENTE-NUMERICA.
</code></pre>

<p>No hay variables de tipo booleano, se construyen mediante niveles especiales de indentación pero en realidad se parecen mas a un <em>enum</em>. La diferencia con los enum es que podemos evaluar variables numéricas y alfanuméricas.</p>

<p>La estructura de un programa COBOL es muy rígida: Consta de cuatro partes aunque no todas son obligatorias:
- Una primera de encabezado (IDENTIFICATION DIVISION), donde se pone el nombre del programa, el autor, las fecha de compilación, etc.
- Una segunda de configuración del entorno (ENVIRONMENT DIVISION), cuando el programa accede a ficheros esta es la sección donde se informan las características de dicho fichero, si en lugar de trabajar con punto como separador decimal se utilizase la coma se indicaría en esta sección.
- Una tercera para los datos (DATA DIVISION) donde se definen todas las variables que va a utilizar el programa, se aporta algo más de información sobre los ficheros que se hubieran definido en la sección anterior, etc.
- Una cuarta para las instrucciones (PROCEDURE DIVISION) que sería lo que actualmente entendemos por programa. Es donde se tira el código.</p>

<p>Además de la rigidez de la secciones, el número de columna donde se escribe también es muy importante: los seis primero caracteres están reservados, el séptimo solo se utiliza para comentar o descomentar el código. Del 8 al 11 están reservados para la identificación de las divisiones y las secciones, los niveles 01 de variables y las definiciones de los ficheros. Esto es lo que se conoce como zona A. De la 12 a la 72 es la zona normal para codificar y se conoce como zona B. De la columna 72 a la 80 tampoco se debe escribir ya que el compilador no va a leer lo que ahí escribamos. Esta estructura procede de la forma original de programa en COBOL. Al principio no había IDE´s si no que se usaban fichas de programación. Estas fichas se introducían en los compiladores y si todo era correcto se generaban las tarjetas perforadas con las que funcionaban los mainframes. Aunque ya no haya tarjetas perforadas y se utilicen IDE´s para la codificación, estas restricciones se mantienen en los compiladores actuales.</p>

<h2>Plataformas y Variantes</h2>

<p>Aunque la plataforma habitual son los Mainframes se pueden encontrar programas para ordenadores personales. En este punto puedo meter la pata porque el entorno que yo conozco es el mainframe. Aunque el lenguaje COBOL es el mismo, a la versión del lenguaje que se utiliza para desarrollar aplicaciones que luego van a correr en sistemas operativos de ordenadores personales se la llama RM-COBOL. Hay empresas actuales que comercializan productos para seguir desarrollando y manteniendo estos programas como MicroFocus.</p>

<p>En entorno mainframe la versión más extendida es la del año 85 revisada en el 89. En algunos lugares se puede encontrar una versión denominada ENTERPRISE que además se actualiza con más frecuencia. Cuando me han hablado de ella, lo que más me han destacado es que permite trabajar con variables numéricas de mayor tamaño por lo que se usa en entidades financieras en las que los importes son muy elevados y existe riesgo de perder cifras significativas.</p>

<p>La versión de 2002 &#8220;oficializa&#8221; algunos desarrollos de terceros existentes que permiten embeber código COBOL en servicios .NET, Java, etc. Yo no he conocido a nadie que haya hecho algo de esto. No se si será más habitual en otros tipos de clientes, en otros países o si será algo menos frecuente como los programas RM-COBOL.</p>

<h3>Entornos de desarrollo</h3>

<p>Aunque se puede programar en cualquier editor de notas. He conocido gente que escribían los programas en Ultra-Edit, otros que lo hacían en SPFPC, un programa MS-DOS con el que se puede escribir un programa, compilarlo, ejecutarlo, etc.</p>

<p>IBM, que es la reina indiscutible en este baile, tiene herramientas de desarrollo COBOL sobre Rational por lo que los programadores de COBOL no tendríamos nada que envidiar a los de Java, aun así, creo que lo más normal si se trabaja en entorno mainframe es usar el IDE que provee el sistema operativo del mainframe o algún otro IDE de terceros que se instale en el mainframe.</p>

<p>El sistema operativo Z/OS, es el que actualmente traen los ainframes de IBM. Este sistema operativo incluye las funcionalidades originales del MVS pero se le ha agregado compatibilidad con UNIX, soporte para espacios de memoria virtual lo que hace que los mainframe no solo sirvan para tener las funciones clásicas. Entre las características que tiene este sistema operativo se encuentra la de traer de serie un entorno de desarrollo en el que crear, compilar y ejecutar programas contra el propio mainframe&#8230; y desde el propio mainframe. Porque no hemos de olvidar que el acceso a este bicharraco se hace siempre desde terminales tontos. En este entorno de desarrollo, cada usuario puede tener su configuración,&#8230; el sistema operativo es multiusuario y multitarea. Yo puedo conectarme en mi pc de Madrid al Host de mi empresa, desde un portátil en el AVE Madrid-Barcelona, en el equipo de un compañero en la oficina de Barcelona&#8230; y si lo hago con mi usuario y contraseña siempre estaré viendo mi configuración, mis programas, mis librerías y mis permisos. Esto es así desde los años 70&#8230; ¿Cuantos años lleva Linode ofreciendo estas ventajas a los desarrolladores? Si, no se puede comparar lo que puede desarrollarse en un mainframe con lo que podemos hacer desde una virtualización de Linode pero la reflexión que yo siempre me hago es que los ciclos también llegan a la tecnología.</p>

<p>Como en cualquier otro lenguaje, COBOL no sería nada si no fuera por otras tecnologías que están a su alrededor. Igual que PHP casi siempre va acompañado de MySQL y de un servidor Apache, el COBOL siempre va rodeado de una serie de términos (tecnologías) que suelen verse en ofertas de empleo. Se suelen buscar expertos en COBOL-CICS-DB2 con conocimientos de JCL, VSAM, IMS, SORTFD o cosas así. Salvando las distancias y pidiendo perdón de antemano a los compañeros del PHP por las confianzas que me estoy tomando, COBOL-CICS-DB2 es el LAMP, MAMP o WAMP del PHP:</p>

<p>CICS es el nombre del terminal de teleproceso que incluyen los mainframes y que son los que permiten las conexiones on-line al sistema desde cualquier terminal tonto o emulador de terminal tonto. Es también el encargado de servir información a los servicios web (estos ya desarrollados en cualquier lenguaje aunque Java es un habitual) que se conectan al CICS a través de algún Gateway. No requiere unos conocimientos adicionales al lenguaje, solo que hay una serie de instrucciones en el lenguaje que solo sirven cuando el programa se va a utilizar en una instalación CICS.</p>

<p>DB2 es una base de datos relacional, igual que MySQL, SQL Server, Oracle, etc. Es un producto de IBM que se puede instalar en distribuido y en mainframe. Al igual que el CICS, el único conocimiento adicional que se requiere es el de saber SQL, ya que es como se accede a la base de datos desde un programa COBOL.</p>

<p>IMS es un gestor de bases de datos jerárquicas, no es lo más actual pero todavía se sigue usando en algún sitio.</p>

<p>VSAM es un sistema de almacenamiento indexado. Aunque también esta muy desfasado, todavía es posible encontrar instalaciones que los usan. Los ficheros de tipo VSAM se usan para hacer la persistencia del DB2 así que para IBM siguen siendo de gran importancia.</p>

<p>JCL es el sistema que se utiliza para ejecutar un proceso Batch. No sirve solo para procesos COBOL sino también para lanzar muchas utilidades que vienen en el Sistema Operativo de los mainframes: utilidades del DB2, procesos de ordenamiento de ficheros planos con SORTFD. Es como un fichero de configuración o mejor, como una plantilla en la que se le dice al sistema operativo el entorno en el que se quiere ejecutar el programa, que programa es el que se va a ejecutar, quien es el usuario que lo lanza para ver si tiene permisos, donde están los ficheros, que estructura tienen, que tamaño se les ha definido, etc. Quizá es a la hora de preparar un JCL cuando mayor es la sensación de estar trabajando con una tecnología con más de 50 años de historia: se habla de fichas, cilindros, pistas, cintas&#8230;</p>

<h2>Para que se usa hoy en día</h2>

<p>Hoy en día el COBOL está presente en multitud de situaciones cotidianas. Casi todos los sistemas bancarios están desarrollados en COBOL: ordenes de transferencia, venta de acciones, de valores, conciliaciones bancarias, procesos de facturación de grandes compañías telefónicas, o de grandes cadenas de supermercados. Aplicaciones completas de gestión de compañías de seguros, procesos de control de centrales eléctricas, aplicaciones de inventario de almacén&#8230; y así hasta el infinito.
Cuando se habla de la longevidad del COBOL no es porque queden muchos procesos antiguos que nadie se atreve a migrar, es que como esos desarrollos no están aislados, se sigue haciendo nuevo desarrollo en esta plataforma.</p>

<p>Quizá no somos conscientes porque la capa de presentación que vemos nosotros es una aplicación de escritorio tipo Windows, o una página web pero el COBOL está ahí, por debajo. Incluso en alguna aplicación de un dispositivo móvil, los datos son extraídos por un programa COBOL.</p>

<p>Si alguien se ha fijado alguna vez en unos ordenadores todo-en-uno que suele haber en El Corte Ingles en los que te buscan si un articulo está agotado o si lo puedes encontrar en otro centro a través de una pantalla negra en la que van tecleando y pulsando las teclas de función para moverse por las pantallas habrá visto un terminal CICS. La agencia de viajes y los seguros de El Corte Ingles también se contratan con un terminal CICS.</p>

<p>Para mal o para bien, procesos muy críticos para compañías que mueven un gran volumen de dinero están desarrollados en COBOL, podrían haberse desarrollado en cualquier otro lenguaje más moderno y con más prestaciones pero se desarrollaron en COBOL. A día de hoy, plantearse una refactorización completa de esos programas a otro lenguaje no solo requiere mucho tiempo si no también una gran valentía, y en realidad hay que plantearse también si compensa el cambio.</p>

<p>Esta claro que IBM tiene bien agarrados a los departamentos de sistemas que tienen un mainframe&#8230; pero también hay que entender que no todas las empresas son como Facebook o Twitter que pueden plantearse un gran cambio de tecnología. Aunque parezca mentira, en esas grandes entidades financieras, compañías telefónicas, cadenas de alimentación hay departamentos de Sistemas que no son muy grandes y que tienen que hacer frente a desarrollos nuevos y a   mantenimientos muy fuertes por lo que no es de extrañar que sigan apostando por conservar esa tecnología. Una tecnología que no está dando ningún problema, por otro lado, ¿hay que cambiarla simplemente porque sea vieja o no haya muchos programadores?</p>

<p>Sobre el número de programadores y su cotización también hay que aclarar algunas cosas. Lo primero es una triste noticia: la cotización de un programador COBOL no está unida a un sueldo alto. Gana como cualquier otro programador experimentado en Java, .Net o lo que sea. Aunque no hay una necesidad tan alta de programadores COBOL como hubo en los años del efecto 2000 o del cambio de la peseta al euro, se siguen haciendo muchos mantenimientos y nuevos desarrollos que requieren programadores COBOL y estoy convencido de que la demanda no disminuirá en los próximos años.</p>

<h2>Futuro</h2>

<p>Hay una frase que se le atribuye a Bill Gates que dice: &#8220;no se que lenguajes de programación habrá en el futuro pero COBOL estará allí&#8221;. Yo estoy totalmente de acuerdo.</p>

<p>Como ya he comentado en el apartado anterior, el COBOL está presente en procesos de vital importancia para empresas que mueven muchísimo dinero y además está presente en los procesos que garantizan que esas empresas sigan ganando dinero. Mientras IBM siga sirviendo Series Z estos procesos habrá que seguir manteniéndolos. Además, a medida que van apareciendo nuevas tecnologías, estas empresas no optan por sustituir los procesos COBOL por procesos codificados en lenguajes más modernos si no que buscan formas para que los procesos COBOL sigan funcionando: es posible enviar un email desde un  JCL, perfectamente podría enviarse un SMS, hacer una notificación PUSH o lo que venga a continuación.</p>

<p>Está claro que el COBOL no se va a utilizar para programar la próxima Red Social, o para hacer el Backend de un whatsapp, pero las empresas que mantienen procesos COBOL también utilizan tecnologías actuales que se han podido integrar así que a medida que sigan apareciendo nuevas tecnologías y estas se puedan seguir integrando, el COBOL seguirá.</p>

<p>A veces aparecen corrientes a favor de la desaparición del COBOL, o que auguran el final de IBM&#8230; hay hueco para todos y lo seguirá habiendo.</p>

<h2>¿Como se puede aprender COBOL?</h2>

<p>Los programadores COBOL son como los Sith, siempre van juntos maestro y aprendiz&#8230; es una tradición oral que va pasando de generación en generación y de la que nunca queda constancia escrita&#8230; o casi.</p>

<p>Ahora más en serio, por hacer caso a Dijkstra, las universidades no enseñan COBOL, tampoco enseñan Objective-C&#8230; las universidades son así.
Yo aprendí a programar en COBOL en una academia, a través de una oferta de trabajo para gente que no tuviera experiencia en programación o muy poca experiencia. No se anuncian tanto como las que te enseñan a programar en Java o a hacer aplicaciones para iOS o Android pero buscando un poco se pueden encontrar. En IBM los tienen pero son bastante caros.
Actualmente, como para cualquier lenguaje, se puede aprender a programar en COBOL a través de internet: habrá que buscar un emulador de un Host, una licencia de MicroFocus y buscar algún tutorial. Si que es cierto que conseguir un mainframe no es algo que pueda hacerse a través de ebay por lo que algunas de las características del lenguaje más relacionadas con esta arquitectura se tendrán que programar en alguna academia buena o directamente en el centro de trabajo.</p>

<h2>Enlaces de interes:</h2>

<p><a href="http://en.wikipedia.org/wiki/COBOL">Su historia, en la wikipedia</a><br/>
<a href="http://alt1040.com/2011/12/historia-de-la-tecnologia-el-lenguaje-cobol">Su historia, en Alt1040</a>  <br/>
<a href="http://www.escobol.com/">Foro de cobol en castellano</a>  <br/>
<a href="http://www.microfocus.com/products/micro-focus-developer/rm-cobol/">Empresa comercializador de RM/COBOL</a>  <br/>
<a href="http://www.carlospinan.com/2012/09/21/iniciando-con-cobol-en-windows-7/">Curiosidad, el blog de alguien que quiere aprender COBOL en 2012</a>  <br/>
<a href="http://pic.dhe.ibm.com/infocenter/pdthelp/v1r1/index.jsp?topic=%2Fcom.ibm.entcobol.doc_4.2%2FPGandLR%2Fpgtitlemvs.htm">La Biblioteca de Alejandría: La documentación de IBM</a>  <br/>
<a href="http://www.codinghorror.com/blog/2009/08/cobol-everywhere-and-nowhere.html">Hasta Jeff Atwood habla de él</a></p>
]]></content>
		
	</entry>
  
	<entry>
	  
		<title type="html"><![CDATA[Sobre Memorión]]></title>
		<link href="http://javimoreno.me/blog/2013/05/17/sobre-memorion/"/>
		
	  <updated>2013-05-17T23:04:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2013/05/17/sobre-memorion</id>
	  
	  <content type="html"><![CDATA[<p>Hablando un día por Twitter, Miguel Díaz Rubio (aka <a href="http://twitter.com/migueldiazrubio">@migueldiazrubio</a>) cometió la imprudencia de animarme a escribir algo en su blog: <a href="http://www.migueldiazrubio.com">www.migueldiazrubio.com</a>. Obviamente le dije que si, el blog de Miguel junto con el de <a href="http://objective-c.es">Objective-C.es</a> son de lo mejorcito que hay ahora mismo en castellano para aprender Objective-C y Cocoa Touch, las herramientas necesarias para hacer aplicaciones iOS y una oportunidad para ayudar a estos <em>máquinas</em> no podía desperdiciarse.</p>

<!--more-->


<p>Hoy se ha publicado en el blog de Miguel <a href="http://www.migueldiazrubio.com/2013/05/17/desarrollo-ios-primeros-pasos-con-uicollectionview-parte-ii/">mi primera colaboración</a> (espero que me deje hacer alguna más), un tutorial sobre como hacer un juego de encontrar las parejas basado en un componente que se presento en iOS 6: UICollectionView. Este era un tutorial que tenía pensado colgar en este blog más pronto o más tarde pero estoy seguro que en el blog de Miguel podrá ser de utilidad a más gente.</p>

<p>No es un ejemplo que se me haya ocurrido sobre la marcha, llevo trabajando a ratos en una aplicación muy parecida a la del tutorial desde hace seis meses. Por esta razón me ha parecido oportuno escribir esta entrada que explica de donde me vino la inspiración.</p>

<p>En diciembre del año pasado mi hija estuvo ingresada un par de días en el hospital (un sustejo del que afortunadamente se recuperó perfectamente). Un par de días en los que jugamos a todos los juegos que había en el hospital más alguno que llevamos de casa. Su favorito era uno con piezas que había que poner boca abajo, e ir dando la vuelta de dos en dos hasta encontrar todas las parejas.  <br/>
Recordé que en la aplicación Phytonista había un ejemplo que consistía precisamente en un juego como este y que usaba los animales del teclado emoji como personajes del juego.</p>

<blockquote><p>Merece mucho la pena ver el código para darse cuenta de la potencia de Python ya que con muy pocas líneas tienes el juego funcionando.</p></blockquote>

<p>El caso es que pensé en si sería mucho más complicado hacerlo en Objective-C, sobre todo el grid de tarjetas y en ese momento caí en la cuenta de que UICollectionView podría ser un buen candidato ya que se alimenta fácilmente con un array y permite definir el tamaño de las celdas,&#8230;</p>

<p>Una vez recuperados del susto, empece a probar si mi idea era cierta y en seguida vi que si, que UICollectionView era genial para hacer este juego. Desde entonces, a ratos, he ido metiéndole funcionalidad para hacer el juego algo más interesante y entretenido. La verdad es que mi hija se lo pone en el iPad sin que yo le diga nada, así que no debe estar muy mal hecho ;-)</p>

<p>Si alguien está interesado en probarlo y no tiene cuenta de desarrollador, que me lo diga, no me vendrá mal tener más beta-tester.</p>

<p>El código fuente podéis verlo <a href="https://github.com/jmoreno/Memorion">aquí</a>.</p>
]]></content>
		
	</entry>
  
	<entry>
	  
		<title type="html"><![CDATA[Helios II. Houston, tenemos un problema.]]></title>
		<link href="http://javimoreno.me/blog/2013/05/02/helios-ii-houston/"/>
		
	  <updated>2013-05-02T03:36:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2013/05/02/helios-ii-houston</id>
	  
	  <content type="html"><![CDATA[<blockquote><p>- Okay, Houston, we&#8217;ve had a problem here.<br/>- This is Houston. Say again, please!<br/>- Uh, Houston, we&#8217;ve had a problem.</p><footer><strong>CAPCOM Apollo XIII</strong> <cite>Jack Swigert - Jack R. Lousma - James a. Lovell.</cite></footer></blockquote>


<p>Aprovechando que Rafa Aguilar (aka <a href="http://twitter.com/rais38">@rais38</a>) ha publicado en <a href="http://objective-c.es">Objective-C.es</a> un par de entradas sobre las notificaciones Push en iOS he decidido aparcar un par de cosillas que me tenían bastante atareado y continuar con el análisis de <a href="http://helios.io">Helios.io</a> que había prometido.</p>

<!--more-->


<p>Yo no me voy a detener a explicar en que consisten las notificaciones Push y que tipos podemos encontrar en iOS ya que Rafa lo ha explicado estupendamente si no que voy a contar como se desarrollaría el ejemplo de la segunda entrada con Ruby en lugar de con PHP. Para ello, usaré Houston, una gema desarrollada por <a href="http://twitter.com/mattt">@mattt</a>. La versión actual de Helios (que tiene unas pocas horas) ya incluye Houston de serie así que Helios y Orbiter nos proporcionan un backend completo para el envío de notificaciones Push.</p>

<p>Os dejo los enlaces a los artículos de Rafa por si los queréis consultar antes de empezar:</p>

<p><a href="http://objective-c.es/envio-de-notificaciones-en-ios-parte-1/">Envío de notificaciones en iOS (Parte 1)</a></p>

<p><a href="http://objective-c.es/envio-de-notificaciones-en-ios-parte-2/">Envío de notificaciones en iOS (Parte 2)</a></p>

<h2>Helios y Orbiter. Preparando el CAPCOM.</h2>

<p>Si habéis seguido las indicaciones del artículo de Objective-C.es, tendréis una aplicación instalada en vuestro dispositivo que vuelca al log de Xcode el token que le devuelven los servidores de Apple para las notificaciones Push.
Helios y Orbiter nos proporcionan un sistema para almacenar esos tokens en un servidor, esto nos será útil cuando queramos enviar notificaciones desde nuestro servidor a los dispositivos que tengamos vinculados a nuestra aplicación. No será necesario pasar siempre el token al servicio si no que podría bastar con usar el <em>alias</em>.</p>

<p>Para ello, nos descargamos Orbiter de GitHub y lo incorporamos a nuestro proyecto o bien usamos CocoaPods, lo que hagamos habitualmente y modificamos el siguiente método del AppDelegate:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didRegisterForRemoteNotificationsWithDeviceToken:</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">deviceToken</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">serverURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://192.168.1.105:3000&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSURLCredential</span> <span class="o">*</span><span class="n">serverCredential</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLCredential</span> <span class="nl">credentialWithUser:</span><span class="s">@&quot;YourUsername&quot;</span> <span class="nl">password:</span><span class="s">@&quot;YourPassword&quot;</span> <span class="nl">persistence:</span><span class="n">NSURLCredentialPersistencePermanent</span><span class="p">];</span>
</span><span class='line'>    <span class="n">Orbiter</span> <span class="o">*</span><span class="n">orbiter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Orbiter</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithBaseURL:</span><span class="n">serverURL</span> <span class="nl">credential:</span><span class="n">serverCredential</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">orbiter</span> <span class="nl">registerDeviceToken:</span><span class="n">deviceToken</span> <span class="nl">withAlias:</span><span class="s">@&quot;ApoloXIII&quot;</span> <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">responseObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Registration Success: %@&quot;</span><span class="p">,</span> <span class="n">responseObject</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Registration Error: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>El servidor que voy a utilizar para almacenar los tokens y enviar las notificaciones es el mismo de la entrada anterior sobre almacenamiento de datos y sincronización. Si recordáis, una de las cosas que hicimos fue poner seguridad por lo que necesitamos pasarle un usuario y una contraseña. Orbiter usa NSURLCredential para estos fines.</p>

<p>Si hemos hecho todo correctamente, al arrancar la aplicación en el dispositivo obtendremos el siguiente resultado:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>2013-05-01 11:07:01.903 CAPCOM<span class="o">[</span>24399:907<span class="o">]</span> Registration Success: <span class="o">{</span>
</span><span class='line'><span class="nv">device</span> <span class="o">=</span>     <span class="o">{</span>
</span><span class='line'>    <span class="nb">alias</span> <span class="o">=</span> ApoloXIII;
</span><span class='line'>    <span class="nv">badge</span> <span class="o">=</span> 0;
</span><span class='line'>    <span class="nv">id</span> <span class="o">=</span> 1;
</span><span class='line'>    <span class="s2">&quot;ip_address&quot;</span> <span class="o">=</span> <span class="s2">&quot;&lt;null&gt;&quot;</span>;
</span><span class='line'>    <span class="nv">language</span> <span class="o">=</span> es;
</span><span class='line'>    <span class="nv">lat</span> <span class="o">=</span> <span class="s2">&quot;&lt;null&gt;&quot;</span>;
</span><span class='line'>    <span class="nv">lng</span> <span class="o">=</span> <span class="s2">&quot;&lt;null&gt;&quot;</span>;
</span><span class='line'>    <span class="nv">locale</span> <span class="o">=</span> <span class="s2">&quot;es_ES&quot;</span>;
</span><span class='line'>    <span class="nv">tags</span> <span class="o">=</span>         <span class="o">(</span>
</span><span class='line'>        <span class="s2">&quot;iPhone OS 6.1.3&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;v1.0&quot;</span>,
</span><span class='line'>        iPhone
</span><span class='line'>    <span class="o">)</span>;
</span><span class='line'>    <span class="nv">timezone</span> <span class="o">=</span> <span class="s2">&quot;Europe/Madrid&quot;</span>;
</span><span class='line'>    <span class="nv">token</span> <span class="o">=</span> 1F0E7706D1A343BF17615051DB944743F18156C52EFF0F8DD43DDA23F156862A;
</span><span class='line'>    <span class="nv">tsv</span> <span class="o">=</span> <span class="s2">&quot;&#39;1f0e7706d1a343bf17615051db944743f18156c52eff0f8dd43dda23f156862a&#39;:1 &#39;apoloxiii&#39;:2 &#39;es&#39;:3,4 &#39;europe/madrid&#39;:5&quot;</span>;
</span><span class='line'>    <span class="o">}</span>;
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Y en el panel de administración de Helios veremos lo siguiente:</p>

<p><img src="http://javimoreno.me/images/photos/2013/admin-helios-tokens.png"></p>

<p>Ahora tenemos que preparar nuestro servidor para que realice el envío de notificaciones Push. Como ya hemos comentado al principio, esta funcionalidad no la traía Helios en su primera versión y nos obligaba a nosotros a incluir y configurar esta gema. Hace pocas horas han actualizado el repositorio de Helios incluyendo la funcionalidad de envío de mensajes mediante Houston. Como el merge en GitHub es tan reciente, la gema que hay en <a href="http://rubygems.org/gems/helios">RubyGems.org</a> todavía no está actualizada así que para poder usarla en nuestro proyecto Rails he tenido que indicar en el <em>gemfile</em> que tome el fuente de GitHub. Al hacerlo de esta forma, las dependencias no son visibles por el Bundler por lo que, para evitar errores, he indicado también que necesitamos la gema <strong>Houston</strong>.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem <span class="s1">&#39;helios&#39;</span>, :git <span class="o">=</span>&gt; <span class="s1">&#39;git://github.com/helios-framework/helios.git&#39;</span>
</span><span class='line'>gem <span class="s1">&#39;houston&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ahora tendremos que guardar el certificado para realizar APS en alguna carpeta de nuestro proyecto y decirle a Helios donde está. Los pasos que hay que seguir para trabajar con los certificados están en el post de Rafa, lo único que haremos diferente es el paso de exportación del certificado, al que le daremos un nombre más <em>comodo</em> para nuestra configuración:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>openssl pkcs12 -in CAPCOMAPNDEV.p12 -out apple_push_notification.pem -nodes -clcerts
</span></code></pre></td></tr></table></div></figure>


<p>El fichero .pem resultante lo dejaremos en la carpeta <em>config</em> de nuestro proyecto (junto al xcdatamodel) y modificaremos la configuración de Helios en nuestro <em>application.rb</em> de la siguiente manera:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Using framework Helios as a middleware for our app</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="ss">Helios</span><span class="p">:</span><span class="ss">:Application</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">service</span> <span class="ss">:data</span><span class="p">,</span> <span class="ss">model</span><span class="p">:</span> <span class="s1">&#39;./config/DealerErgoGo.xcdatamodel&#39;</span>
</span><span class='line'>  <span class="n">service</span> <span class="ss">:push_notification</span><span class="p">,</span> <span class="n">apn_certificate</span><span class="p">:</span> <span class="s1">&#39;.config/apple_push_notification.pem&#39;</span><span class="p">,</span> <span class="n">apn_environment</span><span class="p">:</span> <span class="s1">&#39;development&#39;</span>
</span><span class='line'>  <span class="n">service</span> <span class="ss">:in_app_purchase</span>
</span><span class='line'>  <span class="n">service</span> <span class="ss">:passbook</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Para comprobar que todo está bien configurado, ejecutamos la siguiente instrucción desde el terminal (recordad que nuestro servidor tiene configurado usuario y contraseña):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -X POST --user <span class="s2">&quot;username:password&quot;</span> -d <span class="s1">&#39;payload={&quot;aps&quot;: {&quot;alert&quot;:&quot;Okay, stand by Thirteen, we are looking at it.&quot;,&quot;badge&quot;:&quot;13&quot;,&quot;sound&quot;:&quot;default&quot;}}&#39;</span> http://localhost:3000/message
</span></code></pre></td></tr></table></div></figure>


<p>Listo, parece que ya tenemos comunicación con Houston&#8230; o por lo menos recibimos sus mensajes. ;-)</p>

<p><img src="http://javimoreno.me/images/photos/2013/notificacion-iphone.png" width="320" height="480"></p>

<p>Houston incluye una utilidad de terminal a la que le pasamos un token, la ubicación del certificado y el mensaje que queremos enviar. Esto no verifica que hayamos configurado correctamente ningún servidor, solo que el certificado y el token sean correctos:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apn push <span class="s2">&quot;1F0E7706D1A343BF17615051DB944743F18156C52EFF0F8DD43DDA23F156862A&quot;</span> -c <span class="s2">&quot;config/apple_push_notification.pem&quot;</span> -m <span class="s2">&quot;Okay, stand by Thirteen, we&#39;re looking at it.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Siguientes pasos</h2>

<p>Nuevamente vuelvo a tener sentimientos encontrados. Aunque esta vez he terminado más satisfecho de forma general con los resultados obtenidos de Helios, Orbiter y Houston todavía queda mucho por hacer para tener algo que se parezca mínimamente a lo que nos ofrecen Parse o Urban Airship</p>

<p>Hemos almacenado los tokens en nuestro servidor y hemos sido capaces de enviar notificaciones a nuestro dispositivo desde el terminal. Podríamos realizar el envío de mensajes desde la propia aplicación con un método semejante a este:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">useHoustonServiceWithAlert:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">alert</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://localhost:3000&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">AFHTTPClient</span> <span class="o">*</span><span class="n">httpClient</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AFHTTPClient</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithBaseURL:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">httpClient</span> <span class="nl">setAuthorizationHeaderWithUsername:</span><span class="s">@&quot;GoogleReader&quot;</span> <span class="nl">password:</span><span class="s">@&quot;F0r3v3r&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">payload</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;aps&quot;</span><span class="o">:</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;alert&quot;</span><span class="o">:</span> <span class="n">alert</span><span class="p">,</span> <span class="s">@&quot;sound&quot;</span><span class="o">:</span> <span class="s">@&quot;default&quot;</span><span class="p">}};</span>
</span><span class='line'>    <span class="n">NSData</span> <span class="o">*</span><span class="n">jsonData</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSJSONSerialization</span> <span class="nl">dataWithJSONObject:</span><span class="n">payload</span>
</span><span class='line'>                                                       <span class="nl">options:</span><span class="mi">0</span>
</span><span class='line'>                                                         <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">JSONString</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithBytes:</span><span class="p">[</span><span class="n">jsonData</span> <span class="n">bytes</span><span class="p">]</span> <span class="nl">length:</span><span class="p">[</span><span class="n">jsonData</span> <span class="n">length</span><span class="p">]</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys:</span>
</span><span class='line'>                            <span class="n">JSONString</span><span class="p">,</span> <span class="s">@&quot;payload&quot;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">httpClient</span> <span class="nl">postPath:</span><span class="s">@&quot;/message&quot;</span> <span class="nl">parameters:</span><span class="n">params</span> <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="n">AFHTTPRequestOperation</span> <span class="o">*</span><span class="n">operation</span><span class="p">,</span> <span class="kt">id</span> <span class="n">responseObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span><span class="n">responseStr</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithData:</span><span class="n">responseObject</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Request Successful, response &#39;%@&#39;&quot;</span><span class="p">,</span> <span class="n">responseStr</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">AFHTTPRequestOperation</span> <span class="o">*</span><span class="n">operation</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;[HTTPClient Error]: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pero en realidad este mensaje no se lo estaríamos enviando al Apolo XIII solamente si no a toda la misión Apolo. Si nos atrevemos a mirar el código fuente de Helios, el fichero <a href="https://github.com/helios-framework/helios/blob/master/lib/helios/backend/push-notification.rb"><em>push-notification.rb</em></a> es bastante clarificador: no solo admite el parámetro <em>payload</em>, también admite otro parámetro llamado <em>tokens</em> que es de tipo <em>array</em>. Es decir, si le pasamos un array de tokens el mensaje solo llegará a los dispositivos determinados por esos tokens.</p>

<p>Pero los tokens están almacenados en el servidor, hacemos el registro con Orbiter cada vez que un dispositivo en el que instalamos la aplicación acepta que le enviemos notificaciones Push. ¿Tenemos que descargarnos el listado completo de tokens al dispositivo y filtrar por los <em>alias</em>? Parece que no.</p>

<p>Si nos fijamos en el mismo fuente de antes, donde se define el método get devices, vemos que hay algunos parámetros que se le pueden pasar a dicho método: pages, per_page, limit, offset y q&#8230; los cuatro primeros son, obviamente, para controlar la paginación de los resultados y el quinto parece ser el indicado para hacer una <em>query</em> a la tabla <em>Device</em> pero, ¿qué es <a href="http://www.postgresql.org/docs/9.1/static/textsearch-tables.html"><em>tsquery</em></a>? Pues según la documentación de PostgreSQL es la forma de hacer búsqueda completa de texto dentro de una determinada entidad.</p>

<p>En realidad <em>tsquery</em> devolverá todas las registros en los que aparezca el <strong>lexema</strong> que estamos buscando, esto es, si queremos buscar el token del Apolo XIII haríamos una llamada como la siguiente:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -X GET --user <span class="s2">&quot;GoogleReader:F0r3v3r&quot;</span> http://localhost:3000/devices?q<span class="o">=</span>ApoloXIII
</span></code></pre></td></tr></table></div></figure>


<p>Pero si, por ejemplo, quisiéramos buscar el token del Apolo XI:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -X GET --user <span class="s2">&quot;GoogleReader:F0r3v3r&quot;</span> http://localhost:3000/devices?q<span class="o">=</span>ApoloXI
</span></code></pre></td></tr></table></div></figure>


<p>Recuperariamos los tokens de los Apolos XI, XII, XIII y XIV. Es más, como la búsqueda se hace en todos los campos de la entidad Device, pudiera ser que recuperáramos algún otro registro más. Por ejemplo, si en vez de misiones espaciales utilizáramos como <em>alias</em> los nombres de las lunas de Jupiter. Al buscar el token de <em>Europe</em>, la consulta nos devolvería el token del alias <em>Europe</em> y el de todos los registros de dispositivos con <em>timezone</em> europeo.</p>

<p>Para este caso particular, y viendo el funcionamiento de los servicios de Parse y Urban Airship, sería conveniente ampliar las funcionalidades de push-notification.rb para incluir los alias como parámetro y buscar sus tokens. Además sería conveniente hacer el envío de notificaciones en batch para los casos en los que hubiera muchos tokens. Sería recomendable que las notificaciones se almacenaran en base de datos y que el envío se hiciera en background&#8230; vamos, que esto es un no parar. :-)</p>

<p>Aun con todo el trabajo que queda por hacer, hemos podido ver lo sencillo que es montar un sistema de notificaciones para nuestras aplicaciones iOS. Si solo lo queremos para enviar, de vez en cuando, un mensajero para que nos compren alguna aplicación, con esto tenemos más que suficiente.</p>
]]></content>
		
	</entry>
  
	<entry>
	  
		<title type="html"><![CDATA[Helios I. Guardando datos]]></title>
		<link href="http://javimoreno.me/blog/2013/04/11/helios-i-guardando-datos/"/>
		
	  <updated>2013-04-11T01:26:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2013/04/11/helios-i-guardando-datos</id>
	  
	  <content type="html"><![CDATA[<p>Tal y como anticipe que sucedería, durante estos días he estado probando Helios, el framework de @mattt que nos permite crear un backend para aplicaciones móviles.</p>

<p>Como ya hice un primer análisis del framework en conjunto, ahora me voy a ir centrando en las piezas que lo forman siguiendo el orden, para mi, de mayor a menor importancia. La idea es que en las próximas semanas pueda ir sacando artículos sobre cada una de ellas:</p>

<ol>
<li>Sincronización de datos. Core Data Buildpack + AFIncrementalStore</li>
<li>Notificaciones Push. Rack::Push Notification + Orbiter</li>
<li>In-App Purchases. Venice + Cargo Bay</li>
<li>Passbook. Dubai/Rack::Passbook</li>
</ol>


<p>Sigo teniendo sentimientos encontrados con este framework. Por un lado creo que supone un gran avance ya que simplifica enormemente el desarrollo <em>propietario</em> de una serie de servicios indispensables para una aplicación móvil actual. Por otro lado creo que frameworks de desarrollo web como Ruby on Rails o Sinatra no son mucho más complicados y las posibilidades que ofrecen son infinitamente mayores.</p>

<p>Empezemos&#8230;</p>

<!--more-->


<h2>Sincronización de datos</h2>

<p>Hace algunos meses, Heroku publicó un tutorial en el que mostraba como crear un backend a partir de un proyecto iOS con Core Data. El mismo tutorial proponía realizar la sincronización con AFIncrementalStore, un framework basado en NSIncrmentalStote (una nueva clase no muy conocida) y que usa AFNetworking para las conexiones REST. Según el <a href="http://nshipster.com/nsincrementalstore/">articulo de NSHipster sobre NSIncrementalStore</a> con menos de 300 líneas de código tenemos una sincronización que nos quitará muchos quebraderos de cabeza. &#8220;It just works&#8221;, dice. Unas palabras malditas siempre que se habla de sincronización de datos en la <em>nube</em>.</p>

<p>AFIncrementalStore no funciona bien a día de hoy. ¡Anda! igual que iCloud. He estado varios días intentando hacerlo funcionar pero al final no he conseguido nada. Supongo que es cosa de tiempo ya que hay una enorme comunidad de desarrolladores detrás intentando hacerlo funcionar.</p>

<h2>Backend</h2>

<p>Helios usa Core Data Buildpack para generar el modelo REST al arrancar el servidor. Necesita una base de datos PostgreSQL para funcionar y un poquito de configuración, pero hacerlo andar con una estructura de tablas por detrás es coser y cantar. Ojo con el modelo REST: tendremos todos los endpoints habituales para hacer las operaciones CRUD pero una cosa fundamental como son los filtros, a día de hoy, no están desarrollados y desconozco si lo estarán algún día ya que en el <em>roadmap</em> no se habla de ellos. Si por algún motivo no lo vas a necesitar en tu backend, perfecto, Helios se ajusta al 100% a tu servicio aunque yo creo que lo normal es incluir algún filtro en el <em>endpoint</em>: un campo de ordenación, el número de registros por página, filtrado por usuario. Creo que solo hay algo que se utilice más que la cláusula WHERE en SQL&#8230; el operador AND:</p>

<p>Helios puede usarse solo ya que por dentro es una aplicación hecha en Sinatra pero también pueden integrarse la gema en un proyecto Rails o Sinatra, actuando como middleware. En el repositorio recomiendan que se proteja este middleware con seguridad ya que podrá contener datos de gran sensibilidad.</p>

<p>En este post, aprovecharé para explicar muy brevemente como incluir la gema en un proyecto Rails e incorporar una seguridad HTTP básica.</p>

<p>Mi idea era usar Helios para hacer una especie de Google Reader. AFIncrementalStore me ha desinflado un poco la idea pero sigue siendo la base del backend.  <br/>
Supongo que cada uno seguirá su método; en mi caso, antes de empezar con la aplicación web, lo primero que haremos será crear un proyecto iOS con Core Data donde definiremos el modelo: dos tablas, una para almacenar los feeds a los que estamos suscritos y otra para almacener los elementos descargados de cada feed.</p>

<p>Usaremos el API de Google Reader que se ocupa de descargar los feeds ya que devuelve siempre el mismo resultado, independientemente de que lea de un rss o de un atom. Este API seguro que desaparece el 1 de Julio de 2013 pero de momento nos ayudará a tener una buena copia de seguridad de nuestros blogs favoritos.</p>

<h3>Empezamos a desarrollar.</h3>

<p>Una vez que hemos creado un <em>xcdatamodel</em> en Xcode, lo que hacemos es crear una aplicación Rails que sirva para contener el backend Helios y además nos permita crear todo aquello que no nos proporciente este framework, como por ejemplo la securización del repositorio, las cuentas de usuario, etc.</p>

<p>En el terminal escribiremos lo siguiente:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rails new DealerErgoGo -d postgresql
</span></code></pre></td></tr></table></div></figure>


<p>Directamente trabajaremos con PostgreSQL desde desarrollo por lo que tenemos que tener instalado en nuestro equipo este gestor de base de datos. Mi recomendación es usar Postgres.app, desarrollada por Mattt (que tío) que funciona muy bien y es fácil de instalar (relativamente).</p>

<p>Lo primero que haremos en nuestro proyecto Rails es configurar el acceso a la base de datos, solo cambiamos el usuario y le indicamos el puerto y el host. Creamos las bases de datos y a disfrutar.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake db:create
</span></code></pre></td></tr></table></div></figure>


<p>A continuación incluimos todo lo necesario para usar Helios.</p>

<p>Instalamos la gema y creamos la base de datos</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake db:create
</span></code></pre></td></tr></table></div></figure>


<p>Siguiendo las instrucciones del repositorio, configuramos Helios como un middleware en application.rb. Aprovecharemos para incluir el modelo de datos que hemos creado en la aplicación iOS dentro de la carpeta de configuración de la aplicación Rails. En local no es necesario pero cuando hagamos el despliegue en Heroku, tendremos que subir el modelo junto con la aplicación.</p>

<figure class='code'><figcaption><span>&#8220;fragmento de código en .config/application.rb&#8221;  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Using framework Helios as a middleware for our app</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="ss">Helios</span><span class="p">:</span><span class="ss">:Application</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">service</span> <span class="ss">:data</span><span class="p">,</span> <span class="ss">model</span><span class="p">:</span> <span class="s1">&#39;./config/DealerErgoGo.xcdatamodel&#39;</span>
</span><span class='line'>      <span class="n">service</span> <span class="ss">:push_notification</span>
</span><span class='line'>      <span class="n">service</span> <span class="ss">:in_app_purchase</span>
</span><span class='line'>      <span class="n">service</span> <span class="ss">:passbook</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Securizamos desarrollo y producción con seguridad HTTP básica</p>

<figure class='code'><figcaption><span>&#8220;fragmento de código en .config/environments/development.rb y .config/environments/production.rb&#8221;  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Autenticación HTTP Básica para no dejar al descubierto los datos de la aplicación</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">insert_after</span><span class="p">(</span><span class="o">::</span><span class="ss">Rack</span><span class="p">:</span><span class="ss">:Lock</span><span class="p">,</span> <span class="s2">&quot;::Rack::Auth::Basic&quot;</span><span class="p">,</span> <span class="s2">&quot;Who R&#39; U?&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">u</span><span class="p">,</span> <span class="nb">p</span><span class="o">|</span>
</span><span class='line'>    <span class="n">u</span> <span class="o">==</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;USERNAME&quot;</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">p</span> <span class="o">==</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;PASSWORD&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cargamos las variables de entorno de nuestro fichero</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Load the environment variables at beginning</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">before_configuration</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">env_file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="s1">&#39;config&#39;</span><span class="p">,</span> <span class="s1">&#39;local_env.yml&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="no">YAML</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">env_file</span><span class="p">))</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>    <span class="no">ENV</span><span class="o">[</span><span class="n">key</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">end</span> <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">env_file</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Para terminar, cambiamos el adaptador de postgresql a postgres porque sequel, una dependencia que trae Helios, lo usa. Debido a esto es muy importante configurar y crear la base de datos antes de introducir Helios en la aplicación ya que de lo contrario entraremos en un bucle infinito de cambio de adapatores. También cambiamos el usuario de la base de datos ya que, por defecto, PostgreSQL solo tendrá nuestro usuario local.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">development</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">adapter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">postgres</span>
</span><span class='line'>   <span class="err"> </span><span class="l-Scalar-Plain">encoding</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">unicode</span>
</span><span class='line'>   <span class="err"> </span><span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">DealerErgoGo_development</span>
</span><span class='line'>   <span class="err"> </span><span class="l-Scalar-Plain">pool</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">javi</span>
</span><span class='line'>   <span class="err"> </span><span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5432</span>
</span></code></pre></td></tr></table></div></figure>


<p>Y con esto ya tendríamos listo el backend. Podríamos probarlo en nuestra máquina local o desplegar directamente en Heroku. Para ello solo hay que tener <a href="https://toolbelt.heroku.com">Heroku toolbelt</a> instalado, haber hecho commit de todos los cambios en la rama y principal y desde la carpeta del proyecto en el terminal escribir lo siguiente:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>heroku create
</span></code></pre></td></tr></table></div></figure>


<p>Para crear la aplicación y</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git push heroku master
</span></code></pre></td></tr></table></div></figure>


<p>Para desplegar la aplicación en Heroku. Listo, ya podemos disfrutar de nuestras 750 horas gratuitas al mes.</p>

<h3>La decepción</h3>

<p>Nos las prometíamos muy felices. El desarrollo y puesta en producción del backend había sido tan sencillo que confiábamos en que la creación de la aplicación iOS fuera igual y en realidad, esto no ha sido así.</p>

<p>Para desarrollar la aplicación vamos a seguir <a href="https://devcenter.heroku.com/articles/ios-core-data-buildpack-app">este tutorial de la web de Heroku</a>. Aparentemente no es muy complicado y de hecho no lo es, el problema es que cuando hayamos seguido todos los pasos y tengamos la aplicación lista para envíar datos a nuestro flamante servidor veremos que la grabación la hace bien pero el retorno de la información no y nuestra aplicación empieza a fallar. Llevo toda la semana leyendo las <em>issues</em> del repositorio y buscando en Stackoverflow a ver si doy con el correcto funcionamiento pero hasta ahora no he conseguido nada. Creo que es algo que se me ha pasado por alto en algún punto ya que es demasiado evidente que no está funcionando como para que no haya ninguna queja al respecto. En cualquier caso, yo mismo pondré un <em>issue</em> a ver si me pueden echar una mano.</p>

<h2>Conclusiones</h2>

<p>Si tu aplicación necesita de subir los datos a un servidor o simplemente leer unos datos sencillos: datos del tiempo, noticias, entradas de un blog, radares móviles,&#8230; Helios te puede ser de una gran ayuda. No recomiendo que uses AFIncrementalStore si no que, de momento, sería mejor que te hicieras tu propia sincronización con Core Data.</p>

<p>Si ves que Helios se te empieza a quedar pequeño porque necesitas filtrar los datos en el servidor y no en la propia aplicación, no tengas miedo a dar el paso a Ruby on Rails. Llevará un poco más de trabajo pero no mucho más y eso ya si que es dar un salto cualitativo en la creación de tu propio backend ya que tendrás mucho más control sobre el mismo.</p>
]]></content>
		
	</entry>
  
	<entry>
	  
		<title type="html"><![CDATA[Helios: el sol Vs. la 'iNube']]></title>
		<link href="http://javimoreno.me/blog/2013/04/04/helios-el-sol-vs-la-inube/"/>
		
	  <updated>2013-04-04T02:31:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2013/04/04/helios-el-sol-vs-la-inube</id>
	  
	  <content type="html"><![CDATA[<blockquote><p>There&#8217;s a lady who&#8217;s sure all that glitters is gold<br/>And she&#8217;s buying a stairway to heaven.</p><footer><strong>Led Zeppelin</strong> <cite>Stairway to Heaven.</cite></footer></blockquote>


<p>Son tiempos convulsos para la sincronización de datos entre aplicaciones. Si seguís al mismo tipo de personas que yo en Twitter habréis visto como el nivel de indignación con iCloud por la sincronización por Core Data ha llegado a niveles casi de disturbios. <a href="http://rms2.tumblr.com/post/46505165521/the-gathering-storm-our-travails-with-icloud-sync">Este post</a> de los desarrolladores de Yojimbo es un buen resumen.
Para echar un poco más de leña al fuego, Brent Simmons escribía <a href="http://t.co/U6NFNTDjDR">Why Developers Shouldn’t Use iCloud Syncing, Even If It Worked</a> unos días después.</p>

<!--more-->


<p>Mattt Thompson aprovechó el <em>April Fools´ Day</em> para poner una pizca de humor en el asunto dedicando un <a href="http://nshipster.com/icloud/">NSHipster a iCloud</a>.</p>

<p>La sorpresa llegó cuando el día siguiente aparecieron estos dos tweets casi seguidos:</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p>Helios is an open-source framework that provides essential backend services for iOS apps.&#10;&#10;<a href="http://t.co/GVlV0qF7Ov">http://t.co/GVlV0qF7Ov</a></p>&mdash; Mattt Thompson (@mattt) <a href="https://twitter.com/mattt/statuses/319144081731227649">April 2, 2013</a></blockquote>
<script async src="http://javimoreno.me//platform.twitter.com/widgets.js" charset="utf-8"></script></div>




<div class='embed tweet'><blockquote class="twitter-tweet" lang="es"><p>If you had a laugh at yesterday&#8217;s post about iCloud, you may be interested in this new project: <a href="http://t.co/wNUIHsRMDv" title="http://helios.io">helios.io</a></p>&mdash; NSHipster (@NSHipster) <a href="https://twitter.com/NSHipster/status/319144640592896000">2 de abril de 2013</a></blockquote>
<script async src="http://javimoreno.me//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>A estas alturas creo que no hay que presentar a Mattt Thompson, famoso co-creador de AFNetworking, pero igual si que hay que volver a repasar algunas de las cosas que ha estado haciendo en los últimos tiempos, desde que abandono Gowalla para entrar a formar parte del equipo de Heroku como Director del área de Mobile:</p>

<ul>
<li>AFNetworking se ha consolidado como el framework de facto para realizar cualquier comunicación con servidores, descarga y subida de ficheros, etc.</li>
<li>Basándose en AFNetworking ha creado AFIncrementalStore, que junto con el servicio Heroku Mobile permite hacer persistencia de Core Data en servidores de forma correcta&#8230; ¿dardo envenenado a iCloud?</li>
</ul>


<p>Los dos trabajos anteriores son bastante conocidos pero también tienen buena reputación los siguientes:</p>

<ul>
<li>Cargo Bay es una pequeña librería para realizar la verificación de las transacciones realizadas por In-App-Purchases.</li>
<li>Orbiter es otra pequeña librería que facilita el control de los dispositivos vinculados a notificaciones para poder usar servicios push de terceros como Urban Airship o Parse sin tener que instalar los SDK´s correspondientes.</li>
<li>Rack::PushNotification es un webservice para realizar las notificaciones push desde nuestros propios servidores.</li>
</ul>


<p>Podríamos seguir y seguir con otras muchas pequeñas y grandes utilidades creadas por Mattt: Postgres.app (una cliente standalone para instalar PostgreSQL en el Mac), Induction.app (un cliente de bases de datos también para Mac),&#8230; pero creo que esta es una buena representación.</p>

<p>Aparte de los IaaS, PaaS y los SaaS, últimamente empiezan a sonar mucho los BaaS (Backend as a Service) como Parse, Urban Airship, Apigee, Azure o BackBeam.io (que es un desarrollo español, mañico para más señas). Las ventajas de estos Baas son claras, nos permiten disfrutar de una infraestructura necesaria por la mayoría de las aplicaciones móviles sin tener que desarrollar nada. Normalmente, además, tienen una tarifa de entrada que suele ser gratuita en la mayoría de los casos. Una vez que superas ese consumo gratuito, empiezas a pagar. Si has diseñado un buen plan de negocio para tu aplicación, lo normal es que cuando llegues al punto de tener que pagar por usar el Baas ya tengas bastantes ingresos y por tanto te siga compensando seguir utilizándolo.</p>

<p>Heroku, la empresa donde trabaja Mattt es un Paas (Platform as a Service), lo que ofrece es una plataforma donde es muy sencillo desplegar una aplicación. Es decir, el backend lo desarrollamos nosotros y ellos a cambio nos dan facilidades para el despliegue, garantías de escalabilidad y nos liberan del mantenimiento de las máquinas en sí.  <br/>
Pero si a Heroku le sumamos los desarrollos que ha estado realizando Mattt: un backend para nuestras bases de datos, un backend para los dispositivos que requieren de notificaciones push, le añadimos un servicio para realizar la validación de los IAP en el servidor y un servicio para generar Passbooks (que empiezan a estar de moda) tenemos casi nuestro propio Parse. Además, no es necesario un SDK para la parte cliente, Mattt ya tiene un montón de librerías que se encargan de esto: AFNetworking, AFIncrementalStore, Cargo Bay, Orbiter,&#8230;</p>

<p>Helios no es un sustituto de Parse, Urban Airship, TestFlight, Flurry&#8230; todavía, pero tiempo al tiempo.  <br/>
Con Parse tenemos cubierto prácticamente todo lo que se le puede pedir a un backend: persistencia, cuentas de usuario, notificaciones push, servicios de geolocalización. Urban Airship está especializado en notificaciones push, geolocalización y passbook. Flurry tiene métricas de uso y control de errores. Testflight tiene distribución de betas, control de uso y gestión de errores. Crashlitycs solo gestión de errores. New Relic se mete ahora con monitores de servicios.
Si se nos va la mano, terminamos haciendo una aplicación del tiempo con 17 SDK´s diferentes instalados. La idea de Heroku me parece brillante, yo te pongo el hosting y un backend superpersonalizable. Además te doy clientes modulares para lo que quieras usar. Eres libre de usar tu propio servidor pero que sepas que en Heroku es tan sencillo como escribir &#8220;git push heroku master&#8221; y cuando llegue el momento de pagar, pagarás. No es oro todo lo que reluce ya que pasamos de depender de una caja negra como Parse a un conjunto de servicios desarrollados por una única empresa pero al menos esos servicios son <em>open source</em>, podemos ver el código cuando queramos y depender solo de nosostros mismos.</p>

<p>Ya os digo que a Helios le queda mucho camino por andar, pero tiene muy buena pinta. Estoy haciendo pruebas con él y quiero ver si es fácil de superar las dos principales carencias que le veo ahora mismo: la gestión de usuarios y las notificaciones push sin recurrir a servicios de terceros. También quiero saber si su uso en Heroku implica directamente coste o si, por el contrario, podemos probarlo de forma gratuita con bastante margen&#8230; creo que Helios va a ser un <em>habitual</em> en mis próximos posts&#8230; Stay tuned!</p>
]]></content>
		
	</entry>
  
	<entry>
	  
		<title type="html"><![CDATA[Una decada]]></title>
		<link href="http://javimoreno.me/blog/2013/03/31/una-decada/"/>
		
	  <updated>2013-03-31T01:18:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2013/03/31/una-decada</id>
	  
	  <content type="html"><![CDATA[<blockquote><p>Puede que no haya ido a donde quería ir, pero creo que he terminado donde tenía que estar.</p><footer><strong>Douglas Adams.</strong></footer></blockquote>


<p>Hoy hace diez años que entré a trabajar como programador en una empresa de consultoría. Para algunos serán muchos, para otros serán pocos, para mi es una cantidad muy significativa que me permite echar la vista atrás y reflexionar sobre como han cambiado las cosas desde entonces.</p>

<!--more-->


<p>Yo no iba a ser programador. Estudié (y no me arrepiento) Química porque me gustaba muchísimo e incluso tuve la suerte de trabajar de becario en la Facultad de Químicas durante un año y en Repsol durante seis meses. La historia comienza en segundo de carrera, cuando compre mi primer ordenador, un clónico con Windows 95 original (puedo demostrarlo con fotos) con el que empece a utilizar <a href="http://www.softwarecientifico.com/paginas/origin.htm">Origin</a>, <a href="http://www.hyper.com">Hyperchem</a>, <a href="http://www.mathworks.es/products/matlab/">Matlab</a> y el mítico <a href="http://www.tecnun.es/asignaturas/metmat/Manual_Maple/version5.pdf">Maple V</a>. Creo que esto era a finales del año 1997, para acceder a Internet reservábamos una hora en la sala de informática de la facultad, no había proxy pero una señora de muy mal caracter te abroncaba si buscabas guiones de los Monty Python, la fuente favorita de las paginas web era Times New Roman y usabamos <a href="http://es.wikipedia.org/wiki/AltaVista">Altavista</a> para hacer búsquedas.</p>

<p>Desde el primer momento me sentí muy bien con el ordenador. Tuve la certeza de que si hubiera tenido mi primer ordenador (en realidad era el segundo, el primero fué un Amstrad CPC 464 en los ochenta) en el bachillerato no habría elegido Química como carrera pero aun así continué con mi <em>vocación</em>. Podría haberme especializado en Química Física, una rama de la Química que en aquella época ya tenía un alto contenido computacional: eran unos frikis que usaban linux porque no había que apagarlos nunca y así podían dejar cálculos corriendo durante meses, pero a mi lo que me gustaba era la síntesis de moléculas orgánicas&#8230; que le vamos a hacer.</p>

<p>El caso es que cuando acabé la carrera y me puse a buscar trabajo las opciones eran: comercial, profesor de secundaria y programador. Había más posibilidades de trabajar como investigador en el extranjero pero por aquella época yo ya era un huevón y no quería salir de casa así que empece por la primera opción, comercial. No me llevó mucho tiempo darme cuenta de que aquello no era lo mío y a los cinco meses estaba haciendo un curso de programación en base de datos y echando curriculums en las típicas empresas de consultoría que contrataban a gente sin experiencia en programación (no doy nombres pero seguro que se os ocurren muchas). En las navidades de 2002 me seleccionaron para hacer un curso de COBOL/CICS/DB2, dejé el trabajo de visitador médico y durante un mes y medio estuve aprendiendo las bases para ser un cobolero.</p>

<p>Aunque se decía que había bastante trabajo de programador, las <em>vacas gordas</em> estaban adelgazando. En 2003, la burbuja de las <em>punto com</em> ya había estallado, los grandes proyectos de desarrollo COBOL en España que habían sido el efecto 2000 y la transición de la peseta al euro ya estaban más que acabados, el trío de las Azores se disponía a invadir Irak&#8230; en este escenario tan devastador, sin ninguna experiencia como programador y con un gran sentimiento de intrusismo, ser contratado como Codificador Informático por la importante suma de 10.300€ brutos anuales fue algo maravilloso. &lt;/ironia></p>

<p>Programar me gustaba mucho, tanto, que cuando ya me empezaba a sentir cómodo con COBOL y sus adláteres le empece a hacer ojillos al lenguaje con el que programaban los <em>tíos de al lado</em>, esos que hacían cosas mucho más sofisticadas que nosotros: Java.<br/>
En el año 2003 ya era normal tener internet en casa y aunque en aquella época no había tantos recursos para aprender a programar encontré un tutorial de Sun para aprender Java mientras desarrollabas un <em>diarío de buceo (Dive Log)</em>. Aunque parezca mentira, rebuscando en la web de Oracle todavía se puede encontrar este <a href="http://www.oracle.com/technetwork/topics/newtojava/divelog-140357.html">pecio</a>.   <br/>
Yo no se nadar, y mucho menos bucear por lo que todo apuntaba a receta para un fracaso y así fue. Avancé bastante con la aplicación pero entender los conceptos de orientación a objetos, herencia, clases y demás me costaba mucho.</p>

<p>Quizá fuera culpa mía, por empeñarme en aprender con lo que obtenía de internet en una época en la que no había los recursos para aprender que tenemos ahora, quizá por que no fuí más al grano de lo que quería aprender, quizá porque mis conocimientos de programación no estaban lo suficientemente asentados, el caso es que finalmente se me quitaron las ganas de aprender Java y cualquier otro lenguaje. En el trabajo seguía haciendo programas en COBOL, aprendía mucho de bases de datos, SQL, normalización, diseño de aplicaciones,&#8230; y con eso era suficiente. Aprovechaba mis ratos libres para leer, escuchar música, estar con mi novia, mis amigos y hacer de bajista en un par de grupos. De hecho, pocas personas pueden presumir de haber estado en el Sexto encuentro de asociaciones de Félix Rodríguez de la Fuente y muchos menos pueden presumir de haber tocado en directo allí, en <a href="http://www.iberica2000.org/Es/Articulo.asp?Id=3648">Ruesta, Huesca</a>. Había más músicos que asistentes.</p>

<p>Aunque no dedicaba mi tiempo libre a programar, descubrí MySpace y empece a modificar y mantener el MySpace del grupo en el que estaba. En algo había mejorado internet: era mucho más fácil encontrar recursos que te explicaran como modificar las hojas de estilos de MySpace e incluso había gente que compartía hojas de estilos muy trabajadas de forma desinteresada. Internet había cambiado pero mi talento para el diseño no así que pronto me canse de jugar con MySpace. El friki que había dentro de mi estaba deseando salir pero todavía faltaba algo&#8230; un <em>totem</em>.</p>

<p>El <em>totem</em> llegó en 2009 con forma de iPhone 3G, comprado dos semanas antes de que presentaran el 3GS. Eran otros tiempos, nunca había oído hablar de los ciclos de vida de los productos de Apple. El caso es que yo estaba muy contento con él, lo usaba bastante, probaba apps, hacia fotos, leía el correo, Google Reader y de repente, un día, mientras esperaba al autobús empece a buscar una aplicación para calcular el percentil de un bebé. Buscaba algo sencillo, que permitiese guardar unos pocos datos del recién nacido y, en cada revisión, mostrara la evolución del percentil. No vi nada que me llamara la atención y me dije: &#8220;¿Esto podría hacerlo yo?&#8221;.
Lo comente con un compañero de trabajo y empezamos a investigar: hacía falta un Mac, no sabíamos si se podría virtualizar pero descubrimos que había algo llamado Hackintosh que podría valer. Encontramos la web de desarrolladores de Apple que te daban un filón de documentación sin pagar ni un duro. No había ni un solo tutorial en castellano pero en ingles había ya unas cuantas páginas especializadas que te enseñaban desde cero.</p>

<p>Viéndolo en perspectiva, de lo único que me arrepiento de esa época es de haberle dedicado tanto tiempo al Hackintosh. Yo no tenía mucho tiempo libre con mi hija recién nacida (lo de quitarme horas de sueño no lo había descubierto todavía) y mantener un Hackintosh requiere mucho tiempo. Esas navidades me compre el primer libro de desarrollo de aplicaciones y empece a darle caña por las noches. Lo que más me quemaba (siempre me ha quemado) era conseguir hacer cosas sin terminar de entender del todo lo que estaba pasando. Yo no sabía lo que era la programación orientada a objetos, había leído sobre ella cuando intente aprender .Net y Java pero nunca termine de tenerlo claro. Ahora estaba empeñado en aprender, y tenía que hacerlo con Objective-C.  <br/>
El tiempo iba pasando pero no conseguía producir nada, cada vez iba entendiendo un poco más como funcionaba iPhone OS (así se llamaba entonces) pero no terminaba las aplicaciones (sigo teniendo una larga lista de aplicaciones inacabadas). El problema era que me costaba mucho enfocarme. Había descubierto que podía aprender mucho por mi cuenta, internet estaba plagada de recursos y por fin tenía paciencia (o pasaba más tiempo en casa) para detenerme a leer, madurar, entender. No había hecho ninguna aplicación pero estaba convencido de que algún día necesitaría de servicios web que alimentaran alguna de mis aplicaciones por lo que también tendría que aprender algo de desarrollo web. Ruby on Rails sonaba bastante pero todo el mundo decía que Php era muy fácil y que el hosting era muy barato&#8230; Aprender, aprender, aprender, me estaba obsesionando, y mucho.</p>

<p>Al final si que llegaron las aplicaciones: la primera, una lista de chistes <em>graciosillos</em> para felicitar la Navidad y el año nuevo salió a finales de 2010. No ganó ni para pagar la licencia de desarrollador pero nos enseño mucho sobre la publicidad, los comentarios y la <em>competencia</em>, sobre todo, de la <em><em>competencia</em></em>.
Más tarde, a principios de 2012 salió TasaTuCoche. De esta si que aprendimos bastante más: identificar un nicho, ver que se podía mejorar, probar técnicas de posicionamiento en el App Store, etc. Aquí ya hay necesidad de servicios web por lo que hubo que aprender algo de Php, hostings, redireccionamiento dns, dominios y demás historias. Php está bien, y nos permitió desarrollar el servicio en muy poco tiempo pero aun así hay algo que no me hace sentir cómodo cuando programo en Php, por eso volví a darle a Ruby On Rails.</p>

<p>Y ahí sigo, saltando de iOS a Ruby on Rails, mirando de reojo a Node.js, comprando libros de OSX para cuando pueda, pasar a la pantalla grande, disfrutando de compartir mi tiempo y mi código en GitHub, o en este blog,&#8230;</p>

<p>Diez años para mí son muchos años, se han pasado volando y sobre todo los últimos cuatro me hubiera gustado exprimirlos más. Es muy difícil saber en que se traducirán las horas de sueño que me estoy quitando pero no me pesan nada por que, solo de aprender lo que estoy aprendiendo, ya las doy por bien invertidas y se que marcarán lo que pasará en los próximos diez años. Si estos han sido buenos, los próximos espero que sean la caña.</p>

<h3>Nota:</h3>

<p>Esta entrada la empece a escribir el domingo 31 de Marzo pero hasta hoy 2 de Abril no he podido terminarla.</p>
]]></content>
		
	</entry>
  
	<entry>
	  
		<title type="html"><![CDATA[Variables de entorno en Rails]]></title>
		<link href="http://javimoreno.me/blog/2013/03/25/variables-de-entorno-en-rails/"/>
		
	  <updated>2013-03-25T13:25:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2013/03/25/variables-de-entorno-en-rails</id>
	  
	  <content type="html"><![CDATA[<p>Cuando terminé la primera versión de URLHunter, tenía claro que compartir el código fuente del proyecto era básico. Principalmente por dos razones:   <br/>
Primero, porque que se aprende mucho viendo el código, quizá mas que siguiendo un tutorial.<br/>
Segundo, porque me encantaría que la gente clonara el proyecto, hiciera forks, pull requests y enriqueciera URLHunter con sus aportaciones individuales.</p>

<p>Cuando lo iba a subir a GitHub caí en la cuenta de que los <em>tokens</em>, <em>consumer_keys</em>, etc de Twitter los iba a poder ver cualquiera que echara un vistazo al fichero <em>twitter.rb</em> y no solo eso, si en el futuro decidía incluir un formulario de contacto, integrar New Relic o Google Analytics los usuarios, contraseñas, identificadores únicos serían visibles para todo el mundo. Fue entonces cuando vi la importancia de las <em><em>variables de entorno</em></em> a las que hacían referencia en la documentación de la gema de Twitter.</p>

<!--more-->


<p>El caso es que, por no hacerlo de primeras, para subir el repositorio a GitHub tuve que crear una rama nueva, cambiar los ficheros, asegurarme de que la rama principal nunca se sincronizaría con GitHub, etc. El problema añadido a esto es que todas los cambios que he ido haciendo al proyecto no los he podido sincronizar con la rama GitHub por falta de tiempo (o pereza, según se mire). En fin, que antes de que la cosa se complicará más había que actuar así que buscando un poco en internet he encontrado <a href="http://railsapps.github.com/rails-environment-variables.html">este tutorial</a> que es el que voy a seguir para ocultar la información confidencial del proyecto.</p>

<p>La opción que he decidido desarrollar es la tercera, tiene un poco más de trabajo a la hora de desplegar en Heroku pero no es muy significativo.</p>

<p>Lo primero es crear el fichero <em>local_env.yml</em> e incluirlo en <em>.gitignore</em> para que no lo veáis jamás. ;-)</p>

<figure class='code'><figcaption><span>/config/local_env.yml  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># Rename this file to local_env.yml</span>
</span><span class='line'><span class="c1"># Add account settings and API keys here.</span>
</span><span class='line'><span class="c1"># This file should be listed in .gitignore to keep your settings secret!</span>
</span><span class='line'><span class="c1"># Each entry gets set as a local environment variable.</span>
</span><span class='line'><span class="c1"># This file overrides ENV variables in the Unix shell.</span>
</span><span class='line'><span class="c1"># For example, setting:</span>
</span><span class='line'><span class="c1"># GMAIL_USERNAME: &#39;Your_Gmail_Username&#39;</span>
</span><span class='line'><span class="c1"># makes &#39;Your_Gmail_Username&#39; available as ENV[&quot;GMAIL_USERNAME&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Twitter Variables</span>
</span><span class='line'><span class="l-Scalar-Plain">CONSUMER_KEY</span><span class="p-Indicator">:</span> <span class="s">&#39;Your_Consumer_Key&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">CONSUMER_SECRET</span><span class="p-Indicator">:</span> <span class="s">&#39;Your_Consumer_Secret&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">OAUTH_TOKEN</span><span class="p-Indicator">:</span> <span class="s">&#39;Your_Oauth_Token&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">OAUTH_TOKEN_SECRET</span><span class="p-Indicator">:</span> <span class="s">&#39;Your_Oauth_Token_Secret&#39;</span>
</span><span class='line'><span class="c1"># New Relic Parameters</span>
</span><span class='line'><span class="l-Scalar-Plain">NEW_RELIC_LICENSE_KEY</span><span class="p-Indicator">:</span> <span class="s">&#39;Your_New_Relic_License_Key&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>En el fichero podéis ver como no solo he creado variables de entorno para Twitter si no también para New Relic, eso es porque al margen de los cambios en el estilo de URLHunter, el uso de los Tweets Embeds y algunas mejoras en la cache también he incluido New Relic para monitorizar su comportamiento y buscar formas de mejorar el rendimiento.</p>

<p>Ahora hay que incluir las variables de entorno en los ficheros correspondientes. El fichero de configuración <em>twitter.rb</em> quedará de la siguiente manera:</p>

<figure class='code'><figcaption><span>/config/initializers/twitter.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Twitter</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">consumer_key</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;CONSUMER_KEY&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">consumer_secret</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;CONSUMER_SECRET&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">oauth_token</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;OAUTH_TOKEN&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">oauth_token_secret</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;OAUTH_TOKEN_SECRET&quot;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Y en el fichero de configuración de New Relic lo único que hay que tener en cuenta es que hay usar ruby embebido para nombra la variable de entorno:</p>

<figure class='code'><figcaption><span>/config/newrelic.yml  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'>  <span class="c1"># You must specify the license key associated with your New Relic</span>
</span><span class='line'>  <span class="c1"># account.  This key binds your Agent&#39;s data to your account in the</span>
</span><span class='line'>  <span class="c1"># New Relic service.</span>
</span><span class='line'>  <span class="l-Scalar-Plain">license_key</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;NEW_RELIC_LICENSE_KEY&#39;] %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Cargando las variables de entorno.</h2>

<p>Para que la aplicación cargue las variables de entorno, tendremos que indicarle en el fichero de configuración que lo primero que tiene que hacer, antes que configurar cualquier otro ajuste es cargar las variables de nuestro fichero. Esto lo tendremos que hacer en el fichero <em>application.rb</em>:</p>

<figure class='code'><figcaption><span>/config/application.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="c1"># Load the environment variables at beginning</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">before_configuration</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">env_file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="s1">&#39;config&#39;</span><span class="p">,</span> <span class="s1">&#39;local_env.yml&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="no">YAML</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">env_file</span><span class="p">))</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>        <span class="no">ENV</span><span class="o">[</span><span class="n">key</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>      <span class="k">end</span> <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">env_file</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si hemos hecho todo esto correctamente, al ejecutar la aplicación en local todo debería funcionar perfectamente. El problema nos lo vamos a encontrar cuando despleguemos en Heroku. Heroku se apoya en el fichero git de nuestro proyecto para tomar toda la información. Del mismo modo que el fichero donde hemos incluido las variables de entorno no es visible en el repositorio (GitHub, Bitbucket,&#8230;) tampoco lo es para Heroku por lo que las variables de entorno nunca se cargarán al iniciar la aplicación. Hemos de cargar estas variables de forma manual.</p>

<figure class='code'><figcaption><span>Carga de variables de entorno en Heroku  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>heroku config:add <span class="nv">CONSUMER_KEY</span><span class="o">=</span><span class="s1">&#39;Your_Consumer_Key&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Podemos hacer un fichero bash que ejecutaremos después de hacer el despliegue en heroku. Este script tendría la siguiente estructura:</p>

<figure class='code'><figcaption><span>Script para cargar variables de entorno en Heroku heroku.sh  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku config:add <span class="nv">CONSUMER_KEY</span><span class="o">=</span><span class="s1">&#39;Your_Consumer_Key&#39;</span> <span class="nv">CONSUMER_SECRET</span><span class="o">=</span><span class="s1">&#39;Your_Consumer_Secret&#39;</span> <span class="nv">OAUTH_TOKEN</span><span class="o">=</span><span class="s1">&#39;Your_Oauth_Token&#39;</span> <span class="nv">OAUTH_TOKEN_SECRET</span><span class="o">=</span><span class="s1">&#39;Your_Oauth_Token_Secret&#39;</span> <span class="nv">NEW_RELIC_LICENSE_KEY</span><span class="o">=</span><span class="s1">&#39;Your_New_Relic_License_Key&#39;</span>;
</span><span class='line'>heroku info --app urlhunter-314159;
</span></code></pre></td></tr></table></div></figure>


<p>Y lo ejecutamos escribiendo en el terminal:</p>

<figure class='code'><figcaption><span>Script para cargar variables de entorno en Heroku  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sh heroku.sh
</span></code></pre></td></tr></table></div></figure>


<p>Listo. Ya podemos compartir el código fuente del proyecto sin temor a que nadie pueda hacer uso de nuestras claves de terceros.</p>
]]></content>
		
	</entry>
  
	<entry>
	  
		<title type="html"><![CDATA[Send to kindle para Octopress]]></title>
		<link href="http://javimoreno.me/blog/2013/03/22/send-to-kindle-para-octopress/"/>
		
	  <updated>2013-03-22T00:35:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2013/03/22/send-to-kindle-para-octopress</id>
	  
	  <content type="html"><![CDATA[<p>Cuando escribí la <a href="http://javimoreno.me/blog/2013/03/08/como-mola-octopress/"><em>oda</em> a Octopress</a> comenté que me sentía más comodo con Ruby para tocar diversas partes del código del blog, como por ejemplo los plugins. En esta entrada voy a aprovechar la noticia del botón de <a href="http://www.genbeta.com/web/amazon-lanza-su-boton-para-enviar-contenido-al-kindle-desde-un-sitio-web">enviar a kindle</a> para que veáis lo fácil que es hacer un plugin.</p>

<!--more-->


<p>En primer lugar, vamos a ir a la página de Amazon donde <a href="http://www.amazon.com/gp/sendtokindle/developers/button">configuramos el botón</a> a nuestro gusto y generamos el widget. Según esta página, tendríamos que seguir dos sencillos pasos para poner el botón en nuestra web:</p>

<ol>
<li>Insertar un script antes del cierre de la etiqueta <em>body</em>.</li>
<li>Insertar un trozo de HTML en el lugar donde queremos que aparezca el botón.</li>
</ol>


<p>Lo que nosotros queremos es que el botón aparezca al final de nuestras entradas, junto con los botones de Karmacracy, Twitter, Facebook y Google+. En primer lugar, crearemos una variable <em>send_to_kindle</em> en el fichero _config.yml.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># Send To Kindle Button</span>
</span><span class='line'><span class="l-Scalar-Plain">send_to_kindle</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>De esta forma, podremos elegir poner o no el botón en nuestro blog.</p>

<p>Octopress viene de serie con opciones para compartir en Twitter, Facebook, Google+, etc. El fichero donde están recogidas las diferentes opciones se llama <em>sharing.html</em> y se encuentra en source/_includes/post/sharing.html. En este fichero es donde insertaremos el fragmento HTML del paso 2:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{ % if site.send_to_kindle %}
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;kindleWidget&quot;</span> <span class="na">style=</span><span class="s">&quot;display:inline-block;padding:3px;cursor:pointer;font-size:11px;font-family:Arial;border-radius:3px;border:#ccc thin solid;color:black;background:transparent url(&#39;https://d1xnn692s7u6t6.cloudfront.net/button-gradient.png&#39;) repeat-x;background-size:contain;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;img</span> <span class="na">style=</span><span class="s">&quot;vertical-align:middle;&quot;</span> <span class="na">src=</span><span class="s">&quot;https://d1xnn692s7u6t6.cloudfront.net/black-15.png&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">&quot;vertical-align:middle;margin-left:3px;&quot;</span><span class="nt">&gt;</span>Send to Kindle<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>{ % endif %}
</span></code></pre></td></tr></table></div></figure>


<p>Creo que lo que está pasando aquí es fácil de entender: solo si la variable global <em>send_to_kindle</em> esta configurada como true, se inyectará el fragmento HTML.</p>

<blockquote><p>Una aclaración. El uso de variables, condiciones, etc en Jekyll se realiza encerrando los trozos de código entre llave-porcentaje y porcentaje-llave. En el snippet anterior he escrito { % para que pudierais verlo porque de lo contrario, al generar esta entrada Jekyll habría interpretado que estaba intentando evaluar alguna condición y no lo habría mostrado. Si lo váis a copiar y pegar, acordaros de quitar el espacio entre { y %.</p></blockquote>

<p>Bueno, ya solo nos falta incluir el script al final del body de nuestra página. Ahora vamos a ver lo bien organizado que está todo en Octopress: en la carpeta source/_includes hay un archivo que se llama <em>after_footer.html</em>. Cuando lo editamos vemos que contiene <em>includes</em> de ficheros llamados google_plus_one.html, twitter_sharing.html, etc. Estos ficheros están en la misma carpeta y al abrirlos podemos ver que contienen los scripts necesarios para los botónes de Google+, Twitter, etc.
Vamos a crear un nuevo fichero en esta misma carpeta llamado send_to_kindle.html y en el incluiremos el script que nos indican en Amazon que hay que poner al final del body. Nuevamente, evaluaremos si la variable para incluir el botón está a true:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{ % if site.send_to_kindle %}
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;https://d1xnn692s7u6t6.cloudfront.net/widget.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span><span class="p">(</span><span class="kd">function</span> <span class="nx">k</span><span class="p">(){</span><span class="nb">window</span><span class="p">.</span><span class="nx">$SendToKindle</span><span class="o">&amp;&amp;</span><span class="nb">window</span><span class="p">.</span><span class="nx">$SendToKindle</span><span class="p">.</span><span class="nx">Widget</span><span class="o">?</span><span class="nx">$SendToKindle</span><span class="p">.</span><span class="nx">Widget</span><span class="p">.</span><span class="nx">init</span><span class="p">({})</span><span class="o">:</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="mi">500</span><span class="p">);})();</span><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>{ % endif %}
</span></code></pre></td></tr></table></div></figure>


<p>Y en el archivo <em>after_footer.html</em> incluiremos el nuevo html que acabamos de crear:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{ % include send_to_kindle.html %}
</span></code></pre></td></tr></table></div></figure>


<p>Listo, si ahora generamos y previsualizamos nuestro blog podremos ver un botón al final de cada artículo para enviar el contenido al kindle.</p>

<p>Como véis, todo es muy intuitivo. Con un poco de sentido común y navegando por las carpetas del blog para ver como funcionan los plugins que vienen de serie podemos ir dejando Octopress a nuestro gusto.</p>

<p>Pd: No me gusta como queda el botón, sale más alto de lo que se previsualiza en el sitio de Amazón. Mis conocimientos de css, javascript y html son bastante limitados por lo que no estoy seguro de si es algo que podamos corregir o si por el contrario está así en el widget.js y no podemos hacer nada. Tampoco me gusta que el botón de Karmacracy salga en una linea aparte pero son esas cosas que no he conseguido arreglar. Si vosotros habéis conseguido dejarlo mejor&#8230; decidme como!!!!</p>
]]></content>
		
	</entry>
  
	<entry>
	  
		<title type="html"><![CDATA[Resacón en Heroku]]></title>
		<link href="http://javimoreno.me/blog/2013/03/12/resacon-en-heroku/"/>
		
	  <updated>2013-03-12T02:15:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2013/03/12/resacon-en-heroku</id>
	  
	  <content type="html"><![CDATA[<p>Como era de esperar, el debut de <a href="http://urlhunter-314159.herokuapp.com">URLHunter</a> ha tenido alguna incidencia. <br/>
En un primer momento pensé que todo era provocado por unos cambios de ultima hora que tuve que hacer en los tipos de campo de la entidad <em>Tweetlinks</em> al pasar de SQLite a PostgreSQL pero no, el problema ha sido de programador despistado.</p>

<!--more-->


<p>Este es el método que se encarga de la grabación de los tweets en el modelo. Según el API de Twitter, cada tweet retweeteado estará contenido dentro de otro tweet. El tweet <em>padre</em> siempre pertenecerá al usuario que hace el retweet mientras que la información original estará en el anidado. Esta es la razón por la que al preguntar si el tweet es en realidad un retweet hay que hacer una sustitución del objeto <em>tweet</em>. El problema ha sido que la comprobación de que el tweet_id no existe en la tabla se hacía antes del cambio por lo que, en realidad, el que se terminaba grabando siempre era otro.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">insert_tweet</span><span class="p">(</span><span class="n">tweet</span><span class="p">)</span>
</span><span class='line'> <span class="k">unless</span> <span class="n">exists?</span><span class="p">(</span><span class="n">tweet_id</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>   <span class="k">if</span> <span class="n">tweet</span><span class="o">.</span><span class="n">retweet?</span>
</span><span class='line'>     <span class="n">tweet</span> <span class="o">=</span> <span class="n">tweet</span><span class="o">.</span><span class="n">retweeted_status</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>   <span class="k">if</span> <span class="n">tweet</span><span class="o">.</span><span class="n">urls</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'>     <span class="n">create!</span><span class="p">(</span>
</span><span class='line'>         <span class="n">tweet_id</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">id</span><span class="p">,</span>
</span><span class='line'>         <span class="ss">content</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">text</span><span class="p">,</span>
</span><span class='line'>         <span class="n">screen_name</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">screen_name</span><span class="p">,</span>
</span><span class='line'>         <span class="n">profile_image</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">profile_image_url</span><span class="p">,</span>
</span><span class='line'>         <span class="n">tweet_created_at</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">created_at</span><span class="p">,</span>
</span><span class='line'>     <span class="p">)</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Este sería el código correcto:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">insert_tweet</span><span class="p">(</span><span class="n">tweet</span><span class="p">)</span>
</span><span class='line'> <span class="k">if</span> <span class="n">tweet</span><span class="o">.</span><span class="n">retweet?</span>
</span><span class='line'>   <span class="n">tweet</span> <span class="o">=</span> <span class="n">tweet</span><span class="o">.</span><span class="n">retweeted_status</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'> <span class="k">unless</span> <span class="n">exists?</span><span class="p">(</span><span class="n">tweet_id</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>   <span class="k">if</span> <span class="n">tweet</span><span class="o">.</span><span class="n">urls</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'>     <span class="n">create!</span><span class="p">(</span>
</span><span class='line'>         <span class="n">tweet_id</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">id</span><span class="p">,</span>
</span><span class='line'>         <span class="ss">content</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">text</span><span class="p">,</span>
</span><span class='line'>         <span class="n">screen_name</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">screen_name</span><span class="p">,</span>
</span><span class='line'>         <span class="n">profile_image</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">profile_image_url</span><span class="p">,</span>
</span><span class='line'>         <span class="n">tweet_created_at</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">created_at</span><span class="p">,</span>
</span><span class='line'>     <span class="p">)</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A veces sucede que un error compensa a otro error y esto es lo que ha pasado esta vez. Al incluir la paginación, se me olvido incluir un criterio de ordenación en la query correspondiente. Debido a esto, el orden de presentación era por inserción (ascendente). En la carga inicial se recuperan 200 tweets pero se empiezan a insertar de más reciente a más antiguo. Posteriormente, cada llamada a la página recupera los nuevos tweets y si corresponde insertarlos los inserta.   <br/>
A lo largo de la mañana se podía ver como el número de páginas iba subiendo de seis hasta once que es a lo que ha llegado hasta que he podido hacer un pequeño arreglo en Heroku. Básicamente las cinco nuevas páginas contenían el mismo tweet, en concreto el RT de mi tweet de presentación&#8230; vamos un debut lamentable ;-)</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">home</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@tweetlinks</span> <span class="o">=</span> <span class="no">Tweetlink</span><span class="o">.</span><span class="n">paginate</span><span class="p">(</span><span class="ss">page</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@tweetlinks</span><span class="o">.</span><span class="n">empty?</span> <span class="p">?</span> <span class="no">Tweetlink</span><span class="o">.</span><span class="n">first_time</span> <span class="p">:</span> <span class="no">Tweetlink</span><span class="o">.</span><span class="n">pull_tweets</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="c1"># index.html.erb</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@tweetlinks</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Este sería la forma correcta:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">home</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@tweetlinks</span> <span class="o">=</span> <span class="no">Tweetlink</span><span class="o">.</span><span class="n">paginate</span><span class="p">(</span><span class="ss">page</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s1">&#39;tweet_id DESC&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@tweetlinks</span><span class="o">.</span><span class="n">empty?</span> <span class="p">?</span> <span class="no">Tweetlink</span><span class="o">.</span><span class="n">first_time</span> <span class="p">:</span> <span class="no">Tweetlink</span><span class="o">.</span><span class="n">pull_tweets</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="c1"># index.html.erb</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@tweetlinks</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>¿Cómo lo he podido arreglar sin tocar el código?</h2>

<p>Una vez identificado el problema, y viendo que los amigos de <a href="http://twitter.com/ObjectiveC_es">@ObjectiveC_es</a> habían tweeteado algún enlace más lo único que había que hacer era hacer un rollback de la base de datos, borrarla completamente y volverla a crear. La primera carga de la base de datos recuperaría hasta un tweet normal y mientras no hicieran otro retweet de un enlace no se volvería a producir el problema.</p>

<p>Por los pelos, la próxima vez seré más prudente y hare una beta. :-)</p>
]]></content>
		
	</entry>
  
	<entry>
	  
		<title type="html"><![CDATA[Como se hizo URLHunter]]></title>
		<link href="http://javimoreno.me/blog/2013/03/11/como-se-hizo-urlhunter/"/>
		
	  <updated>2013-03-11T02:43:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2013/03/11/como-se-hizo-urlhunter</id>
	  
	  <content type="html"><![CDATA[<p>Vamos a demostrar que no hace falta ser un figura para hacer algo muy util y aparente. Vaya por delante que, si somos capaces de hacer esto es porque existen páginas como las de <a href="http://railscasts.com" title="Railscasts">Railscasts</a>.<br/>
Lo primero que hacemos después de crear nuestro nuevo proyecto Rails es instalar las gemas necesarias para trabajar con Twitter Bootstrap, del que somos fans.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;therubyracer&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;less-rails&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;twitter-bootstrap-rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>Después de cargar las gemas en nuestro proyecto con Bundle Install, terminamos de instalar Bootstrap en nuestro proyecto con la siguiente instrucción:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="n">g</span> <span class="ss">bootstrap</span><span class="p">:</span><span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>El propósito de nuestra aplicación es mostrar un listado de los tweets de <a href="http://twitter.com/objectivec_es" title="@ObjectiveC_es">@objectivec_es</a> que contienen una url. De esta forma tendremos agrupados en una web toda esa información tan interesante que van soltando a nuestro timeline y que muchas veces perdemos por no hacer un favorito a tiempo. Dicho esto, de primeras lo que vamos a necesitar es una página en la que mostraremos información procedente del API de Twitter.</p>

<p>Creamos un controlador para las páginas de contenido estático:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="n">g</span> <span class="n">controller</span> <span class="no">StaticPages</span> <span class="n">home</span> <span class="n">help</span>
</span></code></pre></td></tr></table></div></figure>


<p>Y hacemos algunos ajuste en el <em>layout</em> general para empezar a beneficiarnos de Twitter Bootstrap</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>URLHunter<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--[if lt IE 9]&gt;</span>
</span><span class='line'><span class="c">  &lt;script src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="c">  &lt;![endif]--&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>%= stylesheet_link_tag    &quot;application&quot;, :media =&gt; &quot;all&quot; %&gt;
</span><span class='line'>  <span class="err">&lt;</span>%= javascript_include_tag &quot;application&quot; %&gt;
</span><span class='line'>  <span class="err">&lt;</span>%= csrf_meta_tags %&gt;
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;span9&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= yield %&gt;<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;span3&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h2&gt;</span>¿Por qué?<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>Porque alguien tenía que hacerlo. Si no, Twitter volvería a cambiar su API para eliminar la funcionalidad de favoritos.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Accediendo al API de Twitter</h2>

<p>Para recuperar el timelime de nuestra &#8220;presa&#8221; podemos desarrollar las llamadas que necesitemos o utilizar la gema &#8220;Twitter&#8221;. Siguiendo la filosfía DRY y como hay otras cosas mucho mejores que hacer, nosotros nos decantamos por la gema.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;twitter&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Antiguamente ya podríamos hacer algunas pruebas con la consola pero en los tiempos que corren hay que autenticarse. Para ello, siguiendo la documentación de la gema, hay que crear un fichero de inicialización en /config/initializers llamado twitter.rb:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Twitter</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">consumer_key</span> <span class="o">=</span> <span class="no">YOUR_CONSUMER_KEY</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">consumer_secret</span> <span class="o">=</span> <span class="no">YOUR_CONSUMER_SECRET</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">oauth_token</span> <span class="o">=</span> <span class="no">YOUR_OAUTH_TOKEN</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">oauth_token_secret</span> <span class="o">=</span> <span class="no">YOUR_OAUTH_TOKEN_SECRET</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Una vez hayamos reemplazado los valores aplantillados con los que podemos encontrar en la sección de &#8220;Mis applicaciones&#8221; de la web de desarrolladores de Twitter ya estaremos en condiciones de empezar a consumir datos de Twitter.</p>

<p>Inicialmente, vamos a probar que tal funciona todo incluyendo lo siguiente en el home.html.erb:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>Todos los links de @objectivec_es<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;tweets-with-links&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% Twitter.user_timeline(&quot;objectivec_es&quot;, :count =&gt; 10, :exclude_replies =&gt; true).each do |tweet| %&gt;
</span><span class='line'>    <span class="nt">&lt;blockquote&gt;</span> <span class="err">&lt;</span>%= tweet.text %&gt; <span class="nt">&lt;/blockquote&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% end %&gt;
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>¿Igualito que en iOS, eh? Bueno, cada uno tiene sus virtudes. En cualquier caso, aunque hemos obtenido rapidos resultados no podemos decir que sean <em>bonitos</em>. Lo suyo sería que los hashtags, las menciones y los links tuvieran los vinculos correspondientes. Para eso vamos a utilizar otra gema.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem <span class="s1">&#39;twitter-text&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Según la documentación de la gema, para <em>autolinkar</em> las entidades lo único que tenemos que hacer es lo siguiente:</p>

<p>A <em>app/helpers/application_helper.rb</em> lo dejaremos de esta forma</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ApplicationHelper</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Twitter</span><span class="p">:</span><span class="ss">:Autolink</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Y en <em>home.html.erb</em> cambiaremos el contenido de la cita por lo siguiente:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;blockquote&gt;</span> <span class="nt">&lt;p&gt;</span><span class="err">&lt;</span>%= auto_link(tweetlink.content).html_safe %&gt;<span class="nt">&lt;/p&gt;</span> <span class="nt">&lt;/blockquote&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Es necesario poner html_safe al final para que Rails interprete que le estamos pasando un texto que contiene etiquetas HTML, si no lo hicieramos las etiquetas se pintarían como si fuera texto plano.</p></blockquote>

<p>Si recargamos ahora la página veremos todos los tweets con enlaces a los usuarios mencionados, a los hasgtags&#8230; Como diría Duke Nukem: &#8220;Ah!, much better!!!&#8221;</p>

<p>Lo siguiente que vamos a hacer es almacenar los tweets en base de datos. ¿Por qué?, pues por varios motivos:</p>

<ul>
<li>No queremos perder ni una sola de estas píldoras de información</li>
<li>Ahora no son muchos pero cuando los chicos de <a href="http://twitter.com/objectivec_es" title="@ObjectiveC_es">@ObjectiveC_es</a> vayan por los 3000 tweets esta web tardará bastante más en cargar</li>
<li>En esta vida, no eres nadie si no haces un poco de persistencia.</li>
</ul>


<p>Así que crearemos un modelo para almacenar algunos datos. Inicialmente será muy sencillo, ya lo complicaremos más adelante:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g model tweetlink tweet_id screen_name content:text profile_image tweet_created_at
</span></code></pre></td></tr></table></div></figure>


<p>e incluiremos algunos métodos de conveniencia en la nueva clase:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Tweetlink</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:content</span><span class="p">,</span> <span class="ss">:screen_name</span><span class="p">,</span> <span class="ss">:tweet_id</span><span class="p">,</span> <span class="ss">:profile_image</span><span class="p">,</span> <span class="ss">:tweet_created_at</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">first_time</span>
</span><span class='line'>    <span class="no">Twitter</span><span class="o">.</span><span class="n">user_timeline</span><span class="p">(</span><span class="s2">&quot;objectivec_es&quot;</span><span class="p">,</span> <span class="ss">:count</span> <span class="o">=&gt;</span> <span class="mi">3200</span><span class="p">,</span> <span class="ss">:exclude_replies</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tweet</span><span class="o">|</span>
</span><span class='line'>      <span class="n">insert_tweet</span><span class="p">(</span><span class="n">tweet</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">pull_tweets</span>
</span><span class='line'>    <span class="no">Twitter</span><span class="o">.</span><span class="n">user_timeline</span><span class="p">(</span><span class="s2">&quot;objectivec_es&quot;</span><span class="p">,</span> <span class="ss">:count</span> <span class="o">=&gt;</span> <span class="mi">200</span><span class="p">,</span> <span class="ss">:exclude_replies</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:since_id</span> <span class="o">=&gt;</span> <span class="n">maximum</span><span class="p">(</span><span class="ss">:tweet_id</span><span class="p">))</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tweet</span><span class="o">|</span>
</span><span class='line'>      <span class="n">insert_tweet</span><span class="p">(</span><span class="n">tweet</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">insert_tweet</span><span class="p">(</span><span class="n">tweet</span><span class="p">)</span>
</span><span class='line'>   <span class="k">unless</span> <span class="n">exists?</span><span class="p">(</span><span class="n">tweet_id</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>     <span class="k">if</span> <span class="n">tweet</span><span class="o">.</span><span class="n">retweet?</span>
</span><span class='line'>       <span class="n">tweet</span> <span class="o">=</span> <span class="n">tweet</span><span class="o">.</span><span class="n">retweeted_status</span>
</span><span class='line'>     <span class="k">end</span>
</span><span class='line'>     <span class="k">if</span> <span class="n">tweet</span><span class="o">.</span><span class="n">urls</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'>       <span class="n">create!</span><span class="p">(</span>
</span><span class='line'>           <span class="n">tweet_id</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">id</span><span class="p">,</span>
</span><span class='line'>           <span class="ss">content</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">text</span><span class="p">,</span>
</span><span class='line'>           <span class="n">screen_name</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">screen_name</span><span class="p">,</span>
</span><span class='line'>           <span class="n">profile_image</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">profile_image_url</span><span class="p">,</span>
</span><span class='line'>           <span class="n">tweet_created_at</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">created_at</span><span class="p">,</span>
</span><span class='line'>       <span class="p">)</span>
</span><span class='line'>     <span class="k">end</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A continuación, tendremos que cambiar el controlador y la vista ya que ahora mismo todavía están recuperando la información directamente desde el API.</p>

<p>El metodo <em>home</em> quedará de la siguiente manera:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">home</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@tweetlinks</span> <span class="o">=</span> <span class="no">Tweetlink</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@tweetlinks</span><span class="o">.</span><span class="n">empty?</span> <span class="p">?</span> <span class="no">Tweetlink</span><span class="o">.</span><span class="n">first_time</span> <span class="p">:</span> <span class="no">Tweetlink</span><span class="o">.</span><span class="n">pull_tweets</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="c1"># index.html.erb</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@tweetlinks</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Y la vista de esta otra forma:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>Todos los links de @objectivec_es<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;tweets-with-links&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% @tweetlinks.each do |tweetlink| %&gt;
</span><span class='line'>    <span class="nt">&lt;blockquote&gt;</span>
</span><span class='line'>      <span class="err">&lt;</span>%= image_tag tweetlink.profile_image %&gt;
</span><span class='line'>      <span class="err">&lt;</span>%= tweetlink.screen_name %&gt; wrote at
</span><span class='line'>      <span class="err">&lt;</span>%= l DateTime.parse(tweetlink.tweet_created_at), :format =&gt; :long %&gt;
</span><span class='line'>      <span class="nt">&lt;p&gt;</span><span class="err">&lt;</span>%= auto_link(tweetlink.content).html_safe %&gt;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/blockquote&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% end %&gt;
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Para terminar vamos a incluir paginación, esto reducirá el tiempo de carga de la página y mejorará la usabilidad. Otra vez más, podriamos escribir todo el código necesario para montar una paginación pero con un par de gemas lo podemos dejar solucionado:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;will_paginate&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;bootstrap-will_paginate&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>La gema <em>will_paginate</em> es la que se encarga de la gestión de la paginación. Lo único que tendremos que hacer es cambiar el número de registros que recuperamos de la clase Tweetlink en el controlador. En lugar de <em>all</em> usaremos <em>paginate</em>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">home</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@tweetlinks</span> <span class="o">=</span> <span class="no">Tweetlink</span><span class="o">.</span><span class="n">paginate</span><span class="p">(</span><span class="ss">page</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@tweetlinks</span><span class="o">.</span><span class="n">empty?</span> <span class="p">?</span> <span class="no">Tweetlink</span><span class="o">.</span><span class="n">first_time</span> <span class="p">:</span> <span class="no">Tweetlink</span><span class="o">.</span><span class="n">pull_tweets</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="c1"># index.html.erb</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@tweetlinks</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>En el layout, indicaremos donde queremos que aparezca el componente de paginación. La gema <em>bootstrap-will_paginate</em> aplica los estilos de Twitter Bootstrap a paginación.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>Todos los links de @objectivec_es<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="err">&lt;</span>%= will_paginate @tweetlinks %&gt;
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% @tweetlinks.each do |tweetlink| %&gt;
</span><span class='line'>    <span class="nt">&lt;blockquote&gt;</span>
</span><span class='line'>      <span class="err">&lt;</span>%= image_tag tweetlink.profile_image %&gt;
</span><span class='line'>      <span class="err">&lt;</span>%= tweetlink.screen_name %&gt; wrote at
</span><span class='line'>      <span class="err">&lt;</span>%= l DateTime.parse(tweetlink.tweet_created_at), :format =&gt; :long %&gt;
</span><span class='line'>      <span class="nt">&lt;p&gt;</span><span class="err">&lt;</span>%= auto_link(tweetlink.content).html_safe %&gt;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/blockquote&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% end %&gt;
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="err">&lt;</span>%= will_paginate @tweetlinks %&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Y listo, podríamos seguir incluyendo muchas mejoras y posiblemente es lo que haga en los próximos días pero por el momento&#8230; esto es todo.</p>

<p>El código fuente lo puedes encontrar en <a href="https://github.com/jmoreno/URLHunter/tree/GitHub">Github</a></p>

<h2>ACTUALIZACIÓN 12/03/2013</h2>

<p>He corregido los fragmentos de código que erán erróneos. En la siguiente entrada tenéis una explicación de los errores. Disculpad las molestias.</p>
]]></content>
		
	</entry>
  
	<entry>
	  
		<title type="html"><![CDATA[Como mola Octopress]]></title>
		<link href="http://javimoreno.me/blog/2013/03/08/como-mola-octopress/"/>
		
	  <updated>2013-03-08T02:10:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2013/03/08/como-mola-octopress</id>
	  
	  <content type="html"><![CDATA[<p>Estoy disfrutando como un enano con <a href="http://octopress.org">Octopress</a>. Como ya conté en el anterior post, he probado unos cuantos servicios para publicar blogs y a grandes rasgos todos me han parecido iguales: un menú de configuración en el que puedes tocar cuatro cosas, la promesa de que a través de CSS te lo puedes configurar a tu gusto y en ocasiones una oferta de plugins que nunca terminan de hacer lo que crees que deben hacer.</p>

<p>Si analizamos lo que ofrece Octopress, posiblemente Wordpress sea el que más se le parezca (no creo que el nombre sea casualidad). Se puede descargar toda el proyecto del blog desde la página de <a href="http://wordpress.org">wordpress.org</a>, se configura un MySQL, se tocan un par de ficheros, se sube a un hosting de php y a disfrutar del blog&#8230; todo un mundo de maravillosos plugins y temas está a tu disposición. <br/>
El problema es que php y yo no terminamos de llevarnos bien.</p>

<!--more-->


<p>No tengo nada en contra de PHP, es un lenguaje muy extendido, con muchisima documentación a lo largo y ancho de internet, con el que se pueden hacer muchisimas cosas, fácil de aprender y con una gran oferta de hosting. Durante casi un año he tenido un blog wordpress instalado en un hosting gratuito. En todo este año podría haber creado páginas, modificado los plugins que no hacían lo que yo quería, cambiado los estilos,&#8230; pero el caso es que no lo he hecho.</p>

<p>Sin embargo, en los poco menos de un mes que llevo con octopress he creado páginas, cambiado estilos, modificado plugins e incluso creando alguno nuevo pero lo más importante es que&#8230; <strong>TENGO GANAS DE ESCRIBIR</strong></p>

<h2>¿Qué es Octopress?</h2>

<p>Octopress está basado en Jekyll, un generador de blogs estáticos. Jekyll propone una estructura de carpetas para el sitio web, las páginas se escriben en formato Textile, Markdown o Liquid y Jekyll se encarga de generar el contenido web estático en HTML. Octopress añade a Jekyll unas plantillas para entradas de blog y páginas, un tema por defecto que se adapta a cualquier pantalla y es HTML5, la automatización con Rake de determinadas tareas como la creación de entradas, el generado del blog, la previsualización del blog, el despliegue en Github (y también en Heroku y en Rsync), la limpieza de la cache&#8230; En muchos aspectos me recuerda a Rails.</p>

<p>Además, a mi me esta viniendo muy bien para practicar Git. Mi flujo de trabajo sería el siguiente:
- Creo una nueva rama cuando voy a escribir o probar alguna cosa.
- Hago lo que tenga que hacer en la nueva rama
- Si todo esta bien o he terminado de escribir la entrada hago el merge a la rama <em>source</em>
- Género el blog, lo despliego y hago push al repositorio de GitHub.</p>

<p>A muchos les parecerá una vuelta al pasado, a mi es lo que más me gusta: la sensación de que mi blog es una aplicación desarrollada por mi y de la que yo controlo hasta el último detalle. El hecho de que el contenido ya no sea dinámico (aunque esto no es del todo cierto ya que hay determinadas partes del blog que están hechas en javascript, precisamente para darle dinamismo) resulta chocante al principio pero buscando un poco por internet encuentras grandes defensores de este tipo de sitios sobre todo en casos en los que el blog está alojado en un servidor personal y una alta demanda podía provocar discontinuidades en el servicio. Dudo mucho de que este vaya a ser mi caso, pero no está de más tomar alguna medida. :-)</p>

<h2>Editando el blog</h2>

<p>En mi caso, la edición del blog la hago con Sublime Text. Una de las cosas que más echarán en falta los que tengan Wordpress es que no hay una aplicación nativa con la que puedas gestionar tu blog en cualquier momento y situación pero es lo que tiene <em>compilar</em> un blog, que necesitas tu equipo del día a día para hacer alguna correción o para publicar una nueva entrada. Creo que la aparación en el App Store de programas como <a href="https://itunes.apple.com/es/app/pythonista/id528579881">Pythonista</a> acabarán trayendo la posibilidad de generar y desplegar el blog desde un iPad o un iPhone pero de momento, lo único que se puede hacer desde un dispositivo móvil es ir escribiendo alguna entrada que otra. En mi caso utilizo <a href="https://itunes.apple.com/us/app/ia-writer/id392502056?l=es&amp;mt=8">iA Writer</a> y la sincronización con Dropbox.   <br/>
Para que os hagáis una idea, está entrada se empezo a escribir en el mac, la parte central la escribi en el metro mientras iba a trabajar y estoy terminando de escribirla ahora otra vez en el mac. El paso de creación de entrada hay que hacerlo con <em>rake</em> pero puedes ir empezando a escribir lo que tengas pensado en cualquier sitio, para eso se invento el corta-pega.</p>

<p>Otro día hablaré un poco más de los plugins, de las plantillas Liquid y cosas así. No hace falta ser un experto para tocar un par de scripts o buscar alguna cosa en internet y hacerte la vida un poco más fácil.</p>
]]></content>
		
	</entry>
  
	<entry>
	  
		<title type="html"><![CDATA[Y otro]]></title>
		<link href="http://javimoreno.me/blog/2013/02/12/y-otro/"/>
		
	  <updated>2013-02-12T00:32:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2013/02/12/y-otro</id>
	  
	  <content type="html"><![CDATA[<blockquote><p>Lo reconozco, soy un culo inquieto.
Creo que he probado más sistemas de blogging que entradas he escrito.</p></blockquote>

<p>Siendo usuario de Gmail, cuando te animas a escribir en un blog lo más fácil es hacerlo en Blogger&#8230; y así empece yo: <a href="http://azctabend.blogspot.com.es" title="AZCT Abend">AZCT Abend</a> era la incursión de un Cobolero en el mundo del blogging y como de COBOL no había mucho que contar, la idea era ir contando mis avances en el aprendizaje de Objective-C y Cocoa Touch.</p>

<!--more-->


<p>Al mismo tiempo, como buen &#8220;early adopter&#8221; que soy, me hice mi cuenta en Tumblr con un par de blogs: uno que me servía como galería de fotos de <a href="http://mismamente.tumblr.com" title="mismamente">Instagram</a> y otro para colgar citas que parecían llamativas: <a href="http://indistintamente.tumblr.com">http://indistintamente.tumblr.com</a>&#8230; claramente al de Instagram le dediqué más tiempo.</p>

<p>Poco más tarde, por diversas circunstancias que no vienen al caso compre un dominio: <a href="http://zinkinapps.com">http://zinkinapps.com</a>. Era el momento de tener un sitio web y un <a href="http://zinkinapps.com/blog">blog de desarrollo</a> vinculado al mismo. No tenía ni idea de como hacer la página pero con el blog si que sabía que tenía que subir un peldaño más: WordPress.
No es que Blogger estuviera mal, de hecho sigue siendo un buen punto de partida, pero como muchas cosas que hace/compra Google está un poco a medias. Si quieres tener un blog personalizado, con unos temas que den la impresión de que el tipo que está detras es un &#8220;fiera&#8221; internet te dice que tienes que probar WordPress.
Así me meti en el maravilloso mundo de los hosting gratuitos, descubrí php, los plugins y otras mandangas. Casi al mismo tiempo descubrí Twitter Bootstrap que para alguien como yo, con el talento del diseñador del blog de <a href="http://stallman.org">Richard Stallman</a>, era la forma de hacer una web con un estilo cuidado.</p>

<p>Una cosa llevo a la otra y finalmente decidí que ni php, ni hosting gratuitos, ni leches. El hosting en Heroku, la web a hacerla con Ruby on Rails y el blog&#8230; ¿en WordPress? Bueno, si no hay otra opción.
El caso es que mientras estaba haciendo la web con Rails (todavía está en desarrollo) pensé en que el blog lo podía hacer también en Rails. Al fin y al cabo, la mayoría de los tutoriales de Rails son de como hacer un blog y con markdown podría escribir las entradas en cualquier editor, subir el contenido a la base de datos y usar alguna gema que lo pase a HTML.</p>

<p>Y buscando, buscando encontré Octopress: un framework de blogging que puedo desplegar en Heroku (o en GitHub que es donde está este), con el que practico MarkDown y Git, dos de mis propósitos de 2013. Lo que no entiendo es como tardé tanto tiempo en encontrarlo, si estuvo siempré ahí, desde el <a href="http://mattgemmell.com">principio.</a></p>
]]></content>
		
	</entry>
  
	<entry>
	  
		<title type="html"><![CDATA[Soporte Nysnö para MacBook Pro]]></title>
		<link href="http://javimoreno.me/blog/2012/12/23/soporte-nysno-para-macbook-pro/"/>
		
	  <updated>2012-12-23T19:51:28+00:00</updated>
	  <id>http://javimoreno.me/blog/2012/12/23/soporte-nysno-para-macbook-pro</id>
	  
	  <content type="html"><![CDATA[<p>No tenía pensado hablar de bricolaje en este blog pero una mención de <a href="http://twitter.com/rubdottocom">@rubdottocom</a> haciendo referencia a una entrada suya haciendo lo mismo pero <a href="http://putofreak.com/crea-un-dock-para-tu-macbook-con-un-servilletero-de-ikea">con otro modelo</a> me hizo plantearme una sección de &#8220;Macnitas&#8221; para este blog.</p>

<p>Le he pedido a los Reyes Magos una pantalla de 24 pulgadas para conectar al MacBook Pro y poder hacer storyboards de aplicaciones para el iPad sin volverme loco. El caso es que, cuando lo tenga, el portátil pasará a ser un &#8220;sobremesa&#8221; y para que no me quite mucho espacio he estado mirando soportes verticales. Obviamente son todos muy buenos y caros pero como la economía española no está para tirar cohetes y hay que hacer mucha contención del gasto decidí explorar otras opciones: atriles, sujetalibros, etc, hasta que mi mujer me dijo: &#8220;¿por qué no usas ese servilletero que compramos en Ikea y que nunca usamos?&#8221;</p>

<!-- more -->


<p><img src="http://javimoreno.me/images/photos/2012/12/nysno-servilletero__0137987_PE296893_S4-300x300.jpg"></p>

<p>Genial!!! Pero había un problema, tenía que conseguir que el MBP encajase pero que sin que se arañase. El caso es que me acorde que en algún armario había una espuma de esas que vienen en las fundas de neopreno para los portátiles. Perfecto, una vez recortada con forma de estrella y cortada por la mitad para pegar en los dos laterales del servilletero ya teníamos el &#8220;Soporte Nysnö para MacBook Pro&#8221;.</p>

<p><img src="http://javimoreno.me/images/photos/2012/12/Foto-23-12-12-18-43-59-e1356285841523-224x300.jpg"></p>

<p>El problema del &#8220;Soporte Nysnö&#8221; es que es poco estable y como en casa hay un terremoto y otro viene en camino hay que evitar las inestabilidades. Nuevamente Ikea al rescate, esta vez con las sujeciones de un organizador de cables que también estaba en desuso.</p>

<p><img src="http://javimoreno.me/images/photos/2012/12/ikea-300x300.jpg"></p>

<p>Listo, el resultado final no tendrá la misma belleza del aluminio del BookArc pero lo importante es que es efectivo y barato.</p>

<p>Os dejo un par de imágenes más para que veáis el resultado.</p>

<p><img src="http://javimoreno.me/images/photos/2012/12/Foto-23-12-12-18-43-48-e1356285786354-224x300.jpg"></p>

<p><img src="http://javimoreno.me/images/photos/2012/12/Foto-23-12-12-18-42-58-e1356286140661-224x300.jpg"></p>

<p>Espero que os haya gustado. :-)</p>
]]></content>
		
	</entry>
  
</feed>
