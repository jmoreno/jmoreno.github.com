<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Análisis | Javi Moreno]]></title>
  <link href="http://javimoreno.me/blog/categories/análisis/atom.xml" rel="self"/>
  <link href="http://javimoreno.me/"/>
  <updated>2014-04-06T23:57:51+00:00</updated>
  <id>http://javimoreno.me/</id>
  <author>
    <name><![CDATA[Javi Moreno]]></name>
    <email><![CDATA[javi@javimoreno.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

	
	<entry>
	  
		<title type="html"><![CDATA[Octoberry Pi]]></title>
		<link href="http://javimoreno.me/blog/2014/04/07/octoberry-pi/"/>
		
	  <updated>2014-04-07T09:30:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2014/04/07/octoberry-pi</id>
	  
	  <content type="html"><![CDATA[Octopress mola pero también tiene sus limitaciones. No es que yo sea un gran comunicador que está publicando artículos continuamente pero a veces he echado de menos no poder publicar algo más rápidamente o a una hora concreta.   
Octopress es un blog estático que se genera mediante unos scripts desarrollados en Ruby y que usa git para publicar en GitHub Pages, Heroku o sitios similares. Por eso normalmente se necesita un PC/mac.    
Quizá haya que ser muy friky para preferir hacer todo lo que voy a contar ahora y no usar wordpress pero, como dijo Steve McQueen en Los Siete Magníficos:

<blockquote><p>Lo nuestro es el plomo.</p></blockquote>

Claro, que un poco más adelante, en la misma película también dijo:

<blockquote><p>En aquel momento parecía una buena idea.</p></blockquote>

<!--more-->

Este año, los Reyes Magos me trajeron una Raspberry Pi. Si ya se que ya no está tan de moda pero después de una conversación con [Jorge Ortiz](http://twitter.com/jdortiz) allá por Octubre me picó el gusanillo de usar este dispositivo para hacer pruebas de configuración de un servidor Rails. Después, pensando en lo poco que consume, que puede estar siempre encendido, que soporta ssh,… pensé que a lo mejor esta era la forma de poder publicar cosas en el blog cuando no estuviera en casa. 

## Organización: Borradores y Blog.

Supongo que ya lo sabréis pero Octopress se apoya mucho en git. Inicialmente pensé en tener toda la carpeta del proyecto en Dropbox para que estuviera sincronizado el contenido tanto en la Raspberry, como en el Mac, el iPhone o el iPad. Si esto funcionaba, lo único que tendría que hacer cuando hubiera terminado de escribir algo sería entrar en la RPi y hacer el **deploy** desde allí.    
No fue una buena idea, primero porque la RPi no es el más rápido de los dispositivos y segundo porque la carpeta de un proyecto Octopress con la rama **source** tiene un número de ficheros que tiende a infinito y Dropbox es genial excepto cuando tienes un número muy grande de ficheros.    
El plan B fue tener una carpeta en Dropbox para los borradores, tener el repositorio del blog sincronizado también con la Raspberry y mover los **borradores** al proyecto cuando fuera a publicar algo.

## Crear una carpeta de borradores en Dropbox. 

Prácticamente todos los editores markdown que hay tanto para iPhone, como para iPad como para Mac permiten guardar en Dropbox. En mi caso particular uso iA Writer en el iPhone, Editorial en el iPad y nvAlt, iA Writer o Textmate en el Mac (según me de). En todos estos editores puedo escribir los artículos, en el iPad y en el Mac además puedo hacer la **postprodución** del post, es decir la maquetación y uso de los plugins que aporta Octopress para que las entradas queden más vitaminadas. Además, el tener todo en Dropbox me permite empezar a escribir en el Mac, seguir escribiendo en el iPhone mientras voy en el Metro y terminar de maquetar en el iPad (porque mola mucho usar Editorial).

Para poder usar Dropbox en la Raspberry me basé en [esta entrada](http://raspi.tv/2013/how-to-use-dropbox-with-raspberry-pi). Es importante destacar que Dropbox en la Raspberry todavía no funciona (y no se si algún día funcionará) como funciona en nuestros dispositivos habituales: no hay sincronización. [Dropbox Uploader](https://github.com/andreafabrizi/Dropbox-Uploader) lo que permite es descargar, subir, borrar, crear directorios y demás historias pero la sincronización es algo que, si lo quieres, te lo tienes que currar tu. En mi caso, con la descarga de Dropbox a la Raspberry es suficiente.

## GitHub, Bitbucket y ramas remotas.

Aunque este blog está hospedado en GitHub, el repositorio completo (Octopress consta de dos ramas: **master** y **source**) está alojado en Bitbucket. No es que tenga nada que ocultar, simplemente que tengo cosas a medio escribir que no me apetece que se vean hasta que estén terminadas. 
Para poder usar Octopress en la Raspberry Pi si ya tienes el blog en algún repositorio remoto, lo único que hay que hacer es crear una clave ssh en la Raspberry ([en GitHub tienen muy buenos tutoriales de como hacerlo](https://help.github.com/articles/generating-ssh-keys)), vincular esta clave tanto al repositorio de Bitbucket como al de GitHub y disfrutar: ya podemos clonar, hacer pull, hacer push y todas esas cosas que hacen que Octopress mole tanto. Como a todos los efectos es una nueva instalación. Cuando clonamos el proyecto tenemos que hacer el "bundle install" y volver a configurar el sistema de despliegue. Con las [instrucciones del sitio de Octopress](http://octopress.org/docs/deploying/) es más que suficiente.

## El proceso de publicación.

Creo que todavía no lo había dicho pero en todo momento he estado accediendo a la Raspberry vía ssh. Si usas git y octopress no deberías tenerle ningún miedo al terminal por lo que acceder vía ssh al dispositivo no será tampoco un problema. Para facilitarme un poco la tarea me he creado una serie de scripts para las situaciones que me puedo encontrar con más frecuencia:

1. Descargar los borradores y previsualizar
2. Publicar lo que haya en la Raspberry
3. Descargar los borradores y publicar
4. Descargar el repositorio y previsualizar
5. Descargar el repositorio y publicar

En todos los casos, después de publicar se hace commit en el repositorio y se suben los cambios a los servidores remotos.

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>quickpost.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./Dropbox-Uploader/dropbox_uploader.sh download ./drafts/
</span><span class='line'>mv ./drafts/*.markdown ./blog/source/_posts
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'><span class="nb">cd </span>blog
</span><span class='line'>rake generate
</span><span class='line'>rake deploy
</span><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s2">&quot;Nuevo publicación con quickpost.sh&quot;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

El script anterior descarga los ficheros que estén en la carpeta de *borradores*. A continuación, mueve los ficheros con extensión _markdown_ a la carpeta donde se guardan los artículos en Octopress. Acto seguido genera la nueva versión del blog y lo publica. Para que los cambios sean accesibles desde cualquier lugar hace `commit`en la rama source y la sube al repositorio remoto. Por supuesto, cualquiera de estos pasos puede fallar. Si eso sucede el script se detiene y aquí no ha pasado nada.

El resto de scripts, giran sobre la misma idea, en algunos casos se detienen en la generación y hacen un preview, en otros casos lo que hacen es hacer un `pulo` al repositorio remoto,…

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>gitpost.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">set</span> -e
</span><span class='line'><span class="nb">cd </span>blog
</span><span class='line'>git pull origin <span class="nb">source</span>
</span><span class='line'>rake generate
</span><span class='line'>rake deploy
</span><span class='line'>git add .
</span><span class='line'>git commit -m <span class="err">&quot;</span>Nuevo publicación con gitpost.sh”
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>quickpreview.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">set</span> -e
</span><span class='line'>./Dropbox-Uploader/dropbox_uploader.sh download ./drafts/
</span><span class='line'>mv ./drafts/*.markdown ./blog/source/_posts
</span><span class='line'><span class="nb">cd </span>blog
</span><span class='line'>rake generate
</span><span class='line'>rake preview
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>quickdeploy.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">set</span> -e
</span><span class='line'><span class="nb">cd </span>blog
</span><span class='line'>rake generate
</span><span class='line'>rake deploy
</span><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s2">&quot;Nuevo publicación con quickdeploy.sh&quot;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>gitpreview.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">set</span> -e
</span><span class='line'><span class="nb">cd </span>blog
</span><span class='line'>git pull origin <span class="nb">source</span>
</span><span class='line'>rake generate
</span><span class='line'>rake preview
</span></code></pre></td></tr></table></div></figure></notextile></div>

## Wherever I may roam

Y aquí llega el punto por el que decidí montar todo este tinglado: tenemos el repositorio del blog clonado en la Raspberry Pi, hemos creado una serie de scripts para facilitar el proceso de descarga y publicación. Para poder publicar en cualquier momento y allá donde nos encontremos solo nos faltan dos cosas: poder acceder a la Raspberry desde fuera de la red local y tener una aplicación en el iPhone o en el iPad que permitan hacer un ssh.

Lo primero lo he resuelto con [no-ip](http://www.noip.com) un servicio gratuito que mediante la instalación de un paquete en la Raspberry y la configuración de una cuenta nos permite acceder a nuestra red como si de un servicio web se tratara. Ya no recuerdo cual es el tutorial que usé yo para configurarlo pero cualquiera que aparece al buscar “no-ip raspberry” en Google valdrá. Es algo extremadamente sencillo.

Y para lo segundo, hacía ya bastante tiempo que le había echado el ojo a [Prompt](https://itunes.apple.com/es/app/prompt/id421507115?mt=8) de la gente de [Panic](http://www.panic.com). Quizá sea una aplicación cara (cuesta 7€) pero cumple su cometido a la perfección.

## Conclusión.

Puede parecer una solución muy rebuscada pero cualquiera que se anime a repetir mis pasos encontrará que el proceso es muy sencillo.    
Sobre el exceso de “ingeniería” para publicar el blog, la única disculpa que puedo poner es que Octopress/Jekyll me gusta mucho y quiero que sea mi sistema de blogging durante mucho tiempo. No le hago ascos a otros sistemas como Tumblr (y algún proyecto tengo por ahí que saldrá mediante ese servicio) o Medium (bastante de moda ahora) pero Octopress sigue siendo mi favorito. Además, llevo tiempo pensado en darle un giro al blog y tener una manera de publicar artículos esté donde esté o de forma “programada” mediante `crontab` me daría mucha agilidad.]]></content>
		
	</entry>
	
	<entry>
	  
		<title type="html"><![CDATA[Workflows de Editorial para Octopress]]></title>
		<link href="http://javimoreno.me/blog/2014/01/26/workflows-de-editorial-para-octopress/"/>
		
	  <updated>2014-01-26T00:59:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2014/01/26/workflows-de-editorial-para-octopress</id>
	  
	  <content type="html"><![CDATA[He estado creando una serie de workflows en [Editorial](
https://itunes.apple.com/es/app/editorial/id673907758?mt=8) que creo serán de gran ayuda a todos los que usen esta fantástica herramienta de edición para iPad al escribir las entradas de su blog Octopress.    

<!--more-->

Aunque Octopress se basta y se sobra con textos en markdown, tiene una serie de plugins muy potentes que son de gran ayuda para insertar citas, vídeos, imágenes, tweets embebidos o código fuente.    
Yo me he centrado en lo que me hacían falta para los *posts* que suelo escribir pero como podréis ver, una vez hecho el primero, el resto son sota, caballo y rey. 

Os dejo los enlaces por sí les queréis echar un ojo. 

- [Creacion de fichero *octopress* a partir de fichero *markdown*](http://editorial-app.appspot.com/workflow/5252485694357504/5M7iTYKP5ak)
- [Marca de continuación. ("Seguir leyendo")](http://editorial-app.appspot.com/workflow/5309436960702464/jobUl19TzXk)
- [Texto seleccionado como cita](http://editorial-app.appspot.com/workflow/6341637861015552/zFyzbnTW9QY)
- [Texto seleccionado como código fuente](http://editorial-app.appspot.com/workflow/5269098627858432/7jGKDINoyJQ)
- [Texto seleccionado como gist embebido](http://editorial-app.appspot.com/workflow/5877028700028928/9eyEep5t6f4)
- [URL seleccionada como tweet embebido](http://editorial-app.appspot.com/workflow/5795046364282880/fc1_oaplErs)

## ¿Cómo se usan?

Pues para empezar, hay que escribir todo el post en markdown en un fichero sin extensión cuyo nombre sea el título que va a tener el post. ¿Un poco cutre? Es mi workflow, ¿qué pasa? 
Si se hace de esta forma, el primer workflow creara un fichero octopress a la primera. 

El segundo workflow no tiene mucho misterio, inserta el *excerp* donde le digamos. 

El resto transforma esto:

Las rosas son rosas, el cielo es azul y tú eres tú. 

puts "Hello, world!"
	
5467313

https://twitter.com/jmoreno78/statuses/427223495794520064

En esto otro:

<blockquote><p>Las rosas son rosas, el cielo es azul y tú eres tú.</p><footer><strong>Un poeta urbano</strong></footer></blockquote>

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Hola mundo en COBOL.   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Hello, world!&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div><script src='https://gist.github.com/5467313.js'></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/5467313&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<div class='embed tweet'><blockquote class="twitter-tweet"><p>Después de llevar un tiempo en el dique seco, creo que la semana que viene voy a publicar bastantes posts. Delirios todo, por supuesto. 😄</p>&mdash; Javi Moreno (@jmoreno78) <a href="https://twitter.com/jmoreno78/statuses/427223495794520064">January 25, 2014</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></div>



Mola, ¿eh?
]]></content>
		
	</entry>
	
	<entry>
	  
		<title type="html"><![CDATA[Padrinos y vacunas]]></title>
		<link href="http://javimoreno.me/blog/2013/11/11/padrinos-y-vacunas/"/>
		
	  <updated>2013-11-11T01:31:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2013/11/11/padrinos-y-vacunas</id>
	  
	  <content type="html"><![CDATA[<blockquote><p>Le haré una oferta que no podrá rechazar.</p><footer><strong>Vito Corleone</strong> <cite>El Padrino</cite></footer></blockquote>

En la misma película de la que he sacado esta cita se dice que los italianos piensan que el mundo es tan duro que hay que tener dos padres y por eso todos tienen un padrino. Quizá esto es lo que pensaron los desarrolladores del nuevo framework del que me he hecho fan, Padrino, por que el nombre le viene que ni pintado. 

<!--more-->

Creo que mi búsqueda del backend perfecto empieza a ser preocupante y enfermiza. Vaya por delante que lo que yo busco es algo que me sirva para aplicaciones móviles, que pueda tener una pequeña interfaz web y que me deje ver la base de datos, que a mi me gusta mucho el SQL, para que nos vamos a engañar. 

Ruby on Rails siempre me ha parecido una buena opción ya que es relativamente sencillo y con pocos pasos puedes tener mucho del desarrollo hecho. Si a eso le añades la versatilidad que tiene para mostrar los datos en HTML, XML o json tienes un gran complemento para dispositivos móviles. Sin embargo reconozco que para devolver un pequeño json no es necesario montar el pifostio que se monta con Rails. 

En el otro extremo está Sinatra. Es sencillo, mucho más orientado a montar API's pero también te permite crear interfaces. La principal ventaja es que reduce a la mínima expresión lo que hay que escribir para que un servicio funcione. Sin embargo, puede llegar un momento en el que te canses de tanta sencillez y manualidad. 

Padrino está justo en el medio de Rails y Sinatra. Esta construido sobre Sinatra pero incorpora utilidades que hacen más eficiente el desarrollo. Sólo una curiosidad, este post hacia bastante tiempo que pensaba escribirlo. Incialmente iba a hacerlo en Rails (hace año y pico), luego pensé en hacerlo en Sinatra (hace meses). Descubrí Padrino la semana pasada y aquí esta terminado. De la noche a la mañana he encontrado el framework que mejor se adapta a mis necesidades particulares. 

Bueno, después del coñazo que he soltado vamos a ver si hacemos algo más interesante como, por ejemplo, resolver uno de los problemas más graves de la paternidad: saber que vacuna le toca a tu hijo/a en la próxima revisión.

## Calendario de vacunaciones. 

Por sí no lo sabéis, el calendario de vacunación infantil se basa en recomendaciones de la OMS que el Ministerio de Sanidad en colaboración con la Asociación Nacional de Pediatría estudia y presenta para que, posteriormente, las consejerías de sanidad de cada comunidad autónoma organicen como les de la gana. Esto hace que en España haya 19 calendarios diferentes que, además, suelen cambiar cada tres cuatro años. 

El objetivo de nuestra aplicación web será devolver un json con los 19 calendarios actualizados. Para ellos, nuestra aplicación necesitará de un panel de administración con el que actualizáremos las cinco tablas que forman el modelo de datos. 

<img src="/images/photos/2013/diagram.png">

No voy a entrar en muchos detalles sobre el modelo. La primera tabla es la de países, inicialmente solo esta España pero creo que el modelo es extensible a cualquier país. Un país puede tener varios calendarios... como en España, que es una locura. Cada calendario tendrá una serie de eventos y cada evento tendrá, entre otros datos, una edad, una vacuna. Edades y Vacunas también son entidades del modelo de datos.

### Creación del proyecto

Siguiendo la estela de Rails, Padrino tiene generadores que nos vendrán muy bien en diferentes fases del desarrollo. El primero que utilizaremos es el que permite crear el proyecto. 

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>padrino g project VacScheduler -t shoulda -e haml -c sass -s jquery -d activerecord -b
</span></code></pre></td></tr></table></div></figure></notextile></div>
    
La mejor forma de saber que significan todos estos términos es mirar la [documentación de Padrino sobre los generadores](http://www.padrinorb.com/guides/generators). Yo he puesto todo esto, no porque sea un listillo, sino porque para hacer está aplicación me he fusilado el [tutorial sobre como hacer un blog](http://www.padrinorb.com/guides/blog-tutorial).    
Basicamente, hemos creado un proyecto llamado VacScheduler que usa shoulda para el testing, haml para el renderizado de las páginas, sass para los estilos, jquery para la parte de scripting y activerecord para el orm. Además, cuando termine la creación del proyecto, forzaremos una instalación de las gemas que nos faltan con Bundle.
    
### Creación del panel de administración (esto hará las delicias de más de uno)

Una gran diferencia con respecto a Rails es que, en Padrino han pensado que la existencia de un grupo de usuarios encargados de mantener las tablas que forman el modelo de la aplicación es un escenario lo suficientemente habitual como para crear una funcionalidad de Administración. A nosotros esto nos viene genial porque lo que queremos es tener una aplicación que devuelva una versión actualizada de los diferentes calendarios de vacunación y para actualizar esos datos tendremos a un usuario responsable de dicho mantenimiento. Las instrucciones para crear el panel de administración son las siguientes:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>padrino g admin --theme warehouse
</span><span class='line'><span class="nv">$ </span>bundle install
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>padrino rake ar:create
</span><span class='line'><span class="nv">$ </span>padrino rake ar:migrate
</span><span class='line'><span class="nv">$ </span>padrino rake seed
</span></code></pre></td></tr></table></div></figure></notextile></div>

Este último paso nos pedirá un correo electrónico y una contraseña para poder acceder al panel de administración. Si después de hacer esto, arrancamos la aplicación podremos ver el bonito panel de administración.

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>padrino start
</span></code></pre></td></tr></table></div></figure></notextile></div>

### Creación de los modelos

Si estuviéramos en Rails, generaríamos un scaffold. Padrino no tiene scaffold... o si? igual nos llevamos una sorpresa más adelante.    
De momento vamos a crear los modelos de las cinco tablas que forman nuestro modelo de datos.

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>padrino g model age short_name:string name:string months:integer -a app
</span><span class='line'><span class="nv">$ </span>padrino g model calendar name:string country_id:integer -a app
</span><span class='line'><span class="nv">$ </span>padrino g model country name:string -a app
</span><span class='line'><span class="nv">$ </span>padrino g model event notes:text calendar_id:integer age_id:integer vaccine_id:integer -a app
</span><span class='line'><span class="nv">$ </span>padrino g model vaccine short_name:string name:string description:text link_info:string -a app
</span></code></pre></td></tr></table></div></figure></notextile></div>

y hacemos la migración correspondiente para crear las entidades en la base de datos:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>padrino rake ar:migrate
</span></code></pre></td></tr></table></div></figure></notextile></div>

### Modificación de los modelos para incluir las relaciones y validaciones

Sobre los modelos que nos ha creado Padrino, hacemos las modificaciones oportunas para indicar las relaciones entre las entidades así como los campos que son obligatorios:

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Age.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Age</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:events</span>
</span><span class='line'>    <span class="n">validates_presence_of</span> <span class="ss">:short_name</span>
</span><span class='line'>    <span class="n">validates_presence_of</span> <span class="ss">:name</span>
</span><span class='line'>    <span class="n">validates_presence_of</span> <span class="ss">:months</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Calendar.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Calendar</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:events</span>
</span><span class='line'>    <span class="n">belongs_to</span> <span class="ss">:country</span>
</span><span class='line'>    <span class="n">validates_presence_of</span> <span class="ss">:name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>    

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Country.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Country</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:calendars</span>
</span><span class='line'>    <span class="n">validates_presence_of</span> <span class="ss">:name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>    

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Event.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Event</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>    <span class="n">belongs_to</span> <span class="ss">:calendar</span>
</span><span class='line'>    <span class="n">belongs_to</span> <span class="ss">:age</span>
</span><span class='line'>    <span class="n">belongs_to</span> <span class="ss">:vaccine</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>    

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Vaccine.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Vaccine</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:events</span>
</span><span class='line'>    <span class="n">validates_presence_of</span> <span class="ss">:short_name</span>
</span><span class='line'>    <span class="n">validates_presence_of</span> <span class="ss">:name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

### Creación de los paneles de administración de cada uno de los modelos anteriores

Esto es lo que me ha ganado de Padrino. Las admin_page son unas pantallas de mantenimiento de datos semejantes a las creadas al hacer un scaffold de Rails pero vinculadas al panel de administración. Es decir, que solo serán visibles si estás autenticado en el sistema. Parece una chorrada, pero para hacer esto en Rails hay que picar un poquito.

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>padrino g admin_page age
</span><span class='line'><span class="nv">$ </span>padrino g admin_page calendar
</span><span class='line'><span class="nv">$ </span>padrino g admin_page country
</span><span class='line'><span class="nv">$ </span>padrino g admin_page event
</span><span class='line'><span class="nv">$ </span>padrino g admin_page vaccine
</span></code></pre></td></tr></table></div></figure></notextile></div>

Cuando refresquemos, veremos algo tan bonito como esto:

<img src="/images/photos/2013/padrino-admin-1.png">

<img src="/images/photos/2013/padrino-admin-2.png">

<img src="/images/photos/2013/padrino-admin-3.png">

### Un JSON con todos los calendarios.

El objetivo de la aplicación es enviar un JSON con la versión más actual de todos y cada uno de los calendarios para que una aplicación móvil refresque su base de datos y pueda informar a sus usuarios de cuales son las próximas vacunas que tienen que poner a sus criaturas.   
Ahora es cuando nos aprovechamos de que Padrino está montado sobre Sinatra y escribimos el siguiente trozo de código en app.rb:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s2">&quot;/&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Country</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">to_json</span><span class="p">(</span><span class="ss">:include</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:calendars</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                            <span class="ss">:include</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:events</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                                <span class="ss">:include</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>                                    <span class="p">{</span> <span class="ss">:vaccine</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:short_name</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:link_info</span><span class="o">]</span><span class="p">}},</span>
</span><span class='line'>                                    <span class="p">{</span> <span class="ss">:age</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:months</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:short_name</span><span class="o">]</span><span class="p">}}</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                                <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="ss">:notes</span><span class="p">}},</span>
</span><span class='line'>                            <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="o">]</span> <span class="p">}},</span>
</span><span class='line'>                        <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Y listo, con este *sencillo* fragmento de código toda la funcionalidad *publica* de nuestra aplicación web está construida. Ya podemos llamar desde la aplicación.

Si queréis echar un vistazo, en Heroku (como no) está instalada está misma aplicación: [VacScheduler](http://vacscheduler.herokuapp.com). He tenido algunos problemitas con la codificación en la base de datos así que, si no lo he arreglado antes, veréis algunos *código extraños* donde debería haber tildes.

El código fuente de dicha aplicación lo podéis ver en [GitHub](https://github.com/jmoreno/VacScheduler).
    

    ]]></content>
		
	</entry>
	
	<entry>
	  
		<title type="html"><![CDATA[Adios Keynote, hola reveal.js]]></title>
		<link href="http://javimoreno.me/blog/2013/10/05/adios-keynote/"/>
		
	  <updated>2013-10-05T03:07:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2013/10/05/adios-keynote</id>
	  
	  <content type="html"><![CDATA[El día que empecé a preparar la presentación [Helios y su integración en iOS](http://slides.helios.javimoreno.me) me pregunté si habría alguna forma de utilizar markdown con Keynote. Iban a ser unas cuantas diapositivas de texto y manejar títulos, negritas, cursivas, listas, links,... con markdown me parecía triunfal. Después de una búsqueda rápida en Google y ver un par de enlaces descubrí [reveal.js](https://github.com/hakimel/reveal.js)... y decidí no volver a abrir Keynote nunca más.

<!--more-->

La [presentación de ejemplo](http://lab.hakim.se/reveal-js/#/) ya te da una idea general de toda la potencia de este framework. Inicialmente, a mi me bastaba con poder reutilizar un fichero en markdown en la presentación y al ver que dentro de cada `section`, que es como se identifican las *slides*, se podía introducir texto en markdown me daba por satisfecho. Luego seguí navegando y vi que, en realidad, podía utilizar un texto entero en markdown ya que con una seríe de convenciones en la escritura y arrancando reveal.js como una aplicación node.js, esta aplicación se encargaba de generar la presentación completa... reveal.js FTW!    

## Atajos de teclado

Un poco más adelante explicaré como hacer que reveal.js lea de un fichero `.md` pero antes quiero destacar la funcionalidad de reveal.js accesible a través de teclado.

* Avance de diapositivas. Una característica muy llamativa de reveal.js es que las presentaciones tienen dos dimensiones. Estamos acostumbrados a avanzar y a retroceder pero con este framework también podemos subir y bajar. Esto, desde mi punto de vista, es muy útil cuando quieres ampliar la información de una diapositiva en varias diapositivas más. En el eje horizontal (avance-retroceso) estarían las diapositivas principales y algunas de ellas podrían tener un eje vertical (arriba-abajo). La navegación se controla con las teclas de cursor pero si la presentación se visualiza en un dispositivo táctil el control de la navegación se hace con el dedo. Impresionante, no?
* Vistazo general. Pulsando la tecla *escape* se hace un zoom y puedes ver todas las diapositivas en miniatura lo que te permite navegar más rápidamente a una en concreto. Además, en caso de que tengas secciones de diapositivas (grupos en vertical) puedes ver la diapositiva que se mostraría en un flujo de navegación horizontal.
* Modo Pausa. Pulsando la tecla "b" se hace un fundido a negro, de esta forma puedes forzar al público a centrar su atención en ti en lugar de hacerlo sobre la presentación. Para salir de la *pausa* hay que volver a pulsar la "b".
* Pantalla completa. Pulsando la tecla "f"

Nada que envidiar a los programas típicos de presentaciones como Powerpoint (perdón por ponerlo en primer lugar) o Keynote.

## Funcionalidad avanzada

Tener reveal.js dentro de una aplicación node.js también te permite visualizar las notas del presentador y alguna otra funcionalidad más sofisticada como sincronizar la presentación con todos los que la estén viendo al mismo tiempo que tu en sus dispositivos, actualizar el contenido de las diapositivas en tiempo real, etc..
La verdad es que toda esas funcionalidades pintan muy bien pero yo lo único que quería era:

## ¡Una presentación hecha con markdown!

Hay que destacar que, al combinar reveal.js con un fichero .md donde están recogidas todas las diapositivas no se explota toda la potencia del framework como las diferentes transiciones, enlaces internos, colores de fondo diferentes, imágenes de fondo diferentes, vistas fragmentadas, etc. En mi humilde opinión, abusar de las transiciones, cambios de colores o de imágenes suele cargar bastante una presentación, pero vamos, que eso es cuestión de gustos.   
Si que eché de menos el no poder hacer vistas fragmentadas. Espero que en alguna próxima versión den con la forma de hacerlo. Al menos la agrupación de diapositivas y las notas si que está disponibles y eso es para mí algo digno de mención. Para que os hagáis una idea, este es el corazón de mi presentación: el fichero [presentation.md](https://github.com/jmoreno/HeliosTalk/blob/master/presentation.md).

## ¿Cómo hice mi presentación?

Lo primero que hice fue clonar el repositorio original de [reveal.js](https://github.com/hakimel/reveal.js) y cambiar el fichero index.html. La mayor parte de la presentación estaría en el fichero markdown pero en la primera diapositiva quería usar una vista fragmentada (de esas en las que las frases o las palabras van apareciendo poco a poco). Debido a esto, el código de mi presentación quedaría así:

``` html Fragmento HTML para definir la presentación
<div class="reveal">

    <!-- Any section element inside of this container is displayed as a slide -->
    <div class="slides">


        <section>
            <h1>Helios</h1>
            <h2>y su integración en iOS</h2>
            <h3 class="fragment fade-in">¿Es <a href="http://twitter.com/mattt">@mattt</a></small> una persona o una legión?</h3>
            <p>
                <small>Created by <a href="http://javimoreno.me">Javier Moreno</a> / <a href="http://twitter.com/jmoreno78">@jmoreno78</a></small>
            </p>
        </section>

        <section data-markdown="presentation.md" data-separator="^\n\n\n" data-vertical="^\n\n" data-notes="^Note:" data-charset="UTF-8"></section>

        <section>
            <h1>THE END</h1>
            <h3>BY Javier Moreno / javimoreno.me</h3>
            <p class="fragment fade-in">
                <small>Created by <a href="http://javimoreno.me">Javier Moreno</a> / <a href="http://twitter.com/jmoreno78">@jmoreno</a></small>
            </p>
        </section>

    </div>

</div>
```
    
Eso es todo, aparentemente tres diapositivas. La sección que se nutre de un fichero markdown tiene los siguientes atributos:

* `data-markdown`: La ubicación del fichero
* `data-separator`: Lo que vaya a identificar la separación entre diapositivas horizontales. En mi caso, tres líneas en blanco.
* `data-vertical`: Lo que vaya a identificar la separación entre diapositivas verticales. En mi caso, dos líneas en blanco.
* `data-notes`: Lo que identifique que el texto a continuación no es parte visual de la diapositivas si no de las notas.
* `data-charset`: Muy importante para nosotros, que usamos muchos caracteres especiales como tildes, eñes, signos de interrogación y admiración el poner UTF-8.

Y eso es todo, si echáis un vistazo al fichero [presentation.md](https://github.com/jmoreno/HeliosTalk/blob/master/presentation.md) comprobaréis lo que acabo de comentar.

Una vez hecho esto, para probarlo en local hay que tener instalado [node.js](http://nodejs.org) y [grunt](http://gruntjs.com/getting-started#installing-the-cli). Si ya tenemos estos servicios instalados lo único que hay que hacer es ir hasta la carpeta donde está reveal, instalar las dependencias con `$ npm install` y arrancar la presentación con `$ grunt serve`. La presentación se verá en [http://localhost:8000](http://localhost:8000). 

## Despliegue en Heroku.

Si hacer lo anterior me llevo un rato de nada, conseguir desplegar en Heroku me llevó un mes: subí con éxito el martes y la presentación a los asistentes de la NSCoderMAD fue el miércoles.    
Lo primero que probé fue desplegar tal y como estaba la aplicación: fue un fracaso. Por lo visto *grunt* está muy bien para entornos de desarrollo pero los hosting de node.js prefieren otras cosas. Búsquedas en Google hablan de versiones diferentes de la Heroku Toolbet para desplegar aplicaciones node.js con grub pero a mi no me funcionó ninguna de las recomendaciones que encontré.

A última hora encontré este [fork de reveal.js](https://github.com/willy-vvu/reveal.js) que se podía previsualizar en Heroku y de ahí tomé las configuraciones que necesitaba para que funcionará mi presentación en Heroku.

Lo primero fue crear un fichero llamado `server.js` con el siguiente contenido:

``` javascript Fichero server.js
var app = require('http').createServer(handler)
  , fs = require('fs')
  , path = require('path')
  , url = require('url')
  ,mime=require('mime')

app.listen(process.env.PORT||5000);
function handler (req, res) {
	var uri = url.parse(req.url).pathname;
	if(uri=='/'){
		uri='/index.html'
	}
	uri=uri.replace(/%20/g,' ')
	console.log(uri)
	var filename = path.join(__dirname, uri);
	fs.readFile(filename,
		function (err, data) {
		if (err) {
			res.writeHead(404);
			return res.end('Error loading file...');			  
		}
		res.setHeader('Content-type',mime.lookup(uri));
		res.writeHead(200);
		res.end(data);
	})
}
```

Este fichero contiene la información mínima que node.js necesita para arrancar la aplicación. Para que lea de este fichero, hubo que modificar el fichero `Procfile`

``` bash Fichero Procfile
web: node server.js
```
	
Y por último, cambiar el fichero de dependencias `package.json`:

``` json Fichero package.json
{
	"author": "Javi Moreno featuring (reveal.js by Hakim El Hattab)",
	"name": "revealjs",
	"description": "Helios y su integración con iOS",
	"version": "2.5.1",
	"repository": {
		"type": "git",
		"url": "git@github.com:jmoreno/HeliosTalk.git"
	},
	"engines": {
		"node": "0.8.x"
	},
	"dependencies": {
		"mime":"1.2.7",
		"npm":"1.2.x"
	}
}
```

Ya solo quedaba hacer commit y seguir los pasos para desplegar en Heroku:

1. `$ heroku create`
2. `$ git push heroku master`
3. `$ heroku open`

No os podéis hacer a la idea de la alegría que me llevé.

## Para acabar

Creo que, en su momento, este tweet no se entendió:

<div class='embed tweet'><blockquote class="twitter-tweet"><p>Si no me falla el valor, la presentación que estoy haciendo para la <a href="https://twitter.com/nscoder_mad">@nscoder_mad</a> se podrá ver en slideshare, Github y Heroku…</p>&mdash; Javi Moreno (@jmoreno78) <a href="https://twitter.com/jmoreno78/statuses/377465465054191616">September 10, 2013</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></div>

Como al final no me faltó el valor, ahí está la presentación: en [slideshare](http://www.slideshare.net/jmoreno78/helios-y-su-integracin-en-i-os), [Github](https://github.com/jmoreno/HeliosTalk) y [Heroku](http://slides.helios.javimoreno.me/#/). \o/
]]></content>
		
	</entry>
	
	<entry>
	  
		<title type="html"><![CDATA[Helios III. Piratas y bucaneros.]]></title>
		<link href="http://javimoreno.me/blog/2013/05/22/helios-iii-piratas-y-bucaneros/"/>
		
	  <updated>2013-05-22T06:54:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2013/05/22/helios-iii-piratas-y-bucaneros</id>
	  
	  <content type="html"><![CDATA[<blockquote><p>El puerto espacial de Mos Eisley. No encontrarás nunca un lugar como éste tan lleno de maldad y vileza. Debemos cuidarnos.</p><footer><strong>Star Wars</strong> <cite>Ben Kenobi Llegando a Mos Eisley Con Luke Skywalker</cite></footer></blockquote>

Para esta tercera entrega volvemos a basarnos en unos artículos de Rafa Aguilar (aka [@rais38](http://twitter.com/rais38)), recien publicados en [Objective-C.es](http://objective-c.es), donde primero nos explica las [categorías y tipos de In-App Purchases](http://objective-c.es/in-app-purchases-en-ios-parte-1/) y después [nos enseña con un ejemplo](http://objective-c.es/in-app-purchases-en-ios-parte-2/) lo sencillo que es incorporar a una aplicación esta excelente fuente de ingresos.      
Nosotros aquí vamos a ver como simplifica CargoBay el uso de IAP en nuestras aplicaciones y también a verificar si la compra se ha realizado correctamente por el método más seguro: un servidor con Helios.

<!--more-->

He de reconocer que a medida que he ido avanzando en el análisis de Helios he ido apreciando la bien que esta planteado y lo que puede suponer para un desarrollador que se quiera aventurar en la creación de su propio backend. Cierto es que la primera parte, la que replica el modelo Core Data en el servidor me parece que está todavía un poco floja, así como la sincronización entre los dispositivos y el backend. El soporte para notificaciones push está bien, todavía le queda camino que recorrer pero es un buen punto de partida si quieres tener tu propio gestor de notificaciones. Pero con CargoBay y Venice, la gestión de las compras dentro de la aplicación se simplifican una barbaridad. 

CargoBay es una pequeña librería de Mattt Thompson (del que no hemos hablado prácticamente nada en este blog) que facilita la gestión de estas transacciones al reducir a unos pocos métodos con bloques la recuperación de productos, comprobación del estado de la compra así como la verificación del recibo siguiendo las recomendaciones de Apple para evitar los fraudes en este tipo de compras. 

Venice, es la gema que incluye Helios para realizar la verificación del recibo en servidor (otra recomendación de Apple para evitar fraudes). La otra funcionalidad que ofrece esta gema es devolver un listado de identificadores de IAP, esto será muy útil cuando queramos cambiar la oferta de productos en nuestra aplicación sin tener que actualizar la aplicación vía iTunes Connect. Para poder utilizar esta funcionalidad, nuestra aplicación debe estar preparada para trabajar con todos los productos que le vayan a llegar por este servicio.

Con todo lo que ya sabemos gracias a Rafa, vamos a crear una aplicación que nos permita contratar los servicios de los piratas y cazarecompensas que habitan Mos Eisley. Sabemos que nadie es de fiar en este lugar así que mejor que incluyamos un sistema de verificación de las compras o nuestro jefe nos terminará dando de comer a un sarlacc (algo muy doloroso ya que recordemos que su digestión dura más de mil años).

Para probar algunas bondades de CargoBay vamos a hacer lo siguiente: En iTunes Connect vamos a crear las siguientes IAP tal y como nos ha [contado Rafa]():

Producto          | Identificador                             |
----------------- | ----------------------------------------- |
Han Solo          | com.cytdevteam.MosEisley.HanSolo
Chewbacca         | com.cytdevteam.MosEisley.Chewbacca
Millennium Falcon | com.cytdevteam.MosEisley.MillenniumFalcon
Modal Nodes       | com.cytdevteam.MosEisley.ModalNodes          


En nuestro repositorio de productos de Helios vamos a crear estos cuatro productos y dos más:      

Producto          | Identificador                             |
----------------- | ----------------------------------------- |
Han Solo          | com.cytdevteam.MosEisley.HanSolo
Chewbacca         | com.cytdevteam.MosEisley.Chewbacca
Millennium Falcon | com.cytdevteam.MosEisley.MillenniumFalcon
Modal Nodes       | com.cytdevteam.MosEisley.ModalNodes
Greedo            | com.cytdevteam.MosEisley.Greedo
Boba Fett         | com.cytdevteam.MosEisley.BobaFett         


Si echamos un vistazo a la documentación de Helios, veremos que los únicos métodos que ofrece para In-App Purchases son un GET de productos y un POST para comprobar recibos... ¿Cómo grabamos entonces los productos en la tabla? pues como graban los hombres, con SQL directamente sobre la base de datos.

Creamos un nuevo fichero *HeliosTasks.rake* en nuestro proyecto para poder lanzarlo tanto en local como en servidor de forma manual y escribimos lo siguiente:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:HeliosTasks</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;TODO&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:loadIdentifiers</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">require</span> <span class="s1">&#39;pg&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">connect</span><span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">pw</span><span class="p">)</span>
</span><span class='line'>      <span class="no">PGconn</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">5432</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">db</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">pw</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">populate_products</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sql</span> <span class="o">=</span> <span class="s2">&quot;DELETE FROM in_app_purchase_products;  -- empty contents of table</span>
</span><span class='line'><span class="s2">             INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) </span>
</span><span class='line'><span class="s2">                           VALUES (1, &#39;com.cytdevteam.MosEisley.HanSolo&#39;, &#39;Consumable&#39;, &#39;Han Solo&#39;, &#39;Han Solo The One And Only&#39;, 0.99, &#39;USD&#39;, &#39;t&#39;);</span>
</span><span class='line'><span class="s2">             INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) </span>
</span><span class='line'><span class="s2">                           VALUES (2, &#39;com.cytdevteam.MosEisley.Chewbacca&#39;, &#39;Consumable&#39;, &#39;Chewbacca&#39;, &#39;Chewbacca&#39;, 0.99, &#39;USD&#39;, &#39;t&#39;);</span>
</span><span class='line'><span class="s2">             INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) </span>
</span><span class='line'><span class="s2">                           VALUES (3, &#39;com.cytdevteam.MosEisley.MillenniumFalcon&#39;, &#39;Consumable&#39;, &#39;Millennium Falcon&#39;, &#39;Millennium Falcon&#39;, 4.99, &#39;USD&#39;, &#39;t&#39;);</span>
</span><span class='line'><span class="s2">             INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) </span>
</span><span class='line'><span class="s2">                           VALUES (4, &#39;com.cytdevteam.MosEisley.ModalNodes&#39;, &#39;Consumable&#39;, &#39;Modal Nodes&#39;, &#39;A real Modal Nodes` gig&#39;, 4.99, &#39;USD&#39;, &#39;t&#39;);</span>
</span><span class='line'><span class="s2">             INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) </span>
</span><span class='line'><span class="s2">                           VALUES (5, &#39;com.cytdevteam.MosEisley.Greedo&#39;, &#39;Consumable&#39;, &#39;Greedo&#39;, &#39;A coward that shot first&#39;, 4.99, &#39;USD&#39;, &#39;t&#39;);</span>
</span><span class='line'><span class="s2">             INSERT INTO in_app_purchase_products (id, product_identifier, type, title, description, price, price_locale, is_enabled) </span>
</span><span class='line'><span class="s2">                           VALUES (6, &#39;com.cytdevteam.MosEisley.BobaFett&#39;, &#39;Consumable&#39;, &#39;Boba Fett&#39;, &#39;He is no good to me dead&#39;, 4.99, &#39;USD&#39;, &#39;t&#39;);&quot;</span>
</span><span class='line'>      <span class="n">conn</span><span class="o">.</span><span class="n">exec</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="n">conn</span> <span class="o">=</span> <span class="n">connect</span><span class="p">(</span><span class="s1">&#39;databaseName&#39;</span><span class="p">,</span><span class="s1">&#39;username&#39;</span><span class="p">,</span><span class="s1">&#39;password&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Connected to </span><span class="si">#{</span><span class="n">conn</span><span class="o">.</span><span class="n">db</span><span class="si">}</span><span class="s2"> at </span><span class="si">#{</span><span class="n">conn</span><span class="o">.</span><span class="n">host</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">populate_products</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="no">PGError</span><span class="o">=&gt;</span><span class="n">e</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Oh Oh!&quot;</span><span class="p">,</span> <span class="n">e</span>
</span><span class='line'>    <span class="k">ensure</span>
</span><span class='line'>      <span class="n">conn</span><span class="o">.</span><span class="n">close</span> <span class="k">unless</span> <span class="n">conn</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Connection closed&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
    
No creo que os cueste mucho ver lo que hace: establece una conexión con la base de datos y a continuación borra e inserta seis registros. Si hubiera algún error saldría por la consola.

Si ahora escribimos en un navegador [http://localhost:3000/products/identifiers](http://localhost:3000/products/identifiers)

veríamos algo como esto:

<img src="/images/photos/2013/jsonResponse.png">

Ya hemos creado todas las IAP en iTunes Connect (que coñazo) y hemos insertado los productos que vamos a ofrecer en nuestro servidor. Es el momento de liarnos la manta a la cabeza con la aplicación.

Nos vamos a basar en la plantilla de Master-Detail con ARC, Storyboards y Core Data. La primera lista serán las compras que hayamos realizado. En Storyboard añadiremos un nuevo navigation controller con un UITableViewController donde mostraremos los productos que se pueden comprar a través del App Store. 

Si a estas alturas todavía no usas CocoaPods deberías hacerlo, es la forma más fácil de gestionar las librerías de terceros que usas en tus aplicaciones. En este caso, nuestro podfile incluirá AFNetworking, CargoBay y NSData+Base64:

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>platform :ios, '5.0'
</span><span class='line'>pod 'AFNetworking', '~> 1.2'
</span><span class='line'>pod 'CargoBay', '~> 0.3.2'
</span><span class='line'>pod 'NSData+Base64', '~> 1.0.0'</span></code></pre></td></tr></table></div></figure></notextile></div>
    
## Un pequeño expositor.

Ya sabemos que lo primero que hay que hacer es comprobar si nuestra aplicación tiene permiso para hacer compras dentro de la aplicación. En caso afirmativo podremos acceder a nuestros servidores para recuperar la información de los productos que tenemos a la venta:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Comprobamos si hay alguna restricción configurada en el device respecto a las In-App Purchases.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">SKPaymentQueue</span> <span class="n">canMakePayments</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Puedo hacer pagos In-App&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">getProductsInStoreKitDirectlyFromHelios</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Control parental activado&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Para cargar el UITableView del viewController de productos necesitamos un array de productos. Toda la información del producto tal y como está en iTunes Connect la podemos obtener a través de StoreKit pero CargoBay nos proporciona unos métodos con bloques que recuperan está información. Podemos hacerlo de dos formas: recuperando primero la lista de identificadores y después pasándole esta lista al método correspondiente:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">getProductsIdentifiersInHelios</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://localhost:3000/products/identifiers/&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLRequest</span> <span class="nl">requestWithURL:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">AFJSONRequestOperation</span> <span class="nl">JSONRequestOperationWithRequest:</span><span class="n">request</span> <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span><span class="p">,</span> <span class="n">NSHTTPURLResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">,</span> <span class="kt">id</span> <span class="n">JSON</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">getProductsInStoreKitFromArray:</span><span class="n">JSON</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span><span class="p">,</span> <span class="n">NSHTTPURLResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="kt">id</span> <span class="n">JSON</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">description</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">getProductsInStoreKitFromArray:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">array</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">CargoBay</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">productsWithIdentifiers:</span><span class="p">[</span><span class="n">NSSet</span> <span class="nl">setWithArray:</span><span class="n">array</span><span class="p">]</span> <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">products</span><span class="p">,</span> <span class="n">NSArray</span> <span class="o">*</span><span class="n">invalidIdentifiers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_productsArray</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_productsArray</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableArray</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCapacity:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Products: %@&quot;</span><span class="p">,</span> <span class="n">products</span><span class="p">);</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Invalid Identifiers: %@&quot;</span><span class="p">,</span> <span class="n">invalidIdentifiers</span><span class="p">);</span>
</span><span class='line'>        <span class="n">_productsArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="nl">arrayWithArray:</span><span class="n">products</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tableView</span> <span class="n">reloadData</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

O bien, si tenemos la certeza que el servicio ya nos devuelve los datos en una array únicamente con los identificadores (que es como espera CargoBay que se lo pasemos), podemos hacerlo todo en un único método:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">getProductsInStoreKitDirectlyFromHelios</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://localhost:3000/products/identifiers/&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLRequest</span> <span class="nl">requestWithURL:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">CargoBay</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">productsWithRequest:</span><span class="n">request</span> <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">products</span><span class="p">,</span> <span class="n">NSArray</span> <span class="o">*</span><span class="n">invalidIdentifiers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Products: %@&quot;</span><span class="p">,</span> <span class="n">products</span><span class="p">);</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Invalid Identifiers: %@&quot;</span><span class="p">,</span> <span class="n">invalidIdentifiers</span><span class="p">);</span>
</span><span class='line'>        <span class="n">_productsArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="nl">arrayWithArray:</span><span class="n">products</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tableView</span> <span class="n">reloadData</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">description</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
    
En cualquiera de los dos casos, el resultado del log será el siguiente:

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2013-05-15 16:14:48.275 MosEisley[3242:c07] Products: (
</span><span class='line'>    "&lt;SKProduct: 0x77ad230>",
</span><span class='line'>    "&lt;SKProduct: 0x82a5ab0>",
</span><span class='line'>    "&lt;SKProduct: 0x8267f70>",
</span><span class='line'>    "&lt;SKProduct: 0x8263400>"
</span><span class='line'>)
</span><span class='line'>2013-05-15 16:14:48.275 MosEisley[3242:c07] Invalid Identifiers: (
</span><span class='line'>    "com.cytdevteam.MosEisley.Greedo",
</span><span class='line'>    "com.cytdevteam.MosEisley.BobaFett"
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure></notextile></div>

Es decir, hemos recuperado seis registros de nuestro servidor de los cuales cuatro son productos correctos en iTunes Connect y dos no lo son. Solo mostraremos los productos correctos:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#pragma mark - Table view data source</span>
</span><span class='line'>
</span><span class='line'> <span class="o">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nl">numberOfSectionsInTableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="n">tableView</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>     <span class="c1">// Return the number of sections.</span>
</span><span class='line'>     <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="o">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nl">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="n">tableView</span> <span class="nl">numberOfRowsInSection:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="n">section</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>     <span class="c1">// Return the number of rows in the section.</span>
</span><span class='line'>     <span class="k">return</span> <span class="p">[</span><span class="n">_productsArray</span> <span class="n">count</span><span class="p">];</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="o">-</span> <span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nl">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="n">tableView</span> <span class="nl">cellForRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="n">indexPath</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>     <span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">CellIdentifier</span> <span class="o">=</span> <span class="s">@&quot;Cell&quot;</span><span class="p">;</span>
</span><span class='line'>     <span class="n">UITableViewCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">[</span><span class="n">tableView</span> <span class="nl">dequeueReusableCellWithIdentifier:</span><span class="n">CellIdentifier</span> <span class="nl">forIndexPath:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// Configure the cell...</span>
</span><span class='line'>     <span class="n">SKProduct</span> <span class="o">*</span><span class="n">product</span> <span class="o">=</span> <span class="p">[</span><span class="n">_productsArray</span> <span class="nl">objectAtIndex:</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">cell</span><span class="p">.</span><span class="n">textLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">product</span><span class="p">.</span><span class="n">localizedTitle</span><span class="p">;</span>
</span><span class='line'>     <span class="n">cell</span><span class="p">.</span><span class="n">detailTextLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">product</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">;</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Esta será, más o menos, la imagen de nuestro expositor:

<img src="/images/photos/2013/productsViewController.png">

Para realizar las compras, CargoBay no tiene ninguna utilidad desarrollada por el momento, la única diferencia con el tutorial de Rafa es que el observer no es necesario incluirlo aquí ya que lo vamos a hacer en el `(BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions` para que gestiones no solo estas compras si no también las compras que pudieran haber quedado pendientes al cerrar la aplicación:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#pragma mark - Table view delegate</span>
</span><span class='line'>
</span><span class='line'> <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="n">tableView</span> <span class="nl">didSelectRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="n">indexPath</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>     <span class="c1">// Añadimos el producto que recibimos en el método delegado productsRequest:didReceiveResponse:</span>
</span><span class='line'>     <span class="n">SKPayment</span> <span class="o">*</span><span class="n">pago</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKPayment</span> <span class="nl">paymentWithProduct:</span><span class="p">[</span><span class="n">_productsArray</span> <span class="nl">objectAtIndex:</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">]];</span>
</span><span class='line'>     <span class="c1">// Nos añadimos a nosotros mismos como observadores de la transacción.</span>
</span><span class='line'> <span class="c1">//    [[SKPaymentQueue defaultQueue] addTransactionObserver:self];</span>
</span><span class='line'>     <span class="p">[[</span><span class="n">SKPaymentQueue</span> <span class="n">defaultQueue</span><span class="p">]</span> <span class="nl">addPayment:</span><span class="n">pago</span><span class="p">];</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

## Que no se pierda ni un recibo.

Tal y como acabamos de comentar, el *observer* de la cola de pagos lo vamos a incluir en `(BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions` para que no se pierda ni una sola operación. Además incluimos el bloque que se llamará cada vez que haya alguna actualización de una transacción:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Payment Queue Observation with CargoBay</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">CargoBay</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">setPaymentQueueUpdatedTransactionsBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">SKPaymentQueue</span> <span class="o">*</span><span class="n">queue</span><span class="p">,</span> <span class="n">NSArray</span> <span class="o">*</span><span class="n">transactions</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Updated Transactions: %@&quot;</span><span class="p">,</span> <span class="n">transactions</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">SKPaymentTransaction</span> <span class="o">*</span><span class="n">transaction</span> <span class="k">in</span> <span class="n">transactions</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">switch</span> <span class="p">(</span><span class="n">transaction</span><span class="p">.</span><span class="n">transactionState</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">SKPaymentTransactionStatePurchased:</span>
</span><span class='line'>                    <span class="p">[</span><span class="n">self</span> <span class="nl">oneStepVerification:</span><span class="n">transaction</span><span class="p">];</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">SKPaymentTransactionStateFailed:</span>
</span><span class='line'>                         <span class="c1">// TODO</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">SKPaymentTransactionStateRestored:</span>
</span><span class='line'>                         <span class="c1">// TODO</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[[</span><span class="n">SKPaymentQueue</span> <span class="n">defaultQueue</span><span class="p">]</span> <span class="nl">addTransactionObserver:</span><span class="p">[</span><span class="n">CargoBay</span> <span class="n">sharedManager</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Override point for customization after application launch.</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
    
Cuando la transacción pase a un estado de *purchased* es cuando deberemos realizar las acciones derivadas de la compra, antes de hacer nada es cuando deberíamos asegurarnos de que el recibo es verdadero. Las dos opciones que tenemos son verificar dentro de la propia aplicación accediendo a un servicio de Apple o llamar a un servicio nuestro que realice ese mismo acceso. Para el primer caso, CargoBay ya nos proporciona un método que realiza esa verificación:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">oneStepVerification:</span><span class="p">(</span><span class="n">SKPaymentTransaction</span> <span class="o">*</span><span class="p">)</span><span class="nv">transaction</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">CargoBay</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">verifyTransaction:</span><span class="n">transaction</span> <span class="nl">password:</span><span class="nb">nil</span> <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">receipt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Receipt: %@&quot;</span><span class="p">,</span> <span class="n">receipt</span><span class="p">);</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">serverSideVerification:</span><span class="n">transaction</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error %d (%@)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">code</span><span class="p">],</span> <span class="p">[</span><span class="n">error</span> <span class="n">localizedDescription</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Es de sobra conocido que tanto las IAP son fácilmente *pirateables* y aunque la verificación desde la propia aplicación aumenta la seguridad de nuestras ventas, también son conocidos los casos en los que esta verificación también ha sido *hackeada*. La otra utilidad de Venice es la realización de esta misma verificación en nuestro servidor:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">serverSideVerification:</span><span class="p">(</span><span class="n">SKPaymentTransaction</span> <span class="o">*</span><span class="p">)</span><span class="nv">transaction</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://localhost:3000/receipts/verify&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSMutableURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableURLRequest</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithURL:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">request</span> <span class="nl">setHTTPMethod:</span><span class="s">@&quot;POST&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSArray</span> <span class="o">*</span><span class="n">paths</span> <span class="o">=</span> <span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span><span class="n">NSDocumentDirectory</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="n">YES</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">documentsDirectory</span> <span class="o">=</span> <span class="p">[</span><span class="n">paths</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">appFile</span> <span class="o">=</span> <span class="p">[</span><span class="n">documentsDirectory</span> <span class="nl">stringByAppendingPathComponent:</span><span class="s">@&quot;TransactionReceipt&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">transaction</span><span class="p">.</span><span class="n">transactionReceipt</span> <span class="nl">writeToFile:</span><span class="n">appFile</span> <span class="nl">atomically:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;receipt-data=%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">transaction</span><span class="p">.</span><span class="n">transactionReceipt</span> <span class="n">base64EncodedString</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">NSData</span> <span class="o">*</span><span class="n">httpBody</span> <span class="o">=</span> <span class="p">[</span><span class="n">params</span> <span class="nl">dataUsingEncoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">request</span> <span class="nl">setHTTPBody:</span><span class="n">httpBody</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">NSURLConnection</span> <span class="nl">sendAsynchronousRequest:</span><span class="n">request</span> <span class="nl">queue:</span><span class="p">[</span><span class="n">NSOperationQueue</span> <span class="n">mainQueue</span><span class="p">]</span> <span class="nl">completionHandler:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURLResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">,</span> <span class="n">NSData</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSHTTPURLResponse</span> <span class="o">*</span><span class="n">httpResponse</span> <span class="o">=</span> <span class="p">(</span><span class="n">NSHTTPURLResponse</span> <span class="o">*</span><span class="p">)</span><span class="n">response</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">httpResponse</span><span class="p">.</span><span class="n">statusCode</span> <span class="o">==</span> <span class="mi">200</span> <span class="o">||</span> <span class="n">httpResponse</span><span class="p">.</span><span class="n">statusCode</span> <span class="o">==</span> <span class="mi">203</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kt">id</span> <span class="n">receipt</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSJSONSerialization</span> <span class="nl">JSONObjectWithData:</span><span class="n">data</span>
</span><span class='line'>                                                         <span class="nl">options:</span><span class="mi">0</span>
</span><span class='line'>                                                           <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Received receipt: %@&quot;</span><span class="p">,</span> <span class="n">receipt</span><span class="p">);</span>
</span><span class='line'>            <span class="p">[[</span><span class="n">SKPaymentQueue</span> <span class="n">defaultQueue</span><span class="p">]</span> <span class="nl">finishTransaction:</span> <span class="n">transaction</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Body: %@&quot;</span><span class="p">,</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithData:</span><span class="n">data</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">]);</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;ERROR: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

En el ejemplo de nuestra aplicación realizamos primero la verificación desde nuestra aplicación y posteriormente nos aseguramos repitiendo la verificación en nuestro servidor. Quizá sería más práctico hacerlo al revés: primero en nuestro servidor y si, por algún motivo, no hemos podido realizar la verificación hacerla desde nuestra aplicación como segunda opción.

Ah, podemos dormir tranquilos. La verificación desde nuestro servidor deja registro para que podamos hacernos una idea del volumen de nuestras compras... y a lo mejor sorprender a algún tunante:

<img src="/images/photos/2013/helios-panel-admin.png">

A partir de aquí, si la compra ha sido correcta, podemos insertar el registro en nuestra base de datos que le informa a la aplicación que la compra ha sido registrada con éxito. En el ejemplo de Rafa, en este momento habría que descargar la canción.

Por esta vez nada más, si habéis leído los anteriores notaréis que esta vez estoy más entusiasmado con la funcionalidad de Helios. No me he pegado mucho con StoreKit, tan solo con la versión pro de una aplicación, pero la verdad es que ahora si que tengo claro que usaré CargoBay y con toda seguridad haré la verificación en servidor con Venice... aunque haya que tocar algo el código base.

> Ojito con las dependencias. No se que versión de Helios, CargoBay y AFNetworking estaréis utilizando pero se nota que estos frameworks se están tocando bastante estos días. Yo he tenido algún problemita que otro a la hora de preparar esta entrada. Nada que un par de horas de cabezazos en la pared no solucionen... ;-)]]></content>
		
	</entry>
	
	<entry>
	  
		<title type="html"><![CDATA[Helios II. Houston, tenemos un problema.]]></title>
		<link href="http://javimoreno.me/blog/2013/05/02/helios-ii-houston/"/>
		
	  <updated>2013-05-02T03:36:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2013/05/02/helios-ii-houston</id>
	  
	  <content type="html"><![CDATA[<blockquote><p>- Okay, Houston, we've had a problem here.<br/>- This is Houston. Say again, please!<br/>- Uh, Houston, we've had a problem.</p><footer><strong>CAPCOM Apollo XIII</strong> <cite>Jack Swigert - Jack R. Lousma - James a. Lovell.</cite></footer></blockquote>

Aprovechando que Rafa Aguilar (aka [@rais38](http://twitter.com/rais38)) ha publicado en [Objective-C.es](http://objective-c.es) un par de entradas sobre las notificaciones Push en iOS he decidido aparcar un par de cosillas que me tenían bastante atareado y continuar con el análisis de [Helios.io](http://helios.io) que había prometido.

<!--more-->

Yo no me voy a detener a explicar en que consisten las notificaciones Push y que tipos podemos encontrar en iOS ya que Rafa lo ha explicado estupendamente si no que voy a contar como se desarrollaría el ejemplo de la segunda entrada con Ruby en lugar de con PHP. Para ello, usaré Houston, una gema desarrollada por [@mattt](http://twitter.com/mattt). La versión actual de Helios (que tiene unas pocas horas) ya incluye Houston de serie así que Helios y Orbiter nos proporcionan un backend completo para el envío de notificaciones Push.

Os dejo los enlaces a los artículos de Rafa por si los queréis consultar antes de empezar:

[Envío de notificaciones en iOS (Parte 1)](http://objective-c.es/envio-de-notificaciones-en-ios-parte-1/)

[Envío de notificaciones en iOS (Parte 2)](http://objective-c.es/envio-de-notificaciones-en-ios-parte-2/)

##Helios y Orbiter. Preparando el CAPCOM.

Si habéis seguido las indicaciones del artículo de Objective-C.es, tendréis una aplicación instalada en vuestro dispositivo que vuelca al log de Xcode el token que le devuelven los servidores de Apple para las notificaciones Push.
Helios y Orbiter nos proporcionan un sistema para almacenar esos tokens en un servidor, esto nos será útil cuando queramos enviar notificaciones desde nuestro servidor a los dispositivos que tengamos vinculados a nuestra aplicación. No será necesario pasar siempre el token al servicio si no que podría bastar con usar el *alias*.

Para ello, nos descargamos Orbiter de GitHub y lo incorporamos a nuestro proyecto o bien usamos CocoaPods, lo que hagamos habitualmente y modificamos el siguiente método del AppDelegate:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didRegisterForRemoteNotificationsWithDeviceToken:</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">deviceToken</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">serverURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://192.168.1.105:3000&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSURLCredential</span> <span class="o">*</span><span class="n">serverCredential</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLCredential</span> <span class="nl">credentialWithUser:</span><span class="s">@&quot;YourUsername&quot;</span> <span class="nl">password:</span><span class="s">@&quot;YourPassword&quot;</span> <span class="nl">persistence:</span><span class="n">NSURLCredentialPersistencePermanent</span><span class="p">];</span>
</span><span class='line'>    <span class="n">Orbiter</span> <span class="o">*</span><span class="n">orbiter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Orbiter</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithBaseURL:</span><span class="n">serverURL</span> <span class="nl">credential:</span><span class="n">serverCredential</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">orbiter</span> <span class="nl">registerDeviceToken:</span><span class="n">deviceToken</span> <span class="nl">withAlias:</span><span class="s">@&quot;ApoloXIII&quot;</span> <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">responseObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Registration Success: %@&quot;</span><span class="p">,</span> <span class="n">responseObject</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Registration Error: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
    
El servidor que voy a utilizar para almacenar los tokens y enviar las notificaciones es el mismo de la entrada anterior sobre almacenamiento de datos y sincronización. Si recordáis, una de las cosas que hicimos fue poner seguridad por lo que necesitamos pasarle un usuario y una contraseña. Orbiter usa NSURLCredential para estos fines.

Si hemos hecho todo correctamente, al arrancar la aplicación en el dispositivo obtendremos el siguiente resultado:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>2013-05-01 11:07:01.903 CAPCOM<span class="o">[</span>24399:907<span class="o">]</span> Registration Success: <span class="o">{</span>
</span><span class='line'><span class="nv">device</span> <span class="o">=</span>     <span class="o">{</span>
</span><span class='line'>    <span class="nb">alias</span> <span class="o">=</span> ApoloXIII;
</span><span class='line'>    <span class="nv">badge</span> <span class="o">=</span> 0;
</span><span class='line'>    <span class="nv">id</span> <span class="o">=</span> 1;
</span><span class='line'>    <span class="s2">&quot;ip_address&quot;</span> <span class="o">=</span> <span class="s2">&quot;&lt;null&gt;&quot;</span>;
</span><span class='line'>    <span class="nv">language</span> <span class="o">=</span> es;
</span><span class='line'>    <span class="nv">lat</span> <span class="o">=</span> <span class="s2">&quot;&lt;null&gt;&quot;</span>;
</span><span class='line'>    <span class="nv">lng</span> <span class="o">=</span> <span class="s2">&quot;&lt;null&gt;&quot;</span>;
</span><span class='line'>    <span class="nv">locale</span> <span class="o">=</span> <span class="s2">&quot;es_ES&quot;</span>;
</span><span class='line'>    <span class="nv">tags</span> <span class="o">=</span>         <span class="o">(</span>
</span><span class='line'>        <span class="s2">&quot;iPhone OS 6.1.3&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;v1.0&quot;</span>,
</span><span class='line'>        iPhone
</span><span class='line'>    <span class="o">)</span>;
</span><span class='line'>    <span class="nv">timezone</span> <span class="o">=</span> <span class="s2">&quot;Europe/Madrid&quot;</span>;
</span><span class='line'>    <span class="nv">token</span> <span class="o">=</span> 1F0E7706D1A343BF17615051DB944743F18156C52EFF0F8DD43DDA23F156862A;
</span><span class='line'>    <span class="nv">tsv</span> <span class="o">=</span> <span class="s2">&quot;&#39;1f0e7706d1a343bf17615051db944743f18156c52eff0f8dd43dda23f156862a&#39;:1 &#39;apoloxiii&#39;:2 &#39;es&#39;:3,4 &#39;europe/madrid&#39;:5&quot;</span>;
</span><span class='line'>    <span class="o">}</span>;
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
    
Y en el panel de administración de Helios veremos lo siguiente:

<img src="/images/photos/2013/admin-helios-tokens.png">

Ahora tenemos que preparar nuestro servidor para que realice el envío de notificaciones Push. Como ya hemos comentado al principio, esta funcionalidad no la traía Helios en su primera versión y nos obligaba a nosotros a incluir y configurar esta gema. Hace pocas horas han actualizado el repositorio de Helios incluyendo la funcionalidad de envío de mensajes mediante Houston. Como el merge en GitHub es tan reciente, la gema que hay en [RubyGems.org](http://rubygems.org/gems/helios) todavía no está actualizada así que para poder usarla en nuestro proyecto Rails he tenido que indicar en el *gemfile* que tome el fuente de GitHub. Al hacerlo de esta forma, las dependencias no son visibles por el Bundler por lo que, para evitar errores, he indicado también que necesitamos la gema **Houston**.

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem <span class="s1">&#39;helios&#39;</span>, :git <span class="o">=</span>&gt; <span class="s1">&#39;git://github.com/helios-framework/helios.git&#39;</span>
</span><span class='line'>gem <span class="s1">&#39;houston&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
 
Ahora tendremos que guardar el certificado para realizar APS en alguna carpeta de nuestro proyecto y decirle a Helios donde está. Los pasos que hay que seguir para trabajar con los certificados están en el post de Rafa, lo único que haremos diferente es el paso de exportación del certificado, al que le daremos un nombre más *comodo* para nuestra configuración:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>openssl pkcs12 -in CAPCOMAPNDEV.p12 -out apple_push_notification.pem -nodes -clcerts
</span></code></pre></td></tr></table></div></figure></notextile></div>
   
El fichero .pem resultante lo dejaremos en la carpeta *config* de nuestro proyecto (junto al xcdatamodel) y modificaremos la configuración de Helios en nuestro *application.rb* de la siguiente manera:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Using framework Helios as a middleware for our app</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="ss">Helios</span><span class="p">:</span><span class="ss">:Application</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">service</span> <span class="ss">:data</span><span class="p">,</span> <span class="ss">model</span><span class="p">:</span> <span class="s1">&#39;./config/DealerErgoGo.xcdatamodel&#39;</span>
</span><span class='line'>  <span class="n">service</span> <span class="ss">:push_notification</span><span class="p">,</span> <span class="n">apn_certificate</span><span class="p">:</span> <span class="s1">&#39;.config/apple_push_notification.pem&#39;</span><span class="p">,</span> <span class="n">apn_environment</span><span class="p">:</span> <span class="s1">&#39;development&#39;</span>
</span><span class='line'>  <span class="n">service</span> <span class="ss">:in_app_purchase</span>
</span><span class='line'>  <span class="n">service</span> <span class="ss">:passbook</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
    
Para comprobar que todo está bien configurado, ejecutamos la siguiente instrucción desde el terminal (recordad que nuestro servidor tiene configurado usuario y contraseña):

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -X POST --user <span class="s2">&quot;username:password&quot;</span> -d <span class="s1">&#39;payload={&quot;aps&quot;: {&quot;alert&quot;:&quot;Okay, stand by Thirteen, we are looking at it.&quot;,&quot;badge&quot;:&quot;13&quot;,&quot;sound&quot;:&quot;default&quot;}}&#39;</span> http://localhost:3000/message
</span></code></pre></td></tr></table></div></figure></notextile></div>

Listo, parece que ya tenemos comunicación con Houston... o por lo menos recibimos sus mensajes. ;-)

<img src="/images/photos/2013/notificacion-iphone.png" width="320" height="480">
 
Houston incluye una utilidad de terminal a la que le pasamos un token, la ubicación del certificado y el mensaje que queremos enviar. Esto no verifica que hayamos configurado correctamente ningún servidor, solo que el certificado y el token sean correctos:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apn push <span class="s2">&quot;1F0E7706D1A343BF17615051DB944743F18156C52EFF0F8DD43DDA23F156862A&quot;</span> -c <span class="s2">&quot;config/apple_push_notification.pem&quot;</span> -m <span class="s2">&quot;Okay, stand by Thirteen, we&#39;re looking at it.&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
    
## Siguientes pasos

Nuevamente vuelvo a tener sentimientos encontrados. Aunque esta vez he terminado más satisfecho de forma general con los resultados obtenidos de Helios, Orbiter y Houston todavía queda mucho por hacer para tener algo que se parezca mínimamente a lo que nos ofrecen Parse o Urban Airship

Hemos almacenado los tokens en nuestro servidor y hemos sido capaces de enviar notificaciones a nuestro dispositivo desde el terminal. Podríamos realizar el envío de mensajes desde la propia aplicación con un método semejante a este:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">useHoustonServiceWithAlert:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">alert</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://localhost:3000&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">AFHTTPClient</span> <span class="o">*</span><span class="n">httpClient</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AFHTTPClient</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithBaseURL:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">httpClient</span> <span class="nl">setAuthorizationHeaderWithUsername:</span><span class="s">@&quot;GoogleReader&quot;</span> <span class="nl">password:</span><span class="s">@&quot;F0r3v3r&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">payload</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;aps&quot;</span><span class="o">:</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;alert&quot;</span><span class="o">:</span> <span class="n">alert</span><span class="p">,</span> <span class="s">@&quot;sound&quot;</span><span class="o">:</span> <span class="s">@&quot;default&quot;</span><span class="p">}};</span>
</span><span class='line'>    <span class="n">NSData</span> <span class="o">*</span><span class="n">jsonData</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSJSONSerialization</span> <span class="nl">dataWithJSONObject:</span><span class="n">payload</span>
</span><span class='line'>                                                       <span class="nl">options:</span><span class="mi">0</span>
</span><span class='line'>                                                         <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">JSONString</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithBytes:</span><span class="p">[</span><span class="n">jsonData</span> <span class="n">bytes</span><span class="p">]</span> <span class="nl">length:</span><span class="p">[</span><span class="n">jsonData</span> <span class="n">length</span><span class="p">]</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys:</span>
</span><span class='line'>                            <span class="n">JSONString</span><span class="p">,</span> <span class="s">@&quot;payload&quot;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">httpClient</span> <span class="nl">postPath:</span><span class="s">@&quot;/message&quot;</span> <span class="nl">parameters:</span><span class="n">params</span> <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="n">AFHTTPRequestOperation</span> <span class="o">*</span><span class="n">operation</span><span class="p">,</span> <span class="kt">id</span> <span class="n">responseObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span><span class="n">responseStr</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithData:</span><span class="n">responseObject</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Request Successful, response &#39;%@&#39;&quot;</span><span class="p">,</span> <span class="n">responseStr</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">AFHTTPRequestOperation</span> <span class="o">*</span><span class="n">operation</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;[HTTPClient Error]: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Pero en realidad este mensaje no se lo estaríamos enviando al Apolo XIII solamente si no a toda la misión Apolo. Si nos atrevemos a mirar el código fuente de Helios, el fichero [*push-notification.rb*](https://github.com/helios-framework/helios/blob/master/lib/helios/backend/push-notification.rb) es bastante clarificador: no solo admite el parámetro *payload*, también admite otro parámetro llamado *tokens* que es de tipo *array*. Es decir, si le pasamos un array de tokens el mensaje solo llegará a los dispositivos determinados por esos tokens.

Pero los tokens están almacenados en el servidor, hacemos el registro con Orbiter cada vez que un dispositivo en el que instalamos la aplicación acepta que le enviemos notificaciones Push. ¿Tenemos que descargarnos el listado completo de tokens al dispositivo y filtrar por los *alias*? Parece que no.

Si nos fijamos en el mismo fuente de antes, donde se define el método get devices, vemos que hay algunos parámetros que se le pueden pasar a dicho método: pages, per_page, limit, offset y q... los cuatro primeros son, obviamente, para controlar la paginación de los resultados y el quinto parece ser el indicado para hacer una *query* a la tabla *Device* pero, ¿qué es [*tsquery*](http://www.postgresql.org/docs/9.1/static/textsearch-tables.html)? Pues según la documentación de PostgreSQL es la forma de hacer búsqueda completa de texto dentro de una determinada entidad. 

En realidad *tsquery* devolverá todas las registros en los que aparezca el **lexema** que estamos buscando, esto es, si queremos buscar el token del Apolo XIII haríamos una llamada como la siguiente: 

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -X GET --user <span class="s2">&quot;GoogleReader:F0r3v3r&quot;</span> http://localhost:3000/devices?q<span class="o">=</span>ApoloXIII
</span></code></pre></td></tr></table></div></figure></notextile></div>
	
Pero si, por ejemplo, quisiéramos buscar el token del Apolo XI:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -X GET --user <span class="s2">&quot;GoogleReader:F0r3v3r&quot;</span> http://localhost:3000/devices?q<span class="o">=</span>ApoloXI
</span></code></pre></td></tr></table></div></figure></notextile></div>
	
Recuperariamos los tokens de los Apolos XI, XII, XIII y XIV. Es más, como la búsqueda se hace en todos los campos de la entidad Device, pudiera ser que recuperáramos algún otro registro más. Por ejemplo, si en vez de misiones espaciales utilizáramos como *alias* los nombres de las lunas de Jupiter. Al buscar el token de *Europe*, la consulta nos devolvería el token del alias *Europe* y el de todos los registros de dispositivos con *timezone* europeo.

Para este caso particular, y viendo el funcionamiento de los servicios de Parse y Urban Airship, sería conveniente ampliar las funcionalidades de push-notification.rb para incluir los alias como parámetro y buscar sus tokens. Además sería conveniente hacer el envío de notificaciones en batch para los casos en los que hubiera muchos tokens. Sería recomendable que las notificaciones se almacenaran en base de datos y que el envío se hiciera en background... vamos, que esto es un no parar. :-)

Aun con todo el trabajo que queda por hacer, hemos podido ver lo sencillo que es montar un sistema de notificaciones para nuestras aplicaciones iOS. Si solo lo queremos para enviar, de vez en cuando, un mensajero para que nos compren alguna aplicación, con esto tenemos más que suficiente.






]]></content>
		
	</entry>
	
	<entry>
	  
		<title type="html"><![CDATA[Send to kindle para Octopress]]></title>
		<link href="http://javimoreno.me/blog/2013/03/22/send-to-kindle-para-octopress/"/>
		
	  <updated>2013-03-22T00:35:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2013/03/22/send-to-kindle-para-octopress</id>
	  
	  <content type="html"><![CDATA[Cuando escribí la [_oda_ a Octopress](/blog/2013/03/08/como-mola-octopress/) comenté que me sentía más comodo con Ruby para tocar diversas partes del código del blog, como por ejemplo los plugins. En esta entrada voy a aprovechar la noticia del botón de [enviar a kindle](http://www.genbeta.com/web/amazon-lanza-su-boton-para-enviar-contenido-al-kindle-desde-un-sitio-web) para que veáis lo fácil que es hacer un plugin.

<!--more-->
      	
En primer lugar, vamos a ir a la página de Amazon donde [configuramos el botón](http://www.amazon.com/gp/sendtokindle/developers/button) a nuestro gusto y generamos el widget. Según esta página, tendríamos que seguir dos sencillos pasos para poner el botón en nuestra web: 

1. Insertar un script antes del cierre de la etiqueta _body_.
2. Insertar un trozo de HTML en el lugar donde queremos que aparezca el botón.

Lo que nosotros queremos es que el botón aparezca al final de nuestras entradas, junto con los botones de Karmacracy, Twitter, Facebook y Google+. En primer lugar, crearemos una variable *send_to_kindle* en el fichero _config.yml.

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># Send To Kindle Button</span>
</span><span class='line'><span class="l-Scalar-Plain">send_to_kindle</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

De esta forma, podremos elegir poner o no el botón en nuestro blog.

Octopress viene de serie con opciones para compartir en Twitter, Facebook, Google+, etc. El fichero donde están recogidas las diferentes opciones se llama _sharing.html_ y se encuentra en source/_includes/post/sharing.html. En este fichero es donde insertaremos el fragmento HTML del paso 2:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{ % if site.send_to_kindle %}
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;kindleWidget&quot;</span> <span class="na">style=</span><span class="s">&quot;display:inline-block;padding:3px;cursor:pointer;font-size:11px;font-family:Arial;border-radius:3px;border:#ccc thin solid;color:black;background:transparent url(&#39;https://d1xnn692s7u6t6.cloudfront.net/button-gradient.png&#39;) repeat-x;background-size:contain;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  	<span class="nt">&lt;img</span> <span class="na">style=</span><span class="s">&quot;vertical-align:middle;&quot;</span> <span class="na">src=</span><span class="s">&quot;https://d1xnn692s7u6t6.cloudfront.net/black-15.png&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  	<span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">&quot;vertical-align:middle;margin-left:3px;&quot;</span><span class="nt">&gt;</span>Send to Kindle<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>{ % endif %}
</span></code></pre></td></tr></table></div></figure></notextile></div>

Creo que lo que está pasando aquí es fácil de entender: solo si la variable global *send_to_kindle* esta configurada como true, se inyectará el fragmento HTML.
> Una aclaración. El uso de variables, condiciones, etc en Jekyll se realiza encerrando los trozos de código entre llave-porcentaje y porcentaje-llave. En el snippet anterior he escrito { % para que pudierais verlo porque de lo contrario, al generar esta entrada Jekyll habría interpretado que estaba intentando evaluar alguna condición y no lo habría mostrado. Si lo váis a copiar y pegar, acordaros de quitar el espacio entre { y %.

Bueno, ya solo nos falta incluir el script al final del body de nuestra página. Ahora vamos a ver lo bien organizado que está todo en Octopress: en la carpeta source/\_includes hay un archivo que se llama *after\_footer.html*. Cuando lo editamos vemos que contiene _includes_ de ficheros llamados google\_plus\_one.html, twitter\_sharing.html, etc. Estos ficheros están en la misma carpeta y al abrirlos podemos ver que contienen los scripts necesarios para los botónes de Google+, Twitter, etc. 
Vamos a crear un nuevo fichero en esta misma carpeta llamado send\_to\_kindle.html y en el incluiremos el script que nos indican en Amazon que hay que poner al final del body. Nuevamente, evaluaremos si la variable para incluir el botón está a true:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{ % if site.send_to_kindle %}
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;https://d1xnn692s7u6t6.cloudfront.net/widget.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span><span class="p">(</span><span class="kd">function</span> <span class="nx">k</span><span class="p">(){</span><span class="nb">window</span><span class="p">.</span><span class="nx">$SendToKindle</span><span class="o">&amp;&amp;</span><span class="nb">window</span><span class="p">.</span><span class="nx">$SendToKindle</span><span class="p">.</span><span class="nx">Widget</span><span class="o">?</span><span class="nx">$SendToKindle</span><span class="p">.</span><span class="nx">Widget</span><span class="p">.</span><span class="nx">init</span><span class="p">({})</span><span class="o">:</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="mi">500</span><span class="p">);})();</span><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>{ % endif %}
</span></code></pre></td></tr></table></div></figure></notextile></div>

Y en el archivo *after\_footer.html* incluiremos el nuevo html que acabamos de crear:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{ % include send_to_kindle.html %}
</span></code></pre></td></tr></table></div></figure></notextile></div>

Listo, si ahora generamos y previsualizamos nuestro blog podremos ver un botón al final de cada artículo para enviar el contenido al kindle.

Como véis, todo es muy intuitivo. Con un poco de sentido común y navegando por las carpetas del blog para ver como funcionan los plugins que vienen de serie podemos ir dejando Octopress a nuestro gusto.

Pd: No me gusta como queda el botón, sale más alto de lo que se previsualiza en el sitio de Amazón. Mis conocimientos de css, javascript y html son bastante limitados por lo que no estoy seguro de si es algo que podamos corregir o si por el contrario está así en el widget.js y no podemos hacer nada. Tampoco me gusta que el botón de Karmacracy salga en una linea aparte pero son esas cosas que no he conseguido arreglar. Si vosotros habéis conseguido dejarlo mejor... decidme como!!!! 
]]></content>
		
	</entry>
	
	<entry>
	  
		<title type="html"><![CDATA[Como se hizo URLHunter]]></title>
		<link href="http://javimoreno.me/blog/2013/03/11/como-se-hizo-urlhunter/"/>
		
	  <updated>2013-03-11T02:43:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2013/03/11/como-se-hizo-urlhunter</id>
	  
	  <content type="html"><![CDATA[Vamos a demostrar que no hace falta ser un figura para hacer algo muy util y aparente. Vaya por delante que, si somos capaces de hacer esto es porque existen páginas como las de [Railscasts][1].  
Lo primero que hacemos después de crear nuestro nuevo proyecto Rails es instalar las gemas necesarias para trabajar con Twitter Bootstrap, del que somos fans.

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;therubyracer&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;less-rails&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;twitter-bootstrap-rails&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!--more-->
      	
Después de cargar las gemas en nuestro proyecto con Bundle Install, terminamos de instalar Bootstrap en nuestro proyecto con la siguiente instrucción:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="n">g</span> <span class="ss">bootstrap</span><span class="p">:</span><span class="n">install</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

El propósito de nuestra aplicación es mostrar un listado de los tweets de [@objectivec_es][2] que contienen una url. De esta forma tendremos agrupados en una web toda esa información tan interesante que van soltando a nuestro timeline y que muchas veces perdemos por no hacer un favorito a tiempo. Dicho esto, de primeras lo que vamos a necesitar es una página en la que mostraremos información procedente del API de Twitter.

Creamos un controlador para las páginas de contenido estático:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="n">g</span> <span class="n">controller</span> <span class="no">StaticPages</span> <span class="n">home</span> <span class="n">help</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Y hacemos algunos ajuste en el _layout_ general para empezar a beneficiarnos de Twitter Bootstrap

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>URLHunter<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--[if lt IE 9]&gt;</span>
</span><span class='line'><span class="c">  &lt;script src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="c">  &lt;![endif]--&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>%= stylesheet_link_tag    &quot;application&quot;, :media =&gt; &quot;all&quot; %&gt;
</span><span class='line'>  <span class="err">&lt;</span>%= javascript_include_tag &quot;application&quot; %&gt;
</span><span class='line'>  <span class="err">&lt;</span>%= csrf_meta_tags %&gt;
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;span9&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= yield %&gt;<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;span3&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h2&gt;</span>¿Por qué?<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>Porque alguien tenía que hacerlo. Si no, Twitter volvería a cambiar su API para eliminar la funcionalidad de favoritos.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

## Accediendo al API de Twitter

Para recuperar el timelime de nuestra "presa" podemos desarrollar las llamadas que necesitemos o utilizar la gema "Twitter". Siguiendo la filosfía DRY y como hay otras cosas mucho mejores que hacer, nosotros nos decantamos por la gema.

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;twitter&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Antiguamente ya podríamos hacer algunas pruebas con la consola pero en los tiempos que corren hay que autenticarse. Para ello, siguiendo la documentación de la gema, hay que crear un fichero de inicialización en /config/initializers llamado twitter.rb:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Twitter</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">consumer_key</span> <span class="o">=</span> <span class="no">YOUR_CONSUMER_KEY</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">consumer_secret</span> <span class="o">=</span> <span class="no">YOUR_CONSUMER_SECRET</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">oauth_token</span> <span class="o">=</span> <span class="no">YOUR_OAUTH_TOKEN</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">oauth_token_secret</span> <span class="o">=</span> <span class="no">YOUR_OAUTH_TOKEN_SECRET</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Una vez hayamos reemplazado los valores aplantillados con los que podemos encontrar en la sección de "Mis applicaciones" de la web de desarrolladores de Twitter ya estaremos en condiciones de empezar a consumir datos de Twitter.

Inicialmente, vamos a probar que tal funciona todo incluyendo lo siguiente en el home.html.erb:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>Todos los links de @objectivec_es<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;tweets-with-links&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% Twitter.user_timeline(&quot;objectivec_es&quot;, :count =&gt; 10, :exclude_replies =&gt; true).each do |tweet| %&gt;
</span><span class='line'>    <span class="nt">&lt;blockquote&gt;</span> <span class="err">&lt;</span>%= tweet.text %&gt; <span class="nt">&lt;/blockquote&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% end %&gt;
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

¿Igualito que en iOS, eh? Bueno, cada uno tiene sus virtudes. En cualquier caso, aunque hemos obtenido rapidos resultados no podemos decir que sean _bonitos_. Lo suyo sería que los hashtags, las menciones y los links tuvieran los vinculos correspondientes. Para eso vamos a utilizar otra gema.

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem <span class="s1">&#39;twitter-text&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Según la documentación de la gema, para _autolinkar_ las entidades lo único que tenemos que hacer es lo siguiente:

A *app/helpers/application_helper.rb* lo dejaremos de esta forma

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ApplicationHelper</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Twitter</span><span class="p">:</span><span class="ss">:Autolink</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Y en *home.html.erb* cambiaremos el contenido de la cita por lo siguiente:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;blockquote&gt;</span> <span class="nt">&lt;p&gt;</span><span class="err">&lt;</span>%= auto_link(tweetlink.content).html_safe %&gt;<span class="nt">&lt;/p&gt;</span> <span class="nt">&lt;/blockquote&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

>Es necesario poner html_safe al final para que Rails interprete que le estamos pasando un texto que contiene etiquetas HTML, si no lo hicieramos las etiquetas se pintarían como si fuera texto plano.

Si recargamos ahora la página veremos todos los tweets con enlaces a los usuarios mencionados, a los hasgtags... Como diría Duke Nukem: "Ah!, much better!!!"

Lo siguiente que vamos a hacer es almacenar los tweets en base de datos. ¿Por qué?, pues por varios motivos:

- No queremos perder ni una sola de estas píldoras de información
- Ahora no son muchos pero cuando los chicos de [@ObjectiveC_es][2] vayan por los 3000 tweets esta web tardará bastante más en cargar
- En esta vida, no eres nadie si no haces un poco de persistencia.

Así que crearemos un modelo para almacenar algunos datos. Inicialmente será muy sencillo, ya lo complicaremos más adelante:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g model tweetlink tweet_id screen_name content:text profile_image tweet_created_at
</span></code></pre></td></tr></table></div></figure></notextile></div>

e incluiremos algunos métodos de conveniencia en la nueva clase:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Tweetlink</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:content</span><span class="p">,</span> <span class="ss">:screen_name</span><span class="p">,</span> <span class="ss">:tweet_id</span><span class="p">,</span> <span class="ss">:profile_image</span><span class="p">,</span> <span class="ss">:tweet_created_at</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">first_time</span>
</span><span class='line'>    <span class="no">Twitter</span><span class="o">.</span><span class="n">user_timeline</span><span class="p">(</span><span class="s2">&quot;objectivec_es&quot;</span><span class="p">,</span> <span class="ss">:count</span> <span class="o">=&gt;</span> <span class="mi">3200</span><span class="p">,</span> <span class="ss">:exclude_replies</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tweet</span><span class="o">|</span>
</span><span class='line'>      <span class="n">insert_tweet</span><span class="p">(</span><span class="n">tweet</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">pull_tweets</span>
</span><span class='line'>    <span class="no">Twitter</span><span class="o">.</span><span class="n">user_timeline</span><span class="p">(</span><span class="s2">&quot;objectivec_es&quot;</span><span class="p">,</span> <span class="ss">:count</span> <span class="o">=&gt;</span> <span class="mi">200</span><span class="p">,</span> <span class="ss">:exclude_replies</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:since_id</span> <span class="o">=&gt;</span> <span class="n">maximum</span><span class="p">(</span><span class="ss">:tweet_id</span><span class="p">))</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tweet</span><span class="o">|</span>
</span><span class='line'>      <span class="n">insert_tweet</span><span class="p">(</span><span class="n">tweet</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">insert_tweet</span><span class="p">(</span><span class="n">tweet</span><span class="p">)</span>
</span><span class='line'>   <span class="k">unless</span> <span class="n">exists?</span><span class="p">(</span><span class="n">tweet_id</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>     <span class="k">if</span> <span class="n">tweet</span><span class="o">.</span><span class="n">retweet?</span>
</span><span class='line'>       <span class="n">tweet</span> <span class="o">=</span> <span class="n">tweet</span><span class="o">.</span><span class="n">retweeted_status</span>
</span><span class='line'>     <span class="k">end</span>
</span><span class='line'>     <span class="k">if</span> <span class="n">tweet</span><span class="o">.</span><span class="n">urls</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'>       <span class="n">create!</span><span class="p">(</span>
</span><span class='line'>           <span class="n">tweet_id</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">id</span><span class="p">,</span>
</span><span class='line'>           <span class="ss">content</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">text</span><span class="p">,</span>
</span><span class='line'>           <span class="n">screen_name</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">screen_name</span><span class="p">,</span>
</span><span class='line'>           <span class="n">profile_image</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">profile_image_url</span><span class="p">,</span>
</span><span class='line'>           <span class="n">tweet_created_at</span><span class="p">:</span> <span class="n">tweet</span><span class="o">.</span><span class="n">created_at</span><span class="p">,</span>
</span><span class='line'>       <span class="p">)</span>
</span><span class='line'>     <span class="k">end</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

A continuación, tendremos que cambiar el controlador y la vista ya que ahora mismo todavía están recuperando la información directamente desde el API.

El metodo _home_ quedará de la siguiente manera:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">home</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@tweetlinks</span> <span class="o">=</span> <span class="no">Tweetlink</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@tweetlinks</span><span class="o">.</span><span class="n">empty?</span> <span class="p">?</span> <span class="no">Tweetlink</span><span class="o">.</span><span class="n">first_time</span> <span class="p">:</span> <span class="no">Tweetlink</span><span class="o">.</span><span class="n">pull_tweets</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="c1"># index.html.erb</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@tweetlinks</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Y la vista de esta otra forma:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>Todos los links de @objectivec_es<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;tweets-with-links&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% @tweetlinks.each do |tweetlink| %&gt;
</span><span class='line'>    <span class="nt">&lt;blockquote&gt;</span>
</span><span class='line'>      <span class="err">&lt;</span>%= image_tag tweetlink.profile_image %&gt;
</span><span class='line'>      <span class="err">&lt;</span>%= tweetlink.screen_name %&gt; wrote at
</span><span class='line'>      <span class="err">&lt;</span>%= l DateTime.parse(tweetlink.tweet_created_at), :format =&gt; :long %&gt;
</span><span class='line'>      <span class="nt">&lt;p&gt;</span><span class="err">&lt;</span>%= auto_link(tweetlink.content).html_safe %&gt;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/blockquote&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% end %&gt;
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Para terminar vamos a incluir paginación, esto reducirá el tiempo de carga de la página y mejorará la usabilidad. Otra vez más, podriamos escribir todo el código necesario para montar una paginación pero con un par de gemas lo podemos dejar solucionado:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;will_paginate&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;bootstrap-will_paginate&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

La gema *will_paginate* es la que se encarga de la gestión de la paginación. Lo único que tendremos que hacer es cambiar el número de registros que recuperamos de la clase Tweetlink en el controlador. En lugar de _all_ usaremos _paginate_:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">home</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@tweetlinks</span> <span class="o">=</span> <span class="no">Tweetlink</span><span class="o">.</span><span class="n">paginate</span><span class="p">(</span><span class="ss">page</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@tweetlinks</span><span class="o">.</span><span class="n">empty?</span> <span class="p">?</span> <span class="no">Tweetlink</span><span class="o">.</span><span class="n">first_time</span> <span class="p">:</span> <span class="no">Tweetlink</span><span class="o">.</span><span class="n">pull_tweets</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="c1"># index.html.erb</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@tweetlinks</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

En el layout, indicaremos donde queremos que aparezca el componente de paginación. La gema *bootstrap-will_paginate* aplica los estilos de Twitter Bootstrap a paginación.

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>Todos los links de @objectivec_es<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="err">&lt;</span>%= will_paginate @tweetlinks %&gt;
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% @tweetlinks.each do |tweetlink| %&gt;
</span><span class='line'>    <span class="nt">&lt;blockquote&gt;</span>
</span><span class='line'>      <span class="err">&lt;</span>%= image_tag tweetlink.profile_image %&gt;
</span><span class='line'>      <span class="err">&lt;</span>%= tweetlink.screen_name %&gt; wrote at
</span><span class='line'>      <span class="err">&lt;</span>%= l DateTime.parse(tweetlink.tweet_created_at), :format =&gt; :long %&gt;
</span><span class='line'>      <span class="nt">&lt;p&gt;</span><span class="err">&lt;</span>%= auto_link(tweetlink.content).html_safe %&gt;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/blockquote&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% end %&gt;
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="err">&lt;</span>%= will_paginate @tweetlinks %&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

Y listo, podríamos seguir incluyendo muchas mejoras y posiblemente es lo que haga en los próximos días pero por el momento... esto es todo.

El código fuente lo puedes encontrar en [Github](https://github.com/jmoreno/URLHunter/tree/GitHub)

## ACTUALIZACIÓN 12/03/2013

He corregido los fragmentos de código que erán erróneos. En la siguiente entrada tenéis una explicación de los errores. Disculpad las molestias.



[1]: http://railscasts.com "Railscasts"
[2]: http://twitter.com/objectivec_es "@ObjectiveC_es"]]></content>
		
	</entry>
	
	<entry>
	  
		<title type="html"><![CDATA[Pintando rutas con MapKit]]></title>
		<link href="http://javimoreno.me/blog/2012/05/28/pintando-rutas-con-mapkit/"/>
		
	  <updated>2012-05-28T03:56:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2012/05/28/pintando-rutas-con-mapkit</id>
	  
	  <content type="html"><![CDATA[Le tenía muchas ganas a MapKit. Es de esas cosas que sabes que en algún momento tendrás que toquetear pero por algún motivo ese momento no llega. Al final ha sido para hacer una aplicación que tiene la funcionalidad de "como llegar". Había oído a unos decir que esto era muy complicado y a otros que no era para tanto... Por lo que he podido comprobar, a partir de iOS 4 es bastante fácil de implementar. No he intentado bajar el código más allá de esta versión así que no puedo confirmar si es muy complicado en versiones anteriores.

<!-- more -->

Aunque MapKit está muy bien, los acuerdos de licencia entre Apple, Google y TomTom (si, aunque parezca mentira, TomTom está metida en el ajo) provocan perversiones como que la geocodificación inversa esté soportada (obtener una dirección a partir de unas coordenadas) pero la directa no (obtener unas coordenadas a partir de una dirección). Con el cálculo de rutas pasa lo mismo: la aplicación Mapas permite encontrar direcciones en un mapa y calcular rutas entre dos puntos pero a Apple (aparentemente) no le trae a cuenta incluir esa funcionalidad en las API´s así que no queda más remedio que incluirla nosotros... ¿cómo? pues con [Google Directions](https://developers.google.com/maps/documentation/directions/)

La gran ventaja de este API es que podríamos calificarlo dentro del tipo "Semilla de Oro" porque lo aguanta todo. El esquema de la URL para obtener la ruta más sencilla es el siguiente:

[http://maps.googleapis.com/maps/api/directions/json?origin=Madrid&destination=Barcelona&sensor=false](http://maps.googleapis.com/maps/api/directions/json?origin=Madrid&destination=Barcelona&sensor=false)

En un alarde de originalidad, "origin" es el origen de la ruta y "destination" es el final de la ruta. "sensor" es un parametro con el que informamos de si el dispositivo tiene GPS. Pues bien, digo que es "Semilla de Oro" porque tanto en _origin_ como en _destination_ se pueden pasar coordenadas como literales. La única precaución será cambiar las caracteres no permitidos por los correspondientes con %.

El resultado es un conjunto de datos en formato json y de toda la información que nos facilita, la que más nos va a interesar para este post es la que se denomina _overview_polyline.
Ese "chorro de datos", claramente codificado es un conjunto de coordenadas que, si se unen, dan lugar a la linea que representa la ruta. Como la codificación es pública, alguien ya se ha tomado la molestia de escribir el código que la decodifica, en mi aplicación yo he usado [esta forma](http://sapessi.com/2010/06/decode-a-gpolyline-in-objective-c/) pero una búsqueda en Google te devuelve muchas más opciones, todas ellas semejantes. La única modificación que he incluido es una transformación de las coordenadas en un objeto CLLocation para devolverlo como elemento de un NSArray.

Para proyectar la ruta sobre el mapa, vamos a utilizar las clases MKPolyline y MKOverlayView. La forma de hacerlo la he obtenido de este [blog](http://spitzkoff.com/craig/?p=136), que es donde cuentan que desde iOS 4 es fácil pero que antes era complicado e infructuoso.

El resultado ha sido el de estas imágenes

<img class="left" src="/images/photos/2012/05/Foto%2028-05-12%2003%2031%2030.png" width="352" height="528">

<img class="left" src="/images/photos/2012/05/Foto%2028-05-12%2003%2031%2035.png" width="352" height="528">


Y ya está, el código fuente de la demo lo podéis encontrar en [GitHub](https://github.com/jmoreno/PruebaMapa).
]]></content>
		
	</entry>
	
	<entry>
	  
		<title type="html"><![CDATA[Una web con Ruby on Rails]]></title>
		<link href="http://javimoreno.me/blog/2012/05/14/una-web-con-ruby-on-rails/"/>
		
	  <updated>2012-05-14T17:33:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2012/05/14/una-web-con-ruby-on-rails</id>
	  
	  <content type="html"><![CDATA[Seguro que en algún momento nos hemos planteado la necesidad de disponer de un servicio web propio para alimentar alguna de nuestras aplicaciones (actualización de datos, gestión de InApp Purchases, notificaciones, etc).
Actualmente hay muchos servicios on-line que nos permiten gestionar estas necesidades con facilidad (Amazon Web Services, iCloud, Azure, Parse, MaaSive). Es conveniente, al menos, echar un vistazo a cada uno de ellos para saber que utilidad podemos sacar de ellos pero creo que también es conveniente hacer un acto de valentía y plantearnos el hacer nuestro propio servicio web.<!-- more -->
El objetivo que nos hemos marcado para esta sesión de 45 minutos es grande: no nos basta con un servicio que alimente nuestra aplicación, queremos una web que de soporte a esos datos y entre el maremagnun de opciones que hay disponibles para hacer esto nos hemos decantado por Ruby on Rails.

## ¿Que es Ruby un Rails?

Ruby on Rails es la forma de designar a un framework llamado Rails que dota al lenguaje de programación Ruby de toda la funcionalidad para hacer aplicaciones web. En realidad es como si los que hacemos aplicaciones para iOS dijeramos que las hacemos en Objective-C on Cocoa Touch... no suena tan guay.

Ruby y rails arrastran esa maldición de ser “cools” lo que provoca también rechazo/celos entre los fanaticos de otras plataformas. Ruby tiene fama de ser un lenguaje bonito, con el que da gusto programar. Algún “fanático” decidió que, ya que el nombre del lenguaje era una gema, porque no llamar a las diferentes librerias gemas también... y por esa razón mientras que los abigarrados programadores de php utilizan librerias los finos y elegantes programadores de ruby utilizan gemas. Rails es una gema, quizá la más famosa, que se apoya en otras gemas muy famosas y envidiadas para hacer aplicaciones web de una forma muy sencilla.

Ruby on Rails respeta al 100 % el patrón de arquitectura Modelo-Vista-Controlador, seguramente sea uno de los frameworks para el desarrollo de aplicaciones web más puristas en este sentido.

También es muy escrupuloso con el cumplimiento del principio Don´t Repeat Yourself. Esto es muy agradable sobre todo a la hora de hacer cambios en el modelo... algo que hacemos continuamente mientras desarrollamos y que se puede convertir en un dolor de cabeza al pasar a producción. Gracias a esto, las migraciones en ruby son muy sencillas... mucho más que con Core Data.

El paradigma llamado Convention over configuration también está en las raices de este framework y de la comunidad ruby en general. Ya veremos en nuestro ejemplo como es muy sencillo navegar por el código de nuestra aplicación ya que si la clase que conecta una entidad del modelo con la base de datos se llama List, la tabla se llamará lists, el controlador se llamará lists_controller, etc...

## ¿Y si no se Ruby?

Dale una oportunidad... seguro que tampoco sabías Objective-C y estás aquí. Como vamos a ver a continuación, hacer algo básico es muy muy sencillo. Ya habrá tiempo de ir profundizando en el lenguaje más adelante.

Desde luego, lo que vamos a hacer nosotros se puede hacer con otros frameworks y otros lenguajes de programación... busca el que sea más agradable para ti.

## ¿Que necesitamos para hacer nuestra aplicación?

Nuestro mac, que ya vendrá con ruby instalado. Lo mejor sería actualizar a la última versión ya que como es la primera aplicación que vamos a hacer no tenemos problemas de versiones. En este [enlace](http://pragmaticstudio.com/blog/2010/9/23/install-rails-ruby-mac) nos cuentan una forma de actualizar ruby, instalar rails y hacer una aplicación sencilla en Lion. Son los pasos que he seguido yo para hacer la instalación de rails en mi mac y el el ejemplo que vamos a ver es tan sencillo como el que viene en esa página.

## ¿Que es lo que vamos a hacer?

Una aplicación web que llamaremos MegaLists y que tendrá vistas para dar de alta elementos en una lista (algo de lo más original).
Al introducir por terminal:
    
    $ rails new MegaLists

rails nos crea todo proyecto de la aplicación, ahora necesitamos las vistas y la tabla donde almacenaremos nuestra lista. Si hemos decidido llamar a la tabla List  y solo necesitamos un campo para el nombre de la nota y otro para el detalle, las palabras mágicas son estas:

    $ rails generate scaffold List name:string description:string
    $ rake db:migrate

Al pedirle a rails que nos genere un andamio (scaffold) este nos crea todo lo que necesitamos para disfrutar de nuestra nueva web y de los servicios que nuestra app va a consumir. La segunda instrucción se encarga de realizar una migración en la base de datos para incluir los cambios que hemos solicitado, en este caso, crear una nueva tabla con dos campos.

Podemos tener un fichero con datos de prueba para cargar nuestra base de datos con una única instrucción en caso de que queramos volver a generarlos.  La primera instrucción nos abriría el fichero en nuestro editor de texto, la segunda instrucción es la que cargaría la base de datos.
    
    $ edit db/seeds.rb
    
    $ rake db:seed

Aunque parezca mentira, con lo poco que hemos hecho hasta ahora ya tenemos una web creada con toda la funcionalidad necesaria para alimentar la entidad lists. Lo único que nos falta para verla en funcionamiento es arrancar el servidor.

    $ rails server

El servidor... ¿cuando lo has instalado? ¿como sabe donde está alojado el proyecto? magia... las gemas tienen poderes y se encargan de estas cosas. Igual que no tenemos que preocuparnos por la base de datos, ya que rails gestiona las conexiones por nosotros, también incluye un pequeño servidor que nos permitirá hacer nuestras pruebas. Cuando se despliegue la aplicación en producción si que será necesario configurar un servidor Apache, instalar y configurar una base de datos, etc pero para desarrollo no necesitamos nada más.

Si habéis seguido los mismos pasos que yo,  este [enlace](http://localhost:3000/lists) os abrirá una pagina web con la lista de los elementos que contiene la tabla. Podemos editarlos, borrarlos, añadir alguno más...

Quizá, los más llamativo es lo que vemos si abrimos este otro [enlace](http://localhost:3000/lists.json). ¡Tremendo! el mísmo contenido del enlace anterior pero en formato json.

## API REST

La [wikipedia](http://es.wikipedia.org/wiki/Representational_State_Transfer) lo explica muy bien. Se basa en el excelente diseño del protocolo http que permite contener en la llamada toda la información necesaria para comprender la petición. Cada recurso es definido univocamente por su URI y a través de las operaciones http GET, POST, PUT y DELETE podemos crear (Create), leer (Read), actualizar (Update) y borrar (Delete). Todo esto nos lo incluye rails al hacer el scaffold.... gratis.

En el post que sigue a este veremos como hacer la aplicación iOS que accede a esta API para leer y modificar registros.
]]></content>
		
	</entry>
	
	<entry>
	  
		<title type="html"><![CDATA[Un "group by" con Core Data]]></title>
		<link href="http://javimoreno.me/blog/2012/01/17/un-group-by-con-core-data/"/>
		
	  <updated>2012-01-17T02:33:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2012/01/17/un-group-by-con-core-data</id>
	  
	  <content type="html"><![CDATA[Cuando se trabaja con bases de datos siempre llega un momento en el que hay que hacer algo más complejo que recuperar datos de forma directa y manipularlos. Saber cual es el registro que tiene el valor más alto o más bajo en una propiedad en concreto; identificar los valores diferentes que tienen una propiedad; etc, son situaciones que, aunque no sean cotidianas, vamos a tener que enfrentarnos con ellas.

<!-- more -->

Si nos basamos en el ejemplo que utilizamos en la entrada anterior, podría ser de utilidad conocer que colores de pelo diferentes o que colores de ojos tenemos en nuestra base de datos. Con SQL esto se suele hacer con la clausulas "distinct" o "group by". La clausula _distinct _ahora mismo está en desuso y si bien no es 100 % equivalente a la clausula _group by_ si que es cierto que los resultados obtenidos son análogos.

En Cocoa, si tienes una base de datos sqlite puedes hacer perfectamente un group by y gestionar los resultados. Sin embargo, hay una forma más sencilla de hacerlo: con _Key-value coding_ (en adelante KVC) que no solo sirve para los objetos de Core Data si no también para arrays de diccionarios y objetos que estén preparados para KVC. Para ello usaremos los _operadores de colección_.

Un array con el color de pelo de los individuos de nuestra base de datos se obtendría así:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">coloresDePelo</span> <span class="o">=</span> <span class="p">[</span><span class="n">arrayDeIndividuos</span> <span class="nl">valueForKeyPath:</span><span class="err">&#39;@</span><span class="n">distinctUnionOfArrays</span><span class="p">.</span><span class="n">colorPelo</span><span class="err">&#39;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

El arrayDeIndividuos está formado por objetos de tipo Individuo que es un NSManagedObject y que por lo tanto admite KVC. Si el objeto Individuo fuese un diccionario (NSDictionary o NSMutableDictionary) también funcionaría. El operador que hemos usado es `@distinctUnionOfArrays`.

Una cosa más para que nos den la Matricula de Honor. Es muy posible que el array esté desordenado, para obtener un array con los colores de pelo ordenados alfabéticamente añadiríamos la siguiente instrucción:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">coloresDePeloOrdenados</span> <span class="o">=</span> <span class="p">[</span><span class="n">coloresDePelo</span> <span class="nl">sortedArrayUsingSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">localizedCaseInsensitiveCompare:</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

La documentación de Apple sobre KVC la puedes encontrar [aquí](http://developer.apple.com/library/ios/#documentation/cocoa/conceptual/KeyValueCoding/Articles/KeyValueCoding.html#//apple_ref/doc/uid/10000107-SW1). Ahí podrás ver otros operadores de colección.
Si en vez de leer sobre KVC te apetece escuchar, el [episodio 21 de 85 % Cocoa](http://ochentaycincoporcientococoa.tumblr.com/post/4290497170/85-cocoa-episodio-21-kvc) hace una excelente introducción.
]]></content>
		
	</entry>
	
	<entry>
	  
		<title type="html"><![CDATA[Cursores dinámicos y NSCompoundPredicate]]></title>
		<link href="http://javimoreno.me/blog/2012/01/12/cursores-dinamicos-y-nscompoundpredicate/"/>
		
	  <updated>2012-01-12T03:02:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2012/01/12/cursores-dinamicos-y-nscompoundpredicate</id>
	  
	  <content type="html"><![CDATA[Hace unos años, en un proyecto lleno de anécdotas y experiencias, el grupo de desarrolladores me contaba que habían creado servicios para cada una de las tablas del modelo de datos con el objetivo de centralizar los accesos a la tablas. La idea me pareció interesante: estaba harto de tocar programas que tenían la misma query y había cambiado algún criterio por lo que unificar las consultas en un único servicio era genial.

Les sugerí que, a la hora de montar los cursores, preparasen toda salida de datos de forma que fuera reutilizable. De esta forma, a medida que se fueran creando nuevas consultas, solo habría que incluir la nueva query. "No habrá que dar de alta nuevas consultas, hacemos cursores dinámicos..." dijo uno de ellos con gran orgullo.

<!-- more -->

_CURSORES DINÁMICOS... Dios mío... se han atrevido a utilizar SQL dinámico, el mayor sacrilegio en cualquier instalación con un mainframe_, pensé yo. Cuando les dije que no se autorizaría la subida a producción de ningún programa con SQL dinámico me dijeron: "No, no. Si los hacemos con el SQL de toda la vida".

Lo que hacían era montar el _where_ de tal forma que incluían todos los campos por los que se podría preguntar y comprobaban si el campo de la tabla era igual a la variable o si la variable estaba vacía. Esto tenía dos resultados: con un único cursor se obtenían los mismo resultados que con cursores ad-hoc (menos código que picar) y al abrir el cursor, el DB2 hacía un TABLESPACE SCAN y el programa aparecía en todas las estadísticas de pésimo rendimiento (gran bronca del DBA).
    
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">PERSONAS</span>
</span><span class='line'> <span class="k">WHERE</span> <span class="p">(</span><span class="n">EDAD</span> <span class="o">=</span> <span class="p">:</span><span class="n">EDAD</span> <span class="k">OR</span> <span class="p">:</span><span class="n">EDAD</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>   <span class="k">AND</span> <span class="p">(</span><span class="n">SEXO</span> <span class="o">=</span> <span class="p">:</span><span class="n">SEXO</span> <span class="k">OR</span> <span class="p">:</span><span class="n">SEXO</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="k">AND</span> <span class="p">(</span><span class="n">ALTURA</span> <span class="o">=</span> <span class="p">:</span><span class="n">ALTURA</span> <span class="k">OR</span> <span class="p">:</span><span class="n">ALTURA</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>   <span class="k">AND</span> <span class="p">(</span><span class="n">PESO</span> <span class="o">=</span> <span class="p">:</span><span class="n">PESO</span> <span class="k">OR</span> <span class="p">:</span><span class="n">PESO</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>   <span class="k">AND</span> <span class="p">(</span><span class="n">COLOROJOS</span> <span class="o">=</span> <span class="p">:</span><span class="n">COLOROJOS</span> <span class="k">OR</span> <span class="p">:</span><span class="n">COLOROJOS</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="k">AND</span> <span class="p">(</span><span class="n">COLORPELO</span> <span class="o">=</span> <span class="p">:</span><span class="n">COLORPELO</span> <span class="k">OR</span> <span class="p">:</span><span class="n">COLORPELO</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Por eso, cuando la semana pasada me empeñe en montar un predicado variable para un proyecto de iOS y termine encontrando NSCompoundPredicate, pensé: "Esto si que es un cursor dinámico"

**NSPredicate** es una clase que se utiliza para definir condiciones lógicas que acoten una búsqueda. Esta clase se puede utilizar para obtener un array de objetos más pequeño a partir de otro más grande utilizando un método de la clase NSArray que es _filteredArrayUsingPredicate:_

Por ejemplo: tenemos un array llamado _personas_ que contiene objetos de tipo _Individuo. _El objeto individuo tiene diferentes propiedades: edad, sexo, altura, peso, colorOjos, colorPelo, etc. Si queremos tener un array más pequeño con las personas que son mujeres y tiene los ojos azules haríamos lo siguiente:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSPredicate</span> <span class="o">*</span><span class="n">predicate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSPredicate</span> <span class="nl">predicateWithFormat:</span><span class="s">@&quot;(sexo == %@ AND colorOjos == %@)&quot;</span><span class="p">,</span> <span class="n">individuo</span><span class="p">.</span><span class="n">sexo</span><span class="p">,</span> <span class="n">individuo</span><span class="p">.</span><span class="n">colorOjos</span><span class="p">];</span>
</span><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">mujeresDeOjosAzules</span> <span class="o">=</span> <span class="p">[</span><span class="n">personas</span> <span class="nl">filteredArrayUsingPredicate:</span><span class="n">predicate</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

En el ejemplo anterior, _individuo.sexo_ contendría el valor "Mujer" e _individuo.colorOjos_ contendría el valor "Azul". Bastante fácil, no?.

Bueno, supongamos ahora que estamos montando una especie de "Quien es quien" en el que dejamos que pregunten de forma aleatoria por un campo, por dos, por todos, etc... pero sin ningún control. En este caso deberíamos evaluar todas las posibilidades y definir un NSPredicate para cada una de ellas, evaluando previamente cada situación.
Con pocas propiedades es asumible montar los diferentes NSPredicate, con seis propiedades las combinaciones van a ser unas cuantas (si mis recuerdos de combinatoria no fallan serían 63 combinaciones diferentes)... ¿tenemos que codificarlas todas? No, existe **NSCompoundPredicate**, la panacea de los cursores dinámicos.

El ejemplo quedaría así:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">predicateArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">individuo</span><span class="p">.</span><span class="n">edad</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="p">[</span><span class="n">predicateArray</span> <span class="nl">addObject:</span><span class="p">[</span><span class="n">NSPredicate</span> <span class="nl">predicateWithFormat:</span><span class="s">@&quot;(edad == %@)&quot;</span><span class="p">,</span> <span class="n">individuo</span><span class="p">.</span><span class="n">edad</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">individuo</span><span class="p">.</span><span class="n">sexo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="p">[</span><span class="n">predicateArray</span> <span class="nl">addObject:</span><span class="p">[</span><span class="n">NSPredicate</span> <span class="nl">predicateWithFormat:</span><span class="s">@&quot;(sexo == %@)&quot;</span><span class="p">,</span> <span class="n">individuo</span><span class="p">.</span><span class="n">sexo</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">individuo</span><span class="p">.</span><span class="n">altura</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="p">[</span><span class="n">predicateArray</span> <span class="nl">addObject:</span><span class="p">[</span><span class="n">NSPredicate</span> <span class="nl">predicateWithFormat:</span><span class="s">@&quot;(altura == %@)&quot;</span><span class="p">,</span> <span class="n">individuo</span><span class="p">.</span><span class="n">altura</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">individuo</span><span class="p">.</span><span class="n">peso</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="p">[</span><span class="n">predicateArray</span> <span class="nl">addObject:</span><span class="p">[</span><span class="n">NSPredicate</span> <span class="nl">predicateWithFormat:</span><span class="s">@&quot;(peso == %@)&quot;</span><span class="p">,</span> <span class="n">individuo</span><span class="p">.</span><span class="n">peso</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">individuo</span><span class="p">.</span><span class="n">colorOjos</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="p">[</span><span class="n">predicateArray</span> <span class="nl">addObject:</span><span class="p">[</span><span class="n">NSPredicate</span> <span class="nl">predicateWithFormat:</span><span class="s">@&quot;(colorOjos == %@)&quot;</span><span class="p">,</span> <span class="n">individuo</span><span class="p">.</span><span class="n">colorOjos</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">individuo</span><span class="p">.</span><span class="n">colorPelo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="p">[</span><span class="n">predicateArray</span> <span class="nl">addObject:</span><span class="p">[</span><span class="n">NSPredicate</span> <span class="nl">predicateWithFormat:</span><span class="s">@&quot;(colorPelo == %@)&quot;</span><span class="p">,</span> <span class="n">individuo</span><span class="p">.</span><span class="n">colorPelo</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">NSCompoundPredicate</span> <span class="o">*</span><span class="n">compoundPredicate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSCompoundPredicate</span> <span class="nl">andPredicateWithSubpredicates:</span><span class="n">predicateArray</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Lo que hemos hecho es un NSPredicate por cada propiedad que tenemos que evaluar. Comprobando previamente que esa propiedad esté informada. Cada NSPredicate lo incluimos en un array que posteriormente le pasaremos a la clase NSCompoundPredicate a través del método correspondiente.
Esta clase solo posee tres métodos: andPredicateWithSubpredicates para recuperar los objetos que cumplan todas las condiciones, orPredicateWithSubpredicates para recuperar los objetos que cumplen alguna condición y notPredicateWithSubpredicates que, creo, sirve para recuperar los objetos que no cumplen ninguna condición.

Si queréis saber más sobre NSPredicate y NSCompoundPredicate, lo mejor es consultar la documentación de Apple:

[NSPredicate](http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSPredicate_Class/Reference/NSPredicate.html)
[NSCompoundPredicate](http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSCompoundPredicate_Class/Reference/Reference.html#//apple_ref/occ/cl/NSCompoundPredicate)
]]></content>
		
	</entry>
	
	<entry>
	  
		<title type="html"><![CDATA[Planificando la descarga de informes de iTunes Connect]]></title>
		<link href="http://javimoreno.me/blog/2011/12/03/planificando-la-descarga-de-informes-de-itunes-connect/"/>
		
	  <updated>2011-12-03T16:46:00+00:00</updated>
	  <id>http://javimoreno.me/blog/2011/12/03/planificando-la-descarga-de-informes-de-itunes-connect</id>
	  
	  <content type="html"><![CDATA[Hace poco me puse con una tarea que tenía pendiente desde el verano: automatizar la descarga de informes del iTunes Connect.

El 30 de Agosto, en el Apple Developer Connection (en el iOS Developer News también) publicaron esto: [Automatically Download iTunes Connect Reports](http://developer.apple.com/news/index.php?id=08302011a). 
Lo que nos contaban ahí es que habían desarrollado una nueva herramienta para poder descargar los informes de ventas del iTunes Connect sin tener que acceder a dicho portal. 
Esto está muy bien, primero porque la descarga de varios informes es bastante tediosa, segundo porque es normal que no te acuerdes de entrar a descargarlos y puedes automatizar la descarga y tercero porque las herramientas para el seguimiento de las ventas brillan por su ausencia así que si empiezan a hacer alguna es una buena señal.

<!-- more -->

A los cuatro días ya podía encontrarse en la web este enlace: [A Bash script to download all available reports using Apple's ‘Auto-Ingest’ Tool for iTunes Connect Sales & Trends Reports](http://ipaddevzone.com/cs/bash-script-download-all-available-reports-using-apples-auto-ingest-tool-itunes-connect-sales-tren)

Voy a insistir un poco más en la importancia de la planificación de estas descargas: tanto con esta herramienta como desde el portal solo puedes descargarte los últimos 14 informes diarios y los últimos 13 informes semanales (de ventas, no los que echan en la primera de TVE los sábados por la noche). Si planificas una tarea de descarga diaria, mal se tiene que dar para que al menos una vez en 14 días tu Mac no esté encendido a la/s hora/s planificada/s.
En el enlace de iPad DevZone nos mostraban un Bash script para ejecutar la descarga, con comprobación de existencia de fichero descargado para no repetir además de los pasos a seguir para planificar este script correctamente.

Lo que escribo a continuación es, básicamente, la traducción del contenido de ese post con alguna aclaración más para los que no tengan ni idea de lo que es un script bash ni de como se planifica (yo era uno de esos hasta hace quince días).

1.- Creamos un directorio para nuestros scripts, por ejemplo: ~/bin/itc (para los no familiarizados con esta notación esto es crear una carpeta que se llame "bin" dentro de nuestra carpeta de usuario que, a su vez, contenga otra carpeta llamada "itc")

2.- Con nuestro editor de texto favorito (yo lo hice con TextWrangler) creamos un archivo llamado "download_itc_reports_sh" y lo guardamos en la carpeta "itc" que hemos creado antes. A continuación copiamos uno de los scripts que están al final de este post, lo pegamos y modificamos los parámetros de la sección de "Configuration" con nuestros propios datos.
USER_NAME es nuestro usuario de acceso al iTC, USER_PASSWD la contraseña, VENDOR_ID el código de compañía y DIR_DEST el directorio donde vamos a descargar los informes. En mi caso particular, el directorio de descarga está dentro de la carpeta de DropBox que tengo en el Mac y así tengo el backup de los informes automatizado... ;-)

3.- En la misma carpeta donde dejamos este fichero, tenemos que tener la herramienta de descarga automática que no es otra cosa que una clase Java. Si no la has descargado todavía puedes hacerlo desde este [enlace](http://www.apple.com/itunesnews/docs/Autoingestion.class.zip). Tendrás que tener Java instalado para poder utilizar esta herramienta.
Los siguientes pasos ya hay que darlos en el Terminal.

4.- Si queremos ejecutar manualmente el script, escribimos en el terminal lo siguiente:

    $ ~/bin/itc/download_itc_reports.sh

5.- Para planificarlo tendremos que usar otra herramienta escondida dentro del Terminal: Crontab

6.- Para editar las entradas de Crontab escribimos lo siguiente en el terminal:
    
    $ crontab -e

7.- En una nueva linea en blanco (o en la primera si no tenemos nada) escribimos lo siguiente
  
    0 13,14,16 * * * ~/bin/itc/download_itc_reports.sh

8.- Breve explicación sobre crontab. Cada registro consta de seis argumentos: minutos, horas, día del mes, mes, día de la semana y comando a ejecutar. Varios valores para el mismo argumento se separan por comas. El ejemplo se entiende como: "en el minuto cero de las 13, 14 y 16 horas de cualquier día, de cualquier mes y cualquier día de la semana ejecutar el comando ~/bin/itc/download_itc_reports.sh. Puedes encontrar más información de crontab en este [enlace](http://benr75.com/pages/using_crontab_mac_os_x_unix_linux).

9.- Si ya hemos creado otro script (por ejemplo: uno para informes diarios y otro para los semanales) habría que incluir otra linea con la planificación deseada y el nombre del script.

10.- Una vez que hemos terminado de editar, guardamos y comprobamos nuestro trabajo escribiendo en el terminal:
    
    $ crontab -l

11.- Y ya está, si el Mac está encendido a las horas planificadas se ejecutarán los scripts.

Los informes son ficheros planos que pueden ser importados a cualquier hoja de cálculo o base de datos que nos hayamos creado. Yo uso una aplicación que se llama AppStar Lite que permite importar estos informes y visualizarlos de una forma agradable.

Actualmente podemos descargarnos dos tipos de informe: Diarios y Semanales. A continuación hay un script para cada uno.
Además, cada tipo de informe tiene dos subtipos: Summary y Opt-In. No tengo muy clara la diferencia entre los primeros y los segundos. Los scripts están escritos para descargar los Summary, para descargar los Opt-In simplemente habría que cambiar una palabra por la otra.

Script para descarga de informes diarios:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Copyright 2011, Shark Intelligence, s.r.o.</span>
</span><span class='line'><span class="c"># Released under the MIT license</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#-------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># Configuration</span>
</span><span class='line'><span class="c">#-------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># ITC user name</span>
</span><span class='line'><span class="nv">USER_NAME</span><span class="o">=</span><span class="s2">&quot;user name&quot;</span>
</span><span class='line'><span class="c"># ITC user password</span>
</span><span class='line'><span class="nv">USER_PASSWD</span><span class="o">=</span><span class="s2">&quot;user password&quot;</span>
</span><span class='line'><span class="c"># vendorid: find it at: https://reportingitc.apple.com/subdashboard.faces</span>
</span><span class='line'><span class="nv">VENDOR_ID</span><span class="o">=</span><span class="s2">&quot;vendor Id&quot;</span>
</span><span class='line'><span class="c"># directory where the reports are downloaded; Current dir is used if empty;</span>
</span><span class='line'><span class="nv">DIR_DEST</span><span class="o">=</span>~/projects/XXX/reports-sales
</span><span class='line'><span class="c"># number of days beginning with yesterday which the reports are downloaded for</span>
</span><span class='line'><span class="nv">NUM_OF_DAYS_TO_DOWNLOAD</span><span class="o">=</span>14
</span><span class='line'><span class="c"># Currently only Sales reports are supported</span>
</span><span class='line'><span class="nv">REPORT_TYPE</span><span class="o">=</span><span class="s2">&quot;S&quot;</span>
</span><span class='line'><span class="c"># Currently only Daily report frequency is supported</span>
</span><span class='line'><span class="nv">REPORT_FREQ</span><span class="o">=</span><span class="s2">&quot;D&quot;</span>
</span><span class='line'><span class="c">#-------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># Program start</span>
</span><span class='line'><span class="c">#-------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># Adjust input vars</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$DIR_DEST&quot;</span> <span class="o">]</span>; <span class="k">then </span><span class="nv">DIR_DEST</span><span class="o">=</span><span class="sb">`</span><span class="nb">pwd</span> -P<span class="sb">`</span>; <span class="k">fi</span>
</span><span class='line'><span class="c"># Print info</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nb">echo </span>Downloading ITC sales reports <span class="k">for</span> <span class="nv">$NUM_OF_DAYS_TO_DOWNLOAD</span> days into destination: <span class="nv">$DIR_DEST</span>
</span><span class='line'><span class="c"># set CLASSPATH which should point the this script location</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nv">THIS_SCRIPT</span><span class="o">=</span><span class="nv">$0</span>
</span><span class='line'><span class="nb">cd</span> <span class="sb">`</span>dirname <span class="nv">$THIS_SCRIPT</span><span class="sb">`</span>
</span><span class='line'><span class="nv">CLASSPATH</span><span class="o">=</span><span class="sb">`</span><span class="nb">pwd</span> -P<span class="sb">`</span>
</span><span class='line'><span class="c"># set dir where the reports are downloaded to</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nb">cd</span> <span class="nv">$DIR_DEST</span>
</span><span class='line'><span class="c"># loop for requested NUM_OF_DAYS_TO_DOWNLOAD</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="k">for</span> <span class="o">((</span> <span class="nv">DAY</span><span class="o">=</span>NUM_OF_DAYS_TO_DOWNLOAD; DAY&gt;0; DAY-- <span class="o">))</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="nv">DT_CUR_STR</span><span class="o">=</span><span class="s2">&quot;date -v-${DAY}d +%Y%m%d&quot;</span>
</span><span class='line'><span class="nv">DT_CUR</span><span class="o">=</span><span class="sb">`</span><span class="nv">$DT_CUR_STR</span><span class="sb">`</span>
</span><span class='line'><span class="nv">FILE_CUR</span><span class="o">=</span><span class="s2">&quot;${REPORT_TYPE}_${REPORT_FREQ}_${VENDOR_ID}_${DT_CUR}.txt.gz&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="k">$(</span>find . -name <span class="nv">$FILE_CUR</span> -maxdepth 1 -type f | wc -l<span class="k">)</span> <span class="o">==</span> <span class="s2">&quot;0&quot;</span> <span class="o">]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="c"># Report is missing so download one</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$DT_CUR</span>: MISSING! Download initiated...
</span><span class='line'>java -cp <span class="nv">$CLASSPATH</span> Autoingestion <span class="nv">$USER_NAME</span> <span class="nv">$USER_PASSWD</span> <span class="nv">$VENDOR_ID</span> Sales Daily Summary <span class="nv">$DT_CUR</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="c"># Report is found</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$DT_CUR: already here&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Script para descarga de informes semanales:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Copyright 2011, Shark Intelligence, s.r.o.</span>
</span><span class='line'><span class="c"># Released under the MIT license</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#-------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># Configuration</span>
</span><span class='line'><span class="c">#-------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># ITC user name</span>
</span><span class='line'><span class="nv">USER_NAME</span><span class="o">=</span><span class="s2">&quot;user name&quot;</span>
</span><span class='line'><span class="c"># ITC user password</span>
</span><span class='line'><span class="nv">USER_PASSWD</span><span class="o">=</span><span class="s2">&quot;user password&quot;</span>
</span><span class='line'><span class="c"># vendorid: find it at: https://reportingitc.apple.com/subdashboard.faces</span>
</span><span class='line'><span class="nv">VENDOR_ID</span><span class="o">=</span><span class="s2">&quot;vendor Id&quot;</span>
</span><span class='line'><span class="c"># directory where the reports are downloaded; Current dir is used if empty;</span>
</span><span class='line'><span class="nv">DIR_DEST</span><span class="o">=</span>~/projects/XXX/reports-sales
</span><span class='line'><span class="c"># number of days beginning with yesterday which the reports are downloaded for</span>
</span><span class='line'><span class="nv">NUM_OF_WEEKS_TO_DOWNLOAD</span><span class="o">=</span>13
</span><span class='line'><span class="c"># Currently only Sales reports are supported</span>
</span><span class='line'><span class="nv">REPORT_TYPE</span><span class="o">=</span><span class="s2">&quot;S&quot;</span>
</span><span class='line'><span class="c"># Currently only Daily report frequency is supported</span>
</span><span class='line'><span class="nv">REPORT_FREQ</span><span class="o">=</span><span class="s2">&quot;W&quot;</span>
</span><span class='line'><span class="c">#-------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># Program start</span>
</span><span class='line'><span class="c">#-------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># Adjust input vars</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$DIR_DEST&quot;</span> <span class="o">]</span>; <span class="k">then </span><span class="nv">DIR_DEST</span><span class="o">=</span><span class="sb">`</span><span class="nb">pwd</span> -P<span class="sb">`</span>; <span class="k">fi</span>
</span><span class='line'><span class="c"># Print info</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nb">echo </span>Downloading ITC sales reports <span class="k">for</span> <span class="nv">$NUM_OF_WEEKS_TO_DOWNLOAD</span> days into destination: <span class="nv">$DIR_DEST</span>
</span><span class='line'><span class="c"># set CLASSPATH which should point the this script location</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nv">THIS_SCRIPT</span><span class="o">=</span><span class="nv">$0</span>
</span><span class='line'><span class="nb">cd</span> <span class="sb">`</span>dirname <span class="nv">$THIS_SCRIPT</span><span class="sb">`</span>
</span><span class='line'><span class="nv">CLASSPATH</span><span class="o">=</span><span class="sb">`</span><span class="nb">pwd</span> -P<span class="sb">`</span>
</span><span class='line'><span class="c"># set dir where the reports are downloaded to</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nb">cd</span> <span class="nv">$DIR_DEST</span>
</span><span class='line'><span class="c"># loop for requested NUM_OF_WEEKS_TO_DOWNLOAD</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="k">for</span> <span class="o">((</span> <span class="nv">WEEK</span><span class="o">=</span>NUM_OF_WEEKS_TO_DOWNLOAD; WEEK&gt;0; WEEK-- <span class="o">))</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="c"># set value for last sunday</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nv">DT_DAY_OF_WEEK</span><span class="o">=</span><span class="sb">`</span>date +%w<span class="sb">`</span>
</span><span class='line'><span class="nb">let </span><span class="nv">DAYS</span><span class="o">=(</span>WEEK-1<span class="o">)</span>*7+DT_DAY_OF_WEEK
</span><span class='line'><span class="nv">DT_CUR_STR</span><span class="o">=</span><span class="s2">&quot;date -v-${DAY}d +%Y%m%d&quot;</span>
</span><span class='line'><span class="nv">DT_CUR</span><span class="o">=</span><span class="sb">`</span><span class="nv">$DT_CUR_STR</span><span class="sb">`</span>
</span><span class='line'><span class="nv">FILE_CUR</span><span class="o">=</span><span class="s2">&quot;${REPORT_TYPE}_${REPORT_FREQ}_${VENDOR_ID}_${DT_CUR}.txt.gz&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="k">$(</span>find . -name <span class="nv">$FILE_CUR</span> -maxdepth 1 -type f | wc -l<span class="k">)</span> <span class="o">==</span> <span class="s2">&quot;0&quot;</span> <span class="o">]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="c"># Report is missing so download one</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$DT_CUR</span>: MISSING! Download initiated...
</span><span class='line'>java -cp <span class="nv">$CLASSPATH</span> Autoingestion <span class="nv">$USER_NAME</span> <span class="nv">$USER_PASSWD</span> <span class="nv">$VENDOR_ID</span> Sales Daily Summary <span class="nv">$DT_CUR</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="c"># Report is found</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$DT_CUR: already here&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
		
	</entry>
	
</feed>
